{"file_contents":{"README.md":{"content":"# 🌿 HerbalCareHub\n\nA comprehensive wellness web application focused on traditional herbal knowledge and natural health remedies. Built with modern technologies, featuring a clean, nature-inspired design optimized for accessibility and user engagement.\n\n## ✨ Features\n\n### 🌱 Herbal Knowledge Base\n- **27+ Herbs Database**: Comprehensive information on global and African indigenous herbs\n- **Detailed Profiles**: Benefits, preparation methods, safety information, and local names\n- **Search & Filter**: Find herbs by category, benefits, or search terms\n- **High-Quality Images**: Unique images for each herb\n\n### 🏥 Wellness Categories\n- **Mental Health**: Herbs for stress, anxiety, and cognitive support\n- **Energy**: Natural energy boosters and vitality herbs\n- **Sleep**: Herbs for better sleep and relaxation\n- **Weight Balance**: Herbs for metabolism and weight management\n- **General Wellness**: Overall health and immunity support\n\n### 👥 Community Features\n- **Wellness Community Center**: Share success stories and wellness journeys\n- **User Engagement**: Comment, like, and interact with community posts\n- **Email Integration**: User identification for community participation\n- **Categories**: Success stories, questions, tips, and wellness journeys\n\n### 🤖 AI Assistant\n- **Floating Chatbot**: Get personalized herbal recommendations\n- **Natural Language**: Ask questions about herbs and wellness\n- **Contextual Responses**: Tailored advice based on your needs\n\n## 🛠️ Technology Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for fast development and optimized builds\n- **Tailwind CSS** with custom nature-inspired design\n- **Radix UI** components for accessibility\n- **Wouter** for lightweight client-side routing\n- **TanStack Query** for server state management\n\n### Backend\n- **Node.js** with Express.js\n- **TypeScript** throughout the full stack\n- **In-memory storage** with interface for future database integration\n- **RESTful API** design\n\n### Database & ORM\n- **Drizzle ORM** configured for PostgreSQL\n- **Type-safe** database operations\n- **Migration system** with Drizzle-kit\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Node.js 18+ \n- npm or yarn\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <your-repo-url>\n   cd HerbalCareHub\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Start development server**\n   ```bash\n   npm run dev\n   ```\n\n4. **Access the application**\n   - Frontend: http://localhost:5173\n   - Backend API: http://localhost:5000\n\n## 📁 Project Structure\n\n```\nHerbalCareHub/\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/         # Page components\n│   │   ├── data/          # Static data\n│   │   └── hooks/         # Custom React hooks\n│   └── package.json\n├── server/                # Express backend\n│   ├── index.ts          # Server entry point\n│   ├── routes.ts         # API routes\n│   └── storage.ts        # Data storage\n├── shared/               # Shared schemas and types\n│   └── schema.ts\n├── attached_assets/      # Images and static assets\n└── package.json\n```\n\n## 🌐 Deployment\n\n### Vercel Deployment\n\n1. **Install Vercel CLI**\n   ```bash\n   npm i -g vercel\n   ```\n\n2. **Deploy to Vercel**\n   ```bash\n   vercel --prod\n   ```\n\n3. **Environment Variables** (set in Vercel dashboard)\n   - `NODE_ENV=production`\n\n### Manual Deployment\n\n1. **Build the project**\n   ```bash\n   npm run build\n   ```\n\n2. **Start production server**\n   ```bash\n   npm start\n   ```\n\n## 🔧 Available Scripts\n\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm start` - Start production server\n- `npm run type-check` - Run TypeScript type checking\n\n## 📊 API Endpoints\n\n### Herbs\n- `GET /api/herbs` - Get all herbs\n- `GET /api/herbs/:id` - Get specific herb\n- `GET /api/herbs/search?q=query` - Search herbs\n- `GET /api/herbs/category/:category` - Get herbs by category\n\n### Community\n- `GET /api/community/posts` - Get all community posts\n- `POST /api/community/posts` - Create new post\n- `GET /api/community/posts/:id/comments` - Get post comments\n- `POST /api/community/comments` - Create comment\n- `POST /api/community/posts/:id/like` - Like/unlike post\n\n### Contact\n- `POST /api/contact` - Submit contact form\n\n## 🎨 Design System\n\n### Color Palette\n- **Primary**: Nature-inspired greens (#10B981, #059669)\n- **Secondary**: Warm creams and soft browns\n- **Accent**: Complementary colors for highlights\n\n### Typography\n- **Headings**: Modern, readable fonts\n- **Body**: Clean, accessible text\n- **Responsive**: Mobile-first design approach\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📝 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- Traditional herbal knowledge and wisdom\n- African indigenous healing practices\n- Modern wellness research and studies\n- Open source community contributions\n\n## 📞 Support\n\nFor support, email support@herbalcarehub.com or create an issue in the repository.\n\n---\n\n**HerbalCareHub** - Connecting traditional wisdom with modern wellness 🌿✨\n","size_bytes":5556},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Herbal Care Hub\n\n## Overview\n\nHerbal Care Hub is a mobile-friendly wellness web application that focuses on traditional herbal knowledge and natural health remedies. The platform provides educational content about global and African indigenous herbs, wellness categories, and traditional preparation methods. Built as a full-stack application with modern technologies, it features a clean, nature-inspired design optimized for accessibility and user engagement.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety and developer experience\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management and caching\n- **UI Components**: Radix UI primitives with shadcn/ui design system for consistent, accessible components\n- **Styling**: Tailwind CSS with custom nature-inspired color palette (greens, creams, soft browns)\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js for RESTful API endpoints\n- **Language**: TypeScript throughout the full stack for consistency\n- **Data Layer**: In-memory storage implementation with interface for future database integration\n- **API Design**: RESTful endpoints for herbs management, search functionality, and contact form submissions\n\n### Database Schema Design\n- **ORM**: Drizzle ORM configured for PostgreSQL with type-safe database operations\n- **Schema**: \n  - Users table for future authentication features\n  - Herbs table with comprehensive metadata (name, local names, benefits, categories, preparation methods, safety info)\n  - Contact messages table for user inquiries\n- **Migration System**: Drizzle-kit for database schema migrations\n\n### Development Features\n- **Hot Reload**: Vite development server with HMR for rapid development\n- **Type Safety**: Shared TypeScript schemas between frontend and backend\n- **Code Quality**: Consistent import aliases and path resolution\n- **Mobile-First**: Responsive design with mobile breakpoint detection hooks\n\n### Content Management\n- **Herb Categories**: Mental Health, Energy, Sleep, Weight Balance, General Wellness\n- **Regional Classification**: Global herbs vs. African indigenous herbs with local names\n- **Search Functionality**: Name-based and condition-based herb discovery\n- **Educational Content**: Safety information, preparation methods, and traditional uses\n\n## External Dependencies\n\n### Database & Storage\n- **Neon Database**: PostgreSQL-compatible serverless database for production\n- **Drizzle ORM**: Type-safe database toolkit with PostgreSQL adapter\n- **connect-pg-simple**: PostgreSQL session store for future session management\n\n### UI & Styling\n- **Radix UI**: Comprehensive collection of accessible, unstyled React components\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide React**: Icon library for consistent iconography\n- **Google Fonts**: Inter font family for clean, readable typography\n\n### Development & Build\n- **Vite**: Build tool with React plugin and runtime error overlay\n- **React Hook Form**: Form handling with validation resolvers\n- **Zod**: Runtime type validation and schema validation\n- **TanStack React Query**: Server state management and data fetching\n\n### Hosting & Deployment\n- **Replit**: Development and hosting platform with integrated deployment\n- **ESBuild**: Fast JavaScript bundler for server-side code compilation\n- **Express.js**: Web application framework for API server\n\n## Recent Changes\n\n### September 4, 2025 - Complete Deployment Module Resolution Fix (Updated)\n- **Issue**: Deployment was failing with \"Cannot find module '/home/runner/workspace/dist/server/routes'\" error during production build\n- **Root Cause**: Conflicting TypeScript module resolution settings and problematic build script causing ES module import failures\n- **Fixes Applied**:\n  1. **TypeScript Config**: Updated `tsconfig.server.json` to use consistent \"Node16\" module resolution instead of conflicting \"bundler\" setting\n  2. **Build Script Simplification**: Removed complex sed command from build process since TypeScript files already have correct .js extensions\n  3. **File Cleanup**: Removed duplicate .js files that were causing module resolution conflicts\n  4. **Deployment Config**: Set up proper autoscale deployment configuration\n- **Technical Details**:\n  - Changed `tsconfig.server.json` from `\"moduleResolution\": \"bundler\"` to `\"moduleResolution\": \"Node16\"` for consistency\n  - Simplified build script from complex sed operations to straightforward TypeScript compilation\n  - TypeScript source files already had correct .js extensions for ES module imports (e.g., `./routes.js`, `../shared/schema.js`)\n  - Cleaned up duplicate JavaScript files that were interfering with module resolution\n- **Verification**: Production server builds and starts successfully, all modules load correctly, deployment configuration verified\n- **Deployment Status**: Fully resolved - ready for production deployment with proper ES module resolution","size_bytes":5200},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n      \"@/shared\": path.resolve(__dirname, \"shared\"),\n    },\n    extensions: ['.tsx', '.ts', '.jsx', '.js', '.json'],\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 3000,\n    fs: {\n      strict: false,\n      deny: [\"**/.*\"],\n    },\n    hmr: {\n      port: 3001,\n      clientPort: 443,\n    },\n  },\n  esbuild: {\n    loader: 'tsx',\n  },\n});\n","size_bytes":931},"client/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}","size_bytes":79},"client/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"client/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"src\"),\n      \"@/shared\": path.resolve(__dirname, \"..\", \"shared\"),\n    },\n  },\n  server: {\n    port: 5173,\n    host: true,\n  },\n});\n","size_bytes":350},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport path from \"path\";\nimport { registerRoutes } from \"./routes.js\";\nimport { setupVite, serveStatic, log } from \"./vite.js\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve static assets\napp.use('/attached_assets', express.static(path.join(process.cwd(), 'attached_assets')));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // For autoscale deployment, use port 80. Default to 80 if not specified.\n  // this serves both the API and the client.\n  const port = parseInt(process.env.PORT || '80', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2148},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage.js\";\nimport { insertContactMessageSchema, insertCommunityPostSchema, insertCommunityCommentSchema } from \"../shared/schema.js\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get all herbs\n  app.get(\"/api/herbs\", async (req, res) => {\n    try {\n      const herbs = await storage.getAllHerbs();\n      res.json(herbs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch herbs\" });\n    }\n  });\n\n  // Get herbs by category\n  app.get(\"/api/herbs/category/:category\", async (req, res) => {\n    try {\n      const { category } = req.params;\n      const herbs = await storage.getHerbsByCategory(category);\n      res.json(herbs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch herbs by category\" });\n    }\n  });\n\n  // Search herbs\n  app.get(\"/api/herbs/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n      const herbs = await storage.searchHerbs(q);\n      res.json(herbs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search herbs\" });\n    }\n  });\n\n  // Get single herb\n  app.get(\"/api/herbs/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const herb = await storage.getHerb(id);\n      if (!herb) {\n        return res.status(404).json({ message: \"Herb not found\" });\n      }\n      res.json(herb);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch herb\" });\n    }\n  });\n\n  // Submit contact form\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(validatedData);\n      res.status(201).json(message);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid form data\", \n          errors: error.issues \n        });\n      }\n      res.status(500).json({ message: \"Failed to submit contact form\" });\n    }\n  });\n\n  // Community routes\n  // Get all community posts\n  app.get(\"/api/community/posts\", async (req, res) => {\n    try {\n      const posts = await storage.getAllCommunityPosts();\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch community posts\" });\n    }\n  });\n\n  // Get single community post\n  app.get(\"/api/community/posts/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const post = await storage.getCommunityPost(id);\n      if (!post) {\n        return res.status(404).json({ message: \"Post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch post\" });\n    }\n  });\n\n  // Create community post\n  app.post(\"/api/community/posts\", async (req, res) => {\n    try {\n      const validatedData = insertCommunityPostSchema.parse(req.body);\n      const post = await storage.createCommunityPost(validatedData);\n      res.status(201).json(post);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid post data\", \n          errors: error.issues \n        });\n      }\n      res.status(500).json({ message: \"Failed to create post\" });\n    }\n  });\n\n  // Get comments for a post\n  app.get(\"/api/community/posts/:id/comments\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const comments = await storage.getCommentsByPostId(id);\n      res.json(comments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  // Create comment\n  app.post(\"/api/community/comments\", async (req, res) => {\n    try {\n      const validatedData = insertCommunityCommentSchema.parse(req.body);\n      const comment = await storage.createCommunityComment(validatedData);\n      res.status(201).json(comment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid comment data\", \n          errors: error.issues \n        });\n      }\n      res.status(500).json({ message: \"Failed to create comment\" });\n    }\n  });\n\n  // Like/unlike post\n  app.post(\"/api/community/posts/:id/like\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { userEmail } = req.body;\n      \n      if (!userEmail) {\n        return res.status(400).json({ message: \"User email is required\" });\n      }\n\n      const hasLiked = await storage.hasUserLikedPost(id, userEmail);\n      if (hasLiked) {\n        await storage.unlikePost(id, userEmail);\n        res.json({ liked: false });\n      } else {\n        await storage.likePost(id, userEmail);\n        res.json({ liked: true });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update like\" });\n    }\n  });\n\n  // Like/unlike comment\n  app.post(\"/api/community/comments/:id/like\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { userEmail } = req.body;\n      \n      if (!userEmail) {\n        return res.status(400).json({ message: \"User email is required\" });\n      }\n\n      const hasLiked = await storage.hasUserLikedComment(id, userEmail);\n      if (hasLiked) {\n        await storage.unlikeComment(id, userEmail);\n        res.json({ liked: false });\n      } else {\n        await storage.likeComment(id, userEmail);\n        res.json({ liked: true });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update like\" });\n    }\n  });\n\n  // AI Wellness Assistant endpoint\n  app.post(\"/api/ai/wellness\", async (req, res) => {\n    try {\n      const { message } = req.body;\n      if (!message || typeof message !== 'string') {\n        return res.status(400).json({ message: \"Message is required\" });\n      }\n      \n      const response = await storage.getAIWellnessResponse(message);\n      res.json(response);\n    } catch (error) {\n      console.error(\"AI wellness endpoint error:\", error);\n      res.status(500).json({ \n        response: \"I'm experiencing technical difficulties right now. Please try again later.\",\n        suggestions: [\n          \"What specific symptoms are you experiencing?\",\n          \"Are you currently taking any medications?\",\n          \"What's your primary wellness goal?\"\n        ]\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":6631},"server/storage.ts":{"content":"import { type User, type InsertUser, type Herb, type InsertHerb, type ContactMessage, type InsertContactMessage, type CommunityPost, type InsertCommunityPost, type CommunityComment, type InsertCommunityComment, type CommunityLike, type InsertCommunityLike } from \"../shared/schema.js\";\nimport { randomUUID } from \"crypto\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Initialize Gemini AI\nconsole.log('GEMINI_API_KEY in storage:', process.env.GEMINI_API_KEY ? 'Present' : 'Missing');\nif (!process.env.GEMINI_API_KEY) {\n  throw new Error('GEMINI_API_KEY environment variable is required');\n}\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  getAllHerbs(): Promise<Herb[]>;\n  getHerb(id: string): Promise<Herb | undefined>;\n  searchHerbs(query: string): Promise<Herb[]>;\n  getHerbsByCategory(category: string): Promise<Herb[]>;\n  createHerb(herb: InsertHerb): Promise<Herb>;\n  \n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getAllContactMessages(): Promise<ContactMessage[]>;\n  \n  // Community functions\n  getAllCommunityPosts(): Promise<CommunityPost[]>;\n  getCommunityPost(id: string): Promise<CommunityPost | undefined>;\n  createCommunityPost(post: InsertCommunityPost): Promise<CommunityPost>;\n  updateCommunityPost(id: string, updates: Partial<CommunityPost>): Promise<CommunityPost | undefined>;\n  deleteCommunityPost(id: string): Promise<boolean>;\n  \n  getCommentsByPostId(postId: string): Promise<CommunityComment[]>;\n  createCommunityComment(comment: InsertCommunityComment): Promise<CommunityComment>;\n  updateCommunityComment(id: string, updates: Partial<CommunityComment>): Promise<CommunityComment | undefined>;\n  deleteCommunityComment(id: string): Promise<boolean>;\n  \n  likePost(postId: string, userEmail: string): Promise<boolean>;\n  unlikePost(postId: string, userEmail: string): Promise<boolean>;\n  likeComment(commentId: string, userEmail: string): Promise<boolean>;\n  unlikeComment(commentId: string, userEmail: string): Promise<boolean>;\n  hasUserLikedPost(postId: string, userEmail: string): Promise<boolean>;\n  hasUserLikedComment(commentId: string, userEmail: string): Promise<boolean>;\n  getAIHerbInfo(query: string): Promise<any>;\n  getAIWellnessResponse(message: string): Promise<any>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private herbs: Map<string, Herb>;\n  private contactMessages: Map<string, ContactMessage>;\n  private communityPosts: Map<string, CommunityPost>;\n  private communityComments: Map<string, CommunityComment>;\n  private communityLikes: Map<string, CommunityLike>;\n\n  constructor() {\n    this.users = new Map();\n    this.herbs = new Map();\n    this.contactMessages = new Map();\n    this.communityPosts = new Map();\n    this.communityComments = new Map();\n    this.communityLikes = new Map();\n    this.initializeHerbs();\n    this.initializeSamplePosts();\n  }\n\n  private initializeHerbs() {\n    const initialHerbs: InsertHerb[] = [\n      // Global Herbs\n      {\n        name: \"Peppermint\",\n        localName: \"\",\n        emoji: \"🌿\",\n        description: \"Refreshing herb for digestion, headaches, and mental clarity. Perfect for teas and aromatherapy.\",\n        benefits: [\"Aids digestion\", \"Relieves headaches\", \"Improves mental clarity\", \"Natural decongestant\"],\n        categories: [\"Mental Health\", \"Energy\", \"General Wellness\"],\n        preparationMethods: [\"Tea\", \"Essential oil\", \"Fresh leaves\", \"Capsules\"],\n        safetyInfo: \"Generally safe for most people. Avoid if allergic to mint family plants.\",\n        imageUrl: \"/attached_assets/generated_images/Fresh_peppermint_leaves_0a300d3e.png\",\n        isIndigenous: \"false\",\n        region: \"Global\"\n      },\n      {\n        name: \"Ginger\",\n        localName: \"\",\n        emoji: \"🫚\",\n        description: \"Powerful anti-inflammatory root for nausea, digestion, and immune support.\",\n        benefits: [\"Reduces nausea\", \"Anti-inflammatory\", \"Boosts immunity\", \"Aids digestion\"],\n        categories: [\"Energy\", \"General Wellness\"],\n        preparationMethods: [\"Fresh tea\", \"Powder\", \"Capsules\", \"Decoction\"],\n        safetyInfo: \"May interact with blood thinners. Consult healthcare provider if pregnant.\",\n        imageUrl: \"/attached_assets/generated_images/Fresh_ginger_root_pieces_b404e3ce.png\",\n        isIndigenous: \"false\",\n        region: \"Global\"\n      },\n      {\n        name: \"Chamomile\",\n        localName: \"\",\n        emoji: \"🌼\",\n        description: \"Gentle, calming herb for sleep, anxiety, and digestive comfort.\",\n        benefits: [\"Promotes sleep\", \"Reduces anxiety\", \"Soothes digestion\", \"Anti-inflammatory\"],\n        categories: [\"Mental Health\", \"Sleep\", \"General Wellness\"],\n        preparationMethods: [\"Tea\", \"Tincture\", \"Capsules\", \"Poultice\"],\n        safetyInfo: \"Generally safe. May cause allergic reactions in people sensitive to ragweed family.\",\n        imageUrl: \"/attached_assets/generated_images/Chamomile_flowers_blooming_fcc5a2fb.png\",\n        isIndigenous: \"false\",\n        region: \"Global\"\n      },\n      {\n        name: \"Hibiscus\",\n        localName: \"\",\n        emoji: \"🌺\",\n        description: \"Tart, vitamin C-rich flower for blood pressure support and heart health.\",\n        benefits: [\"Supports heart health\", \"Rich in vitamin C\", \"May help blood pressure\", \"Antioxidant properties\"],\n        categories: [\"General Wellness\", \"Weight Balance\"],\n        preparationMethods: [\"Tea\", \"Cold brew\", \"Powder\", \"Extract\"],\n        safetyInfo: \"May lower blood pressure. Monitor if taking blood pressure medications.\",\n        imageUrl: \"/attached_assets/generated_images/Red_hibiscus_flowers_47e0eec6.png\",\n        isIndigenous: \"false\",\n        region: \"Global\"\n      },\n      {\n        name: \"Turmeric\",\n        localName: \"\",\n        emoji: \"🟡\",\n        description: \"Golden spice with powerful anti-inflammatory and antioxidant properties.\",\n        benefits: [\"Anti-inflammatory\", \"Antioxidant\", \"Supports joint health\", \"Immune support\"],\n        categories: [\"General Wellness\", \"Energy\"],\n        preparationMethods: [\"Powder\", \"Fresh root\", \"Golden milk\", \"Capsules\"],\n        safetyInfo: \"May interact with blood thinners. Use with black pepper for better absorption.\",\n        imageUrl: \"/attached_assets/generated_images/Fresh_turmeric_root_2357d6c4.png\",\n        isIndigenous: \"false\",\n        region: \"Global\"\n      },\n      // Indigenous African Herbs\n      {\n        name: \"Moringa\",\n        localName: \"Moringa oleifera\",\n        emoji: \"🌿\",\n        description: \"The miracle tree, boosts energy, immunity, and nutrition with incredible nutrient density.\",\n        benefits: [\"Complete nutrition\", \"Boosts energy\", \"Immune support\", \"Rich in vitamins\"],\n        categories: [\"Energy\", \"General Wellness\", \"Weight Balance\"],\n        preparationMethods: [\"Powder\", \"Fresh leaves\", \"Tea\", \"Capsules\"],\n        safetyInfo: \"Generally safe. Start with small amounts to assess tolerance.\",\n        imageUrl: \"/attached_assets/generated_images/Fresh_moringa_plant_leaves_f8771929.png\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Neem\",\n        localName: \"Muarubaini (Azadirachta indica)\",\n        emoji: \"🍃\",\n        description: \"Traditionally used for skin health, immunity, and blood sugar balance support.\",\n        benefits: [\"Skin health\", \"Immune support\", \"Blood sugar balance\", \"Natural antimicrobial\"],\n        categories: [\"General Wellness\", \"Weight Balance\"],\n        preparationMethods: [\"Tea\", \"Powder\", \"Paste\", \"Oil\"],\n        safetyInfo: \"Very bitter. Start with small amounts. Avoid during pregnancy.\",\n        imageUrl: \"/attached_assets/generated_images/Neem_tree_leaves_8f8d6bbc.png\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Aloe Vera\",\n        localName: \"Shubiri\",\n        emoji: \"🌱\",\n        description: \"For digestion, skin healing, and cooling the body naturally.\",\n        benefits: [\"Skin healing\", \"Digestive support\", \"Cooling properties\", \"Anti-inflammatory\"],\n        categories: [\"General Wellness\"],\n        preparationMethods: [\"Fresh gel\", \"Juice\", \"Topical application\", \"Powder\"],\n        safetyInfo: \"Use inner gel only. Avoid latex layer. May have laxative effects.\",\n        imageUrl: \"/attached_assets/generated_images/Aloe_vera_plant_gel_c15d2219.png\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Soursop\",\n        localName: \"Graviola / Mtopeto\",\n        emoji: \"🍈\",\n        description: \"For vitality, immunity, and digestive support with rich antioxidants.\",\n        benefits: [\"Rich in antioxidants\", \"Immune support\", \"Digestive health\", \"Vitality boost\"],\n        categories: [\"Energy\", \"General Wellness\"],\n        preparationMethods: [\"Tea\", \"Fresh fruit\", \"Powder\", \"Extract\"],\n        safetyInfo: \"Consume in moderation. May interact with certain medications.\",\n        imageUrl: \"/attached_assets/generated_images/Soursop_fruit_cut_open_e750000a.png\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"African Basil\",\n        localName: \"Ocimum gratissimum (Mutaa, Danduu)\",\n        emoji: \"🌿\",\n        description: \"For colds, flu, and mental clarity with aromatic healing properties.\",\n        benefits: [\"Cold and flu relief\", \"Mental clarity\", \"Respiratory support\", \"Antimicrobial\"],\n        categories: [\"Mental Health\", \"General Wellness\"],\n        preparationMethods: [\"Tea\", \"Steam inhalation\", \"Fresh leaves\", \"Essential oil\"],\n        safetyInfo: \"Generally safe. Use in moderation during pregnancy.\",\n        imageUrl: \"/attached_assets/generated_images/African_basil_leaves_21f0cb2b.png\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Baobab\",\n        localName: \"Adansonia digitata (Mbuyu)\",\n        emoji: \"🌳\",\n        description: \"Rich in vitamin C, supports immunity and energy with superfruit benefits.\",\n        benefits: [\"High vitamin C\", \"Immune support\", \"Energy boost\", \"Rich in fiber\"],\n        categories: [\"Energy\", \"General Wellness\"],\n        preparationMethods: [\"Powder\", \"Fresh fruit\", \"Smoothies\", \"Tea\"],\n        safetyInfo: \"Generally safe. High fiber content may cause digestive upset if consumed in large amounts.\",\n        imageUrl: \"/attached_assets/generated_images/Baobab_fruit_pods_1e748c22.png\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"African Sage\",\n        localName: \"Lippia javanica (Mshongi)\",\n        emoji: \"🍃\",\n        description: \"Used in steam therapy for coughs, colds, and relaxation.\",\n        benefits: [\"Respiratory support\", \"Relaxation\", \"Steam therapy\", \"Cold relief\"],\n        categories: [\"Mental Health\", \"Sleep\", \"General Wellness\"],\n        preparationMethods: [\"Steam inhalation\", \"Tea\", \"Dried leaves\", \"Aromatherapy\"],\n        safetyInfo: \"Generally safe for external use. Use caution with internal consumption.\",\n        imageUrl: \"/attached_assets/generated_images/African_sage_plant_11f1d049.png\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Chia Seeds\",\n        localName: \"Salvia hispanica\",\n        emoji: \"🌱\",\n        description: \"Nutrient-dense superfood seeds rich in omega-3 fatty acids, fiber, and protein.\",\n        benefits: [\"Rich in omega-3\", \"High fiber content\", \"Protein source\", \"Energy boost\", \"Heart health\"],\n        categories: [\"Energy\", \"Weight Balance\", \"General Wellness\"],\n        preparationMethods: [\"Raw consumption\", \"Soaked in water\", \"Smoothies\", \"Baking\", \"Pudding\"],\n        safetyInfo: \"Generally safe. Drink plenty of water when consuming. May cause digestive upset if not properly hydrated.\",\n        imageUrl: \"/attached_assets/generated_images/chia seeds.jpg\",\n        isIndigenous: \"false\",\n        region: \"Global\"\n      },\n      {\n        name: \"Rotheca myricoides\",\n        localName: \"Blue Butterfly Bush / Mubarika\",\n        emoji: \"🦋\",\n        description: \"Traditional African herb used for respiratory health and fever management.\",\n        benefits: [\"Respiratory support\", \"Fever reduction\", \"Anti-inflammatory\", \"Antimicrobial\"],\n        categories: [\"General Wellness\"],\n        preparationMethods: [\"Tea\", \"Decoction\", \"Fresh leaves\", \"Poultice\"],\n        safetyInfo: \"Traditional use suggests safety, but consult healthcare provider before use.\",\n        imageUrl: \"/attached_assets/generated_images/blue butterfly bush.jpg\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Bidens pilosa\",\n        localName: \"Black Jack / Mchunga\",\n        emoji: \"🌼\",\n        description: \"Widespread herb used for wound healing, diabetes management, and immune support.\",\n        benefits: [\"Wound healing\", \"Blood sugar support\", \"Immune boost\", \"Anti-inflammatory\"],\n        categories: [\"General Wellness\", \"Weight Balance\"],\n        preparationMethods: [\"Tea\", \"Fresh leaves\", \"Poultice\", \"Extract\"],\n        safetyInfo: \"Generally safe in traditional use. Monitor blood sugar if diabetic.\",\n        imageUrl: \"/attached_assets/generated_images/black jack.jpg\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Acacia nilotica\",\n        localName: \"Gum Arabic Tree / Mgunga\",\n        emoji: \"🌳\",\n        description: \"Traditional tree used for gum production, wound healing, and digestive health.\",\n        benefits: [\"Wound healing\", \"Digestive support\", \"Gum health\", \"Anti-inflammatory\"],\n        categories: [\"General Wellness\"],\n        preparationMethods: [\"Gum extract\", \"Bark decoction\", \"Poultice\", \"Powder\"],\n        safetyInfo: \"Gum arabic is generally safe. Avoid bark in large quantities.\",\n        imageUrl: \"/attached_assets/generated_images/acacia nilotica.jpg\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Dovyalis abyssinica\",\n        localName: \"Abyssinian Gooseberry / Mkomamanga\",\n        emoji: \"🫐\",\n        description: \"Fruit-bearing tree with medicinal properties for digestive and immune health.\",\n        benefits: [\"Digestive health\", \"Immune support\", \"Vitamin C source\", \"Antioxidant\"],\n        categories: [\"Energy\", \"General Wellness\"],\n        preparationMethods: [\"Fresh fruit\", \"Juice\", \"Tea\", \"Extract\"],\n        safetyInfo: \"Fruit is generally safe. Use in moderation.\",\n        imageUrl: \"/attached_assets/generated_images/abyssinian gooseberry.jpg\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Prunus africana\",\n        localName: \"African Cherry / Mueri\",\n        emoji: \"🍒\",\n        description: \"Traditional tree used for prostate health and anti-inflammatory properties.\",\n        benefits: [\"Prostate health\", \"Anti-inflammatory\", \"Urinary support\", \"Traditional medicine\"],\n        categories: [\"General Wellness\"],\n        preparationMethods: [\"Bark decoction\", \"Extract\", \"Capsules\", \"Tincture\"],\n        safetyInfo: \"Traditional use for prostate health. Consult healthcare provider before use.\",\n        imageUrl: \"/attached_assets/generated_images/African cherry.jpg\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Urtica massaica\",\n        localName: \"African Nettle / Mwiba\",\n        emoji: \"🌿\",\n        description: \"Stinging nettle variety used for joint health, allergies, and nutritional support.\",\n        benefits: [\"Joint health\", \"Allergy relief\", \"Rich in minerals\", \"Anti-inflammatory\"],\n        categories: [\"General Wellness\", \"Mental Health\"],\n        preparationMethods: [\"Cooked leaves\", \"Tea\", \"Soup\", \"Extract\"],\n        safetyInfo: \"Must be cooked to remove stinging properties. Rich in nutrients.\",\n        imageUrl: \"/attached_assets/generated_images/african nettle.jpg\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Warburgia ugandensis\",\n        localName: \"Uganda Greenheart / Muthiga\",\n        emoji: \"🌲\",\n        description: \"Aromatic tree used for respiratory health, fever, and traditional medicine.\",\n        benefits: [\"Respiratory support\", \"Fever reduction\", \"Antimicrobial\", \"Traditional medicine\"],\n        categories: [\"General Wellness\"],\n        preparationMethods: [\"Bark decoction\", \"Leaves tea\", \"Essential oil\", \"Powder\"],\n        safetyInfo: \"Traditional use suggests safety. Use in moderation.\",\n        imageUrl: \"/attached_assets/generated_images/Uganda greenheart 1.jpg\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Euphorbia hirta\",\n        localName: \"Asthma Plant / Mwiba wa pumu\",\n        emoji: \"🌱\",\n        description: \"Small herb traditionally used for respiratory conditions and skin ailments.\",\n        benefits: [\"Respiratory support\", \"Skin health\", \"Traditional medicine\", \"Anti-inflammatory\"],\n        categories: [\"General Wellness\"],\n        preparationMethods: [\"Tea\", \"Fresh plant\", \"Poultice\", \"Extract\"],\n        safetyInfo: \"Traditional use for respiratory conditions. Use with caution.\",\n        imageUrl: \"/attached_assets/generated_images/asthma plant.jpg\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Faurea saligna\",\n        localName: \"African Beech / Msewe\",\n        emoji: \"🌳\",\n        description: \"Tree species used in traditional medicine for various health conditions.\",\n        benefits: [\"Traditional medicine\", \"Anti-inflammatory\", \"Local healing\", \"Cultural significance\"],\n        categories: [\"General Wellness\"],\n        preparationMethods: [\"Bark decoction\", \"Traditional preparation\", \"Local methods\"],\n        safetyInfo: \"Traditional use varies by region. Consult local practitioners.\",\n        imageUrl: \"/attached_assets/generated_images/African beech.jpg\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Myrsine africana\",\n        localName: \"African Boxwood / Muthiga\",\n        emoji: \"🌿\",\n        description: \"Evergreen shrub used for traditional medicine and cultural practices.\",\n        benefits: [\"Traditional medicine\", \"Cultural significance\", \"Local healing\", \"Antimicrobial\"],\n        categories: [\"General Wellness\"],\n        preparationMethods: [\"Traditional methods\", \"Local preparation\", \"Cultural practices\"],\n        safetyInfo: \"Traditional use varies. Consult local practitioners for proper use.\",\n        imageUrl: \"/attached_assets/generated_images/African boxwood.jpg\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Persea americana\",\n        localName: \"Avocado / Mparachichi\",\n        emoji: \"🥑\",\n        description: \"Nutrient-rich fruit tree with leaves and fruit used for health benefits.\",\n        benefits: [\"Heart health\", \"Rich in healthy fats\", \"Skin health\", \"Nutrient dense\"],\n        categories: [\"General Wellness\", \"Weight Balance\"],\n        preparationMethods: [\"Fresh fruit\", \"Leaf tea\", \"Oil extraction\", \"Culinary use\"],\n        safetyInfo: \"Fruit is generally safe. Leaf tea should be used in moderation.\",\n        imageUrl: \"/attached_assets/generated_images/avocado.jpg\",\n        isIndigenous: \"false\",\n        region: \"Global\"\n      },\n      {\n        name: \"Rhamnus species\",\n        localName: \"Buckthorn / Muthiga\",\n        emoji: \"🌿\",\n        description: \"Various species used for digestive health and traditional medicine.\",\n        benefits: [\"Digestive support\", \"Traditional medicine\", \"Local healing\", \"Cultural use\"],\n        categories: [\"General Wellness\"],\n        preparationMethods: [\"Traditional methods\", \"Local preparation\", \"Cultural practices\"],\n        safetyInfo: \"Use varies by species and region. Consult local practitioners.\",\n        imageUrl: \"/attached_assets/generated_images/buckthorn.jpg\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Trimeria grandifolia\",\n        localName: \"Wild Hemp / Mwiba\",\n        emoji: \"🌿\",\n        description: \"Traditional plant used for various medicinal purposes in local communities.\",\n        benefits: [\"Traditional medicine\", \"Local healing\", \"Cultural significance\", \"Community health\"],\n        categories: [\"General Wellness\"],\n        preparationMethods: [\"Traditional methods\", \"Local preparation\", \"Cultural practices\"],\n        safetyInfo: \"Traditional use varies. Consult local practitioners for proper use.\",\n        imageUrl: \"/attached_assets/generated_images/wild hemp.jpg\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      },\n      {\n        name: \"Zanthoxylum usambarense\",\n        localName: \"African Pepper / Mpilipili\",\n        emoji: \"🌶️\",\n        description: \"Aromatic tree used for digestive health, pain relief, and traditional medicine.\",\n        benefits: [\"Digestive support\", \"Pain relief\", \"Antimicrobial\", \"Traditional medicine\"],\n        categories: [\"General Wellness\", \"Mental Health\"],\n        preparationMethods: [\"Bark decoction\", \"Fruit spice\", \"Traditional preparation\", \"Local methods\"],\n        safetyInfo: \"Traditional use suggests safety. Use in moderation.\",\n        imageUrl: \"/attached_assets/generated_images/african pepper.jpg\",\n        isIndigenous: \"true\",\n        region: \"Africa\"\n      }\n    ];\n\n    initialHerbs.forEach(herb => {\n      const id = randomUUID();\n      const herbWithId: Herb = { \n        ...herb, \n        id,\n        localName: herb.localName || null,\n        emoji: herb.emoji || null,\n        safetyInfo: herb.safetyInfo || null,\n        imageUrl: herb.imageUrl || null,\n        region: herb.region || null,\n        isIndigenous: herb.isIndigenous || \"false\"\n      };\n      this.herbs.set(id, herbWithId);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getAllHerbs(): Promise<Herb[]> {\n    return Array.from(this.herbs.values());\n  }\n\n  async getHerb(id: string): Promise<Herb | undefined> {\n    return this.herbs.get(id);\n  }\n\n  async searchHerbs(query: string): Promise<Herb[]> {\n    const lowerQuery = query.toLowerCase();\n    return Array.from(this.herbs.values()).filter(herb =>\n      herb.name.toLowerCase().includes(lowerQuery) ||\n      herb.description.toLowerCase().includes(lowerQuery) ||\n      herb.localName?.toLowerCase().includes(lowerQuery) ||\n      herb.benefits.some(benefit => benefit.toLowerCase().includes(lowerQuery)) ||\n      herb.categories.some(category => category.toLowerCase().includes(lowerQuery))\n    );\n  }\n\n  async getHerbsByCategory(category: string): Promise<Herb[]> {\n    return Array.from(this.herbs.values()).filter(herb =>\n      herb.categories.includes(category)\n    );\n  }\n\n  async createHerb(insertHerb: InsertHerb): Promise<Herb> {\n    const id = randomUUID();\n    const herb: Herb = { \n      ...insertHerb, \n      id,\n      localName: insertHerb.localName || null,\n      emoji: insertHerb.emoji || null,\n      safetyInfo: insertHerb.safetyInfo || null,\n      imageUrl: insertHerb.imageUrl || null,\n      region: insertHerb.region || null,\n      isIndigenous: insertHerb.isIndigenous || \"false\"\n    };\n    this.herbs.set(id, herb);\n    return herb;\n  }\n\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const id = randomUUID();\n    const message: ContactMessage = { \n      ...insertMessage, \n      id, \n      subject: insertMessage.subject || null,\n      createdAt: new Date().toISOString() \n    };\n    this.contactMessages.set(id, message);\n    return message;\n  }\n\n  async getAllContactMessages(): Promise<ContactMessage[]> {\n    return Array.from(this.contactMessages.values());\n  }\n\n  private initializeSamplePosts() {\n    const samplePosts: InsertCommunityPost[] = [\n      {\n        authorName: \"Sarah Johnson\",\n        authorEmail: \"sarah@example.com\",\n        title: \"My Journey with Chamomile for Better Sleep\",\n        content: \"I've been struggling with insomnia for months, and chamomile tea has been a game-changer! I started drinking a cup 30 minutes before bed, and within a week, I noticed a significant improvement in my sleep quality. The gentle, calming effect is exactly what I needed. I also love how it helps with my evening anxiety. Highly recommend for anyone dealing with sleep issues!\",\n        category: \"success-story\",\n        tags: [\"sleep\", \"chamomile\", \"anxiety\", \"insomnia\"],\n        imageUrl: \"/attached_assets/generated_images/Chamomile_flowers_blooming_fcc5a2fb.png\",\n      },\n      {\n        authorName: \"Michael Chen\",\n        authorEmail: \"michael@example.com\",\n        title: \"Ginger Tea: My Natural Energy Boost\",\n        content: \"As someone who works long hours, I was always looking for natural ways to boost my energy without caffeine crashes. Ginger tea has been incredible! I make it fresh every morning with lemon and honey. It gives me sustained energy throughout the day and helps with digestion too. The anti-inflammatory benefits are a bonus - my joints feel better than ever!\",\n        category: \"success-story\",\n        tags: [\"energy\", \"ginger\", \"digestion\", \"anti-inflammatory\"],\n        imageUrl: \"/attached_assets/generated_images/Fresh_ginger_root_pieces_b404e3ce.png\",\n      },\n      {\n        authorName: \"Aisha Patel\",\n        authorEmail: \"aisha@example.com\",\n        title: \"Moringa Powder: My Daily Wellness Ritual\",\n        content: \"I've been taking moringa powder daily for 3 months now, and the results are amazing! My energy levels are consistent throughout the day, my skin looks healthier, and I feel more balanced overall. I mix it into my morning smoothie or just stir it into water. It's become an essential part of my wellness routine. The nutrient density is incredible!\",\n        category: \"journey\",\n        tags: [\"moringa\", \"energy\", \"nutrition\", \"wellness\"],\n        imageUrl: \"/attached_assets/generated_images/Fresh_moringa_plant_leaves_f8771929.png\",\n      },\n      {\n        authorName: \"David Thompson\",\n        authorEmail: \"david@example.com\",\n        title: \"Question: Best Herbs for Stress Management?\",\n        content: \"I'm going through a particularly stressful time at work and looking for natural ways to manage stress. I've heard good things about adaptogenic herbs. What would you recommend for someone new to herbal remedies? I'm interested in something I can easily incorporate into my daily routine.\",\n        category: \"question\",\n        tags: [\"stress\", \"adaptogens\", \"mental-health\", \"beginner\"],\n        imageUrl: undefined,\n      },\n      {\n        authorName: \"Lisa Rodriguez\",\n        authorEmail: \"lisa@example.com\",\n        title: \"Tip: Making the Perfect Herbal Tea\",\n        content: \"Here's my method for making the perfect cup of herbal tea: Use filtered water, bring to a gentle boil, then let it cool for 30 seconds before pouring over herbs. Steep for 5-7 minutes covered to preserve essential oils. Add honey after steeping to preserve its benefits. This method has made my herbal teas so much more effective!\",\n        category: \"tip\",\n        tags: [\"tea\", \"preparation\", \"tips\", \"honey\"],\n        imageUrl: \"/attached_assets/generated_images/Whisk_9cd0867522-min.jpg\",\n      }\n    ];\n\n    samplePosts.forEach(post => {\n      const id = randomUUID();\n      const postWithId: CommunityPost = {\n        ...post,\n        id,\n        likes: \"0\",\n        views: \"0\",\n        isApproved: \"true\",\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        tags: post.tags || [],\n        imageUrl: post.imageUrl || null,\n      };\n      this.communityPosts.set(id, postWithId);\n    });\n\n    // Add sample comments\n    const sampleComments: InsertCommunityComment[] = [\n      {\n        postId: Array.from(this.communityPosts.keys())[0], // First post\n        authorName: \"Emma Wilson\",\n        authorEmail: \"emma@example.com\",\n        content: \"This is so encouraging! I've been having trouble sleeping too. How long did it take before you noticed the full effects?\",\n      },\n      {\n        postId: Array.from(this.communityPosts.keys())[0],\n        authorName: \"Sarah Johnson\",\n        authorEmail: \"sarah@example.com\",\n        content: \"Thanks Emma! It took about 2 weeks for the full effects. I also found that creating a bedtime routine really helped - chamomile tea, reading, and no screens for the last hour before bed.\",\n      },\n      {\n        postId: Array.from(this.communityPosts.keys())[1], // Second post\n        authorName: \"James Brown\",\n        authorEmail: \"james@example.com\",\n        content: \"I love ginger tea too! Have you tried adding turmeric? The combination is amazing for inflammation.\",\n      }\n    ];\n\n    sampleComments.forEach(comment => {\n      const id = randomUUID();\n      const commentWithId: CommunityComment = {\n        ...comment,\n        id,\n        likes: \"0\",\n        isApproved: \"true\",\n        createdAt: new Date().toISOString(),\n      };\n      this.communityComments.set(id, commentWithId);\n    });\n  }\n\n  // Community Post functions\n  async getAllCommunityPosts(): Promise<CommunityPost[]> {\n    return Array.from(this.communityPosts.values())\n      .filter(post => post.isApproved === \"true\")\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getCommunityPost(id: string): Promise<CommunityPost | undefined> {\n    return this.communityPosts.get(id);\n  }\n\n  async createCommunityPost(post: InsertCommunityPost): Promise<CommunityPost> {\n    const id = randomUUID();\n    const newPost: CommunityPost = {\n      ...post,\n      id,\n      likes: \"0\",\n      views: \"0\",\n      isApproved: \"false\", // Requires approval\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      tags: post.tags || [],\n      imageUrl: post.imageUrl || null,\n    };\n    this.communityPosts.set(id, newPost);\n    return newPost;\n  }\n\n  async updateCommunityPost(id: string, updates: Partial<CommunityPost>): Promise<CommunityPost | undefined> {\n    const post = this.communityPosts.get(id);\n    if (!post) return undefined;\n    \n    const updatedPost = { ...post, ...updates, updatedAt: new Date().toISOString() };\n    this.communityPosts.set(id, updatedPost);\n    return updatedPost;\n  }\n\n  async deleteCommunityPost(id: string): Promise<boolean> {\n    return this.communityPosts.delete(id);\n  }\n\n  // Community Comment functions\n  async getCommentsByPostId(postId: string): Promise<CommunityComment[]> {\n    return Array.from(this.communityComments.values())\n      .filter(comment => comment.postId === postId && comment.isApproved === \"true\")\n      .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n  }\n\n  async createCommunityComment(comment: InsertCommunityComment): Promise<CommunityComment> {\n    const id = randomUUID();\n    const newComment: CommunityComment = {\n      ...comment,\n      id,\n      likes: \"0\",\n      isApproved: \"false\", // Requires approval\n      createdAt: new Date().toISOString(),\n    };\n    this.communityComments.set(id, newComment);\n    return newComment;\n  }\n\n  async updateCommunityComment(id: string, updates: Partial<CommunityComment>): Promise<CommunityComment | undefined> {\n    const comment = this.communityComments.get(id);\n    if (!comment) return undefined;\n    \n    const updatedComment = { ...comment, ...updates };\n    this.communityComments.set(id, updatedComment);\n    return updatedComment;\n  }\n\n  async deleteCommunityComment(id: string): Promise<boolean> {\n    return this.communityComments.delete(id);\n  }\n\n  // Like/Unlike functions\n  async likePost(postId: string, userEmail: string): Promise<boolean> {\n    const likeId = `${postId}-${userEmail}`;\n    const existingLike = Array.from(this.communityLikes.values()).find(\n      like => like.postId === postId && like.userEmail === userEmail\n    );\n    \n    if (existingLike) return false; // Already liked\n    \n    const like: CommunityLike = {\n      id: randomUUID(),\n      postId,\n      commentId: null,\n      userEmail,\n      createdAt: new Date().toISOString(),\n    };\n    this.communityLikes.set(like.id, like);\n    \n    // Update post like count\n    const post = this.communityPosts.get(postId);\n    if (post) {\n      const currentLikes = parseInt(post.likes) || 0;\n      post.likes = (currentLikes + 1).toString();\n      this.communityPosts.set(postId, post);\n    }\n    \n    return true;\n  }\n\n  async unlikePost(postId: string, userEmail: string): Promise<boolean> {\n    const like = Array.from(this.communityLikes.values()).find(\n      like => like.postId === postId && like.userEmail === userEmail\n    );\n    \n    if (!like) return false;\n    \n    this.communityLikes.delete(like.id);\n    \n    // Update post like count\n    const post = this.communityPosts.get(postId);\n    if (post) {\n      const currentLikes = parseInt(post.likes) || 0;\n      post.likes = Math.max(0, currentLikes - 1).toString();\n      this.communityPosts.set(postId, post);\n    }\n    \n    return true;\n  }\n\n  async likeComment(commentId: string, userEmail: string): Promise<boolean> {\n    const existingLike = Array.from(this.communityLikes.values()).find(\n      like => like.commentId === commentId && like.userEmail === userEmail\n    );\n    \n    if (existingLike) return false; // Already liked\n    \n    const like: CommunityLike = {\n      id: randomUUID(),\n      postId: null,\n      commentId,\n      userEmail,\n      createdAt: new Date().toISOString(),\n    };\n    this.communityLikes.set(like.id, like);\n    \n    // Update comment like count\n    const comment = this.communityComments.get(commentId);\n    if (comment) {\n      const currentLikes = parseInt(comment.likes) || 0;\n      comment.likes = (currentLikes + 1).toString();\n      this.communityComments.set(commentId, comment);\n    }\n    \n    return true;\n  }\n\n  async unlikeComment(commentId: string, userEmail: string): Promise<boolean> {\n    const like = Array.from(this.communityLikes.values()).find(\n      like => like.commentId === commentId && like.userEmail === userEmail\n    );\n    \n    if (!like) return false;\n    \n    this.communityLikes.delete(like.id);\n    \n    // Update comment like count\n    const comment = this.communityComments.get(commentId);\n    if (comment) {\n      const currentLikes = parseInt(comment.likes) || 0;\n      comment.likes = Math.max(0, currentLikes - 1).toString();\n      this.communityComments.set(commentId, comment);\n    }\n    \n    return true;\n  }\n\n  async hasUserLikedPost(postId: string, userEmail: string): Promise<boolean> {\n    return Array.from(this.communityLikes.values()).some(\n      like => like.postId === postId && like.userEmail === userEmail\n    );\n  }\n\n  async hasUserLikedComment(commentId: string, userEmail: string): Promise<boolean> {\n    return Array.from(this.communityLikes.values()).some(\n      like => like.commentId === commentId && like.userEmail === userEmail\n    );\n  }\n\n  async getAIHerbInfo(query: string): Promise<any> {\n    try {\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      \n      const prompt = `Provide comprehensive information about the herb \"${query}\" in the following JSON format:\n      {\n        \"name\": \"Herb Name\",\n        \"description\": \"Brief description of the herb\",\n        \"benefits\": [\"Benefit 1\", \"Benefit 2\", \"Benefit 3\"],\n        \"usage\": \"How to use this herb\",\n        \"dosage\": \"Recommended dosage information\",\n        \"preparation\": \"How to prepare this herb (tea, tincture, etc.)\",\n        \"interactions\": [\"Drug interaction 1\", \"Drug interaction 2\"],\n        \"warnings\": [\"Warning 1\", \"Warning 2\"],\n        \"category\": \"Wellness category (e.g., Digestive, Immune, Sleep)\"\n      }\n      \n      Focus on traditional uses, scientific evidence, safety, and practical applications. Be accurate and include important warnings.`;\n\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n      \n      // Extract JSON from the response\n      const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n      \n      // Fallback response if JSON parsing fails\n      return {\n        name: query,\n        description: \"Information about this herb\",\n        benefits: [\"Traditional wellness support\"],\n        usage: \"Consult with a healthcare provider\",\n        dosage: \"Follow recommended guidelines\",\n        preparation: \"Various methods available\",\n        interactions: [\"May interact with medications\"],\n        warnings: [\"Consult healthcare provider before use\"],\n        category: \"Wellness\"\n      };\n    } catch (error) {\n      console.error(\"Gemini API error:\", error);\n      // Return fallback response\n      return {\n        name: query,\n        description: \"Unable to fetch information at this time. Please try again later.\",\n        benefits: [\"Traditional wellness support\"],\n        usage: \"Consult with a healthcare provider\",\n        dosage: \"Follow recommended guidelines\",\n        preparation: \"Various methods available\",\n        interactions: [\"May interact with medications\"],\n        warnings: [\"Consult healthcare provider before use\"],\n        category: \"Wellness\"\n      };\n    }\n  }\n\n  async getAIWellnessResponse(message: string): Promise<any> {\n    try {\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      \n      const prompt = `You are a herbal wellness assistant. Answer in BULLET POINTS ONLY.\n\nUser question: \"${message}\"\n\nSTRICT FORMAT REQUIRED:\n• Recommend 1-2 specific herbs\n• How to use (tea, capsules, etc.)\n• Main benefit\n• Safety warning if any\n\nKeep each bullet point to ONE sentence maximum. No paragraphs or long explanations.\n\nExample response:\n• Try chamomile tea for sleep\n• Drink 1 cup before bedtime\n• Helps calm nerves naturally\n• Avoid if allergic to daisies\n\nFormat as JSON:\n{\n  \"response\": \"• Bullet point 1\\n• Bullet point 2\\n• Bullet point 3\\n• Bullet point 4\",\n  \"suggestions\": [\"Quick question 1?\", \"Quick question 2?\", \"Quick question 3?\"]\n}`;\n\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n      \n      // Extract JSON from the response\n      const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n      \n      // Fallback response if JSON parsing fails\n      return {\n        response: \"I'm here to help with your wellness questions. Please consult with a healthcare provider for personalized advice.\",\n        suggestions: [\n          \"What specific symptoms are you experiencing?\",\n          \"Are you currently taking any medications?\",\n          \"What's your primary wellness goal?\"\n        ]\n      };\n    } catch (error) {\n      console.error(\"Gemini API error:\", error);\n      // Return fallback response\n      return {\n        response: \"I'm experiencing technical difficulties right now. Please try again later or consult with a healthcare provider for immediate concerns.\",\n        suggestions: [\n          \"What specific symptoms are you experiencing?\",\n          \"Are you currently taking any medications?\",\n          \"What's your primary wellness goal?\"\n        ]\n      };\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":39853},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config.js\";\nimport { nanoid } from \"nanoid\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: {\n      port: 3001,\n      clientPort: 443,\n    },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2386},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb } from \"drizzle-orm/pg-core\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const herbs = pgTable(\"herbs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  localName: text(\"local_name\"),\n  emoji: text(\"emoji\"),\n  description: text(\"description\").notNull(),\n  benefits: jsonb(\"benefits\").$type<string[]>().notNull(),\n  categories: jsonb(\"categories\").$type<string[]>().notNull(),\n  preparationMethods: jsonb(\"preparation_methods\").$type<string[]>().notNull(),\n  safetyInfo: text(\"safety_info\"),\n  imageUrl: text(\"image_url\"),\n  isIndigenous: text(\"is_indigenous\").notNull().default(\"false\"),\n  region: text(\"region\"),\n});\n\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  subject: text(\"subject\"),\n  message: text(\"message\").notNull(),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const communityPosts = pgTable(\"community_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  authorName: text(\"author_name\").notNull(),\n  authorEmail: text(\"author_email\").notNull(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  category: text(\"category\").notNull(), // 'success-story', 'journey', 'question', 'tip'\n  tags: jsonb(\"tags\").$type<string[]>().notNull().default([]),\n  imageUrl: text(\"image_url\"),\n  likes: text(\"likes\").notNull().default(\"0\"),\n  views: text(\"views\").notNull().default(\"0\"),\n  isApproved: text(\"is_approved\").notNull().default(\"false\"),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: text(\"updated_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const communityComments = pgTable(\"community_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").references(() => communityPosts.id).notNull(),\n  authorName: text(\"author_name\").notNull(),\n  authorEmail: text(\"author_email\").notNull(),\n  content: text(\"content\").notNull(),\n  likes: text(\"likes\").notNull().default(\"0\"),\n  isApproved: text(\"is_approved\").notNull().default(\"false\"),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const communityLikes = pgTable(\"community_likes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").references(() => communityPosts.id),\n  commentId: varchar(\"comment_id\").references(() => communityComments.id),\n  userEmail: text(\"user_email\").notNull(),\n  createdAt: text(\"created_at\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\n// Manual Zod schemas to replace drizzle-zod functionality\nexport const insertUserSchema = z.object({\n  username: z.string(),\n  password: z.string(),\n});\n\nexport const insertHerbSchema = z.object({\n  name: z.string(),\n  localName: z.string().optional(),\n  emoji: z.string().optional(),\n  description: z.string(),\n  benefits: z.array(z.string()),\n  categories: z.array(z.string()),\n  preparationMethods: z.array(z.string()),\n  safetyInfo: z.string().optional(),\n  imageUrl: z.string().optional(),\n  isIndigenous: z.string().default(\"false\"),\n  region: z.string().optional(),\n});\n\nexport const insertContactMessageSchema = z.object({\n  name: z.string(),\n  email: z.string().email(),\n  subject: z.string().optional(),\n  message: z.string(),\n});\n\nexport const insertCommunityPostSchema = z.object({\n  authorName: z.string(),\n  authorEmail: z.string().email(),\n  title: z.string(),\n  content: z.string(),\n  category: z.string(),\n  tags: z.array(z.string()).default([]),\n  imageUrl: z.string().optional(),\n});\n\nexport const insertCommunityCommentSchema = z.object({\n  postId: z.string(),\n  authorName: z.string(),\n  authorEmail: z.string().email(),\n  content: z.string(),\n});\n\nexport const insertCommunityLikeSchema = z.object({\n  postId: z.string().optional(),\n  commentId: z.string().optional(),\n  userEmail: z.string().email(),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Herb = typeof herbs.$inferSelect;\nexport type InsertHerb = z.infer<typeof insertHerbSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type CommunityPost = typeof communityPosts.$inferSelect;\nexport type InsertCommunityPost = z.infer<typeof insertCommunityPostSchema>;\nexport type CommunityComment = typeof communityComments.$inferSelect;\nexport type InsertCommunityComment = z.infer<typeof insertCommunityCommentSchema>;\nexport type CommunityLike = typeof communityLikes.$inferSelect;\nexport type InsertCommunityLike = z.infer<typeof insertCommunityLikeSchema>;\n","size_bytes":5093},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Navigation from \"@/components/layout/navigation\";\nimport Footer from \"@/components/layout/footer\";\nimport FloatingAIAssistant from \"@/components/ui/floating-ai-assistant\";\nimport Home from \"@/pages/home\";\nimport Herbs from \"@/pages/herbs\";\nimport Wellbeing from \"@/pages/wellbeing\";\nimport MentalHealth from \"@/pages/mental-health\";\nimport Energy from \"@/pages/energy\";\nimport Sleep from \"@/pages/sleep\";\nimport WeightBalance from \"@/pages/weight-balance\";\nimport GeneralWellness from \"@/pages/general-wellness\";\nimport Ailments from \"@/pages/ailments\";\nimport Videos from \"@/pages/videos\";\nimport Community from \"@/pages/community\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\nimport SafetyGuidelines from \"@/pages/safety-guidelines\";\nimport PrivacyPolicy from \"@/pages/privacy-policy\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navigation />\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/herbs\" component={Herbs} />\n          <Route path=\"/wellbeing\" component={Wellbeing} />\n          <Route path=\"/mental-health\" component={MentalHealth} />\n          <Route path=\"/energy\" component={Energy} />\n          <Route path=\"/sleep\" component={Sleep} />\n          <Route path=\"/weight-balance\" component={WeightBalance} />\n          <Route path=\"/general-wellness\" component={GeneralWellness} />\n          <Route path=\"/ailments\" component={Ailments} />\n          <Route path=\"/videos\" component={Videos} />\n          <Route path=\"/community\" component={Community} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/safety-guidelines\" component={SafetyGuidelines} />\n          <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n      <FloatingAIAssistant />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2532},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(40, 30%, 95%);\n  --foreground: hsl(25, 25%, 20%);\n  --card: hsl(40, 40%, 98%);\n  --card-foreground: hsl(25, 25%, 20%);\n  --popover: hsl(40, 40%, 98%);\n  --popover-foreground: hsl(25, 25%, 20%);\n  --primary: hsl(95, 40%, 35%);\n  --primary-foreground: hsl(40, 40%, 98%);\n  --secondary: hsl(35, 35%, 82%);\n  --secondary-foreground: hsl(25, 25%, 20%);\n  --muted: hsl(40, 25%, 90%);\n  --muted-foreground: hsl(25, 20%, 45%);\n  --accent: hsl(25, 45%, 70%);\n  --accent-foreground: hsl(25, 25%, 20%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(35, 30%, 80%);\n  --input: hsl(40, 40%, 98%);\n  --ring: hsl(95, 40%, 35%);\n  --chart-1: hsl(95, 40%, 35%);\n  --chart-2: hsl(25, 45%, 70%);\n  --chart-3: hsl(35, 35%, 82%);\n  --chart-4: hsl(25, 20%, 45%);\n  --chart-5: hsl(40, 30%, 95%);\n  --sidebar: hsl(40, 40%, 98%);\n  --sidebar-foreground: hsl(25, 25%, 20%);\n  --sidebar-primary: hsl(95, 40%, 35%);\n  --sidebar-primary-foreground: hsl(40, 40%, 98%);\n  --sidebar-accent: hsl(25, 45%, 70%);\n  --sidebar-accent-foreground: hsl(25, 25%, 20%);\n  --sidebar-border: hsl(35, 30%, 80%);\n  --sidebar-ring: hsl(95, 40%, 35%);\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(140, 30%, 45% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(140, 30%, 45% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(140, 30%, 45% / 0.00), 0px 1px 2px -1px hsl(140, 30%, 45% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(140, 30%, 45% / 0.00), 0px 1px 2px -1px hsl(140, 30%, 45% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(140, 30%, 45% / 0.00), 0px 2px 4px -1px hsl(140, 30%, 45% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(140, 30%, 45% / 0.00), 0px 4px 6px -1px hsl(140, 30%, 45% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(140, 30%, 45% / 0.00), 0px 8px 10px -1px hsl(140, 30%, 45% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(140, 30%, 45% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(25, 15%, 12%);\n  --foreground: hsl(40, 25%, 85%);\n  --card: hsl(25, 20%, 15%);\n  --card-foreground: hsl(40, 25%, 85%);\n  --popover: hsl(25, 20%, 15%);\n  --popover-foreground: hsl(40, 25%, 85%);\n  --primary: hsl(95, 35%, 45%);\n  --primary-foreground: hsl(25, 15%, 12%);\n  --secondary: hsl(35, 25%, 25%);\n  --secondary-foreground: hsl(40, 25%, 85%);\n  --muted: hsl(25, 15%, 20%);\n  --muted-foreground: hsl(40, 20%, 60%);\n  --accent: hsl(25, 35%, 40%);\n  --accent-foreground: hsl(40, 25%, 85%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(25, 20%, 25%);\n  --input: hsl(25, 20%, 15%);\n  --ring: hsl(95, 35%, 45%);\n  --chart-1: hsl(95, 35%, 45%);\n  --chart-2: hsl(25, 35%, 40%);\n  --chart-3: hsl(35, 25%, 25%);\n  --chart-4: hsl(40, 20%, 60%);\n  --chart-5: hsl(25, 15%, 12%);\n  --sidebar: hsl(25, 20%, 15%);\n  --sidebar-foreground: hsl(40, 25%, 85%);\n  --sidebar-primary: hsl(95, 35%, 45%);\n  --sidebar-primary-foreground: hsl(25, 15%, 12%);\n  --sidebar-accent: hsl(25, 35%, 40%);\n  --sidebar-accent-foreground: hsl(40, 25%, 85%);\n  --sidebar-border: hsl(25, 20%, 25%);\n  --sidebar-ring: hsl(95, 35%, 45%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    line-height: 1.6;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n  }\n}\n\n@layer components {\n  .herb-card {\n    @apply transition-transform duration-200 ease-in-out;\n  }\n\n  .herb-card:hover {\n    @apply transform -translate-y-1 shadow-lg;\n  }\n\n  .nav-link {\n    @apply transition-colors duration-200 ease-in-out;\n  }\n\n  .nav-link:hover {\n    @apply text-primary;\n  }\n\n  .nav-link.active {\n    @apply text-primary font-medium;\n  }\n}\n","size_bytes":4039},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/data/herbs.ts":{"content":"// This file contains herb data used for featured herb rotation and other components\n// The actual data is served from the backend via API\n\nexport const featuredHerbNames = [\n  \"Ginger\",\n  \"Chamomile\", \n  \"Peppermint\",\n  \"Hibiscus\",\n  \"Neem\",\n  \"Moringa\"\n];\n\nexport const herbCategories = [\n  \"Mental Health\",\n  \"Energy\", \n  \"Sleep\",\n  \"Weight Balance\",\n  \"General Wellness\"\n];\n\nexport const preparationMethods = [\n  \"Tea\",\n  \"Infusion\",\n  \"Decoction\", \n  \"Poultice\",\n  \"Capsules\",\n  \"Powder\",\n  \"Fresh leaves\",\n  \"Essential oil\",\n  \"Tincture\",\n  \"Extract\"\n];\n","size_bytes":560},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Leaf, GraduationCap, Shield } from \"lucide-react\";\n\nexport default function About() {\n  const values = [\n    {\n      icon: Leaf,\n      title: \"Natural Approach\",\n      description: \"We focus on gentle, natural solutions that work with your body's healing processes.\",\n      color: \"text-primary bg-primary/10\"\n    },\n    {\n      icon: GraduationCap,\n      title: \"Education First\",\n      description: \"We provide comprehensive education so you can make informed decisions about your wellness.\",\n      color: \"text-accent bg-accent/10\"\n    },\n    {\n      icon: Shield,\n      title: \"Safety Priority\",\n      description: \"Safety information and proper guidance are included with every recommendation.\",\n      color: \"text-secondary bg-secondary/10\"\n    }\n  ];\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-4xl font-bold text-center mb-12\" data-testid=\"text-page-title\">\n          About Herbal Care Hub\n        </h1>\n        \n        {/* Mission Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center mb-16\">\n          <div>\n            <h2 className=\"text-3xl font-bold mb-6 text-primary\" data-testid=\"text-mission-title\">\n              Our Mission\n            </h2>\n            <p className=\"text-lg text-muted-foreground mb-6\">\n              To make herbal knowledge simple, safe, and accessible for everyone. We believe that nature has provided us with incredible healing resources, and our goal is to help you discover and use them safely.\n            </p>\n            <p className=\"text-muted-foreground\">\n              At Herbal Care Hub, we bridge the gap between traditional wisdom and modern wellness needs, providing education and guidance for natural health solutions.\n            </p>\n          </div>\n          <div>\n            <img \n              src=\"/attached_assets/generated_images/Family_enjoying_herbal_tea_747c1dae.png\" \n              alt=\"Family enjoying herbal tea together\" \n              className=\"rounded-xl w-full h-64 object-cover\"\n            />\n          </div>\n        </div>\n\n        {/* Story Section */}\n        <Card className=\"p-8 shadow-lg border border-border mb-16\">\n          <CardContent className=\"p-0\">\n            <h2 className=\"text-3xl font-bold mb-6 text-center text-accent\" data-testid=\"text-story-title\">\n              Our Story\n            </h2>\n            <p className=\"text-lg text-muted-foreground text-center mb-6 italic\">\n              \"We believe herbs are a gift for health, balance, and vitality.\"\n            </p>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                Herbal Care Hub was born from a deep appreciation for the wisdom of traditional healers and the growing need for accessible, reliable information about natural wellness. We recognize that many people are seeking alternatives to support their health journey, but often lack reliable guidance.\n              </p>\n              <p>\n                Our team combines respect for traditional knowledge with modern research to provide you with safe, practical information about herbs and natural wellness. We focus particularly on African indigenous herbs, which have been used for generations but are often overlooked in modern wellness conversations.\n              </p>\n              <p>\n                Every herb we feature has been carefully researched for safety and traditional uses. We believe that when used responsibly and with proper knowledge, herbs can be powerful allies in maintaining health and vitality.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Values Section */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          {values.map((value, index) => {\n            const IconComponent = value.icon;\n            \n            return (\n              <div key={index} className=\"text-center\" data-testid={`value-${index}`}>\n                <div className={`w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 ${value.color}`}>\n                  <IconComponent className=\"h-8 w-8\" />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">{value.title}</h3>\n                <p className=\"text-muted-foreground text-sm\">{value.description}</p>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Disclaimer */}\n        <div className=\"bg-yellow-50 border border-yellow-200 p-6 rounded-lg text-center\">\n          <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"text-disclaimer-title\">\n            Important Disclaimer\n          </h3>\n          <p className=\"text-sm text-yellow-800\">\n            The information provided on Herbal Care Hub is for educational purposes only and is not intended to replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare providers before making changes to your health routine, especially if you have existing health conditions or take medications.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5182},"client/src/pages/ailments.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AlertTriangle, Info, Heart, Droplet, Brain, Leaf, BookOpen, Lightbulb, Utensils } from \"lucide-react\";\n\nexport default function Ailments() {\n  const [selectedAilment, setSelectedAilment] = useState<string | null>(null);\n  const detailsRef = useRef<HTMLDivElement>(null);\n\n  const ailments = [\n    {\n      id: \"diabetes\",\n      icon: Droplet,\n      title: \"Diabetes\",\n      subtitle: \"Blood Sugar Management\",\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-50\",\n      borderColor: \"border-blue-200\",\n      definition: \"Diabetes is a chronic health condition where the body either doesn't produce enough insulin or can't effectively use the insulin it produces, leading to elevated blood sugar levels.\",\n      types: [\n        {\n          name: \"Type 1 Diabetes\",\n          description: \"Autoimmune condition where the body attacks insulin-producing cells in the pancreas\"\n        },\n        {\n          name: \"Type 2 Diabetes\", \n          description: \"Most common type where the body becomes resistant to insulin or doesn't produce enough\"\n        },\n        {\n          name: \"Gestational Diabetes\",\n          description: \"Develops during pregnancy and usually resolves after childbirth\"\n        }\n      ],\n      symptoms: [\n        \"Increased thirst and frequent urination\",\n        \"Unexplained weight loss\",\n        \"Fatigue and irritability\",\n        \"Blurred vision\",\n        \"Slow-healing wounds\",\n        \"Tingling or numbness in hands/feet\"\n      ],\n      riskFactors: [\n        \"Family history of diabetes\",\n        \"Obesity or overweight\",\n        \"Physical inactivity\",\n        \"Poor diet high in processed foods\",\n        \"Age (risk increases with age)\",\n        \"Ethnic background (higher risk in certain populations)\"\n      ],\n      herbs: [\n        {\n          name: \"Neem (Muarubaini)\",\n          scientificName: \"Azadirachta indica\",\n          description: \"Traditional herb used for blood sugar management. Contains compounds that may help improve insulin sensitivity.\",\n          preparation: \"Tea, powder, or capsules\",\n          dosage: \"Start with 1/4 tsp powder or 1 cup tea daily\",\n          research: \"Studies suggest neem may help lower blood sugar levels and improve glucose tolerance.\"\n        },\n        {\n          name: \"Moringa\",\n          scientificName: \"Moringa oleifera\",\n          description: \"Nutrient-dense leaves rich in antioxidants and compounds that may support healthy blood sugar levels.\",\n          preparation: \"Fresh leaves, powder, or tea\",\n          dosage: \"1/2 to 1 tsp powder daily in smoothies or water\",\n          research: \"Contains chlorogenic acid which may help regulate blood sugar absorption.\"\n        },\n        {\n          name: \"Hibiscus\",\n          scientificName: \"Hibiscus sabdariffa\", \n          description: \"Antioxidant-rich flower that may help with glucose metabolism and overall metabolic health.\",\n          preparation: \"Tea, cold brew, or extract\",\n          dosage: \"1-2 cups of tea daily\",\n          research: \"Rich in polyphenols that may help improve insulin sensitivity.\"\n        }\n      ],\n      lifestyleTips: [\n        \"Monitor blood sugar levels regularly\",\n        \"Follow a balanced, low-glycemic diet\",\n        \"Exercise regularly (150 minutes/week)\",\n        \"Maintain a healthy weight\",\n        \"Get adequate sleep (7-9 hours)\",\n        \"Manage stress through meditation or yoga\"\n      ],\n      warning: {\n        type: \"yellow\",\n        text: \"Monitor blood sugar levels closely and consult your healthcare provider before using herbs alongside diabetes medications. Herbs may interact with prescription drugs.\"\n      }\n    },\n    {\n      id: \"hypertension\",\n      icon: Heart,\n      title: \"High Blood Pressure\",\n      subtitle: \"Hypertension Management\",\n      color: \"text-red-600\",\n      bgColor: \"bg-red-50\",\n      borderColor: \"border-red-200\",\n      definition: \"Hypertension is a condition where the force of blood against artery walls is consistently too high, putting extra strain on the heart and blood vessels.\",\n      types: [\n        {\n          name: \"Primary Hypertension\",\n          description: \"Most common type with no identifiable cause, develops gradually over years\"\n        },\n        {\n          name: \"Secondary Hypertension\",\n          description: \"Caused by an underlying condition like kidney disease or hormonal disorders\"\n        }\n      ],\n      symptoms: [\n        \"Often called the 'silent killer' - may have no symptoms\",\n        \"Headaches (especially in the morning)\",\n        \"Shortness of breath\",\n        \"Nosebleeds\",\n        \"Chest pain\",\n        \"Dizziness or lightheadedness\",\n        \"Vision problems\"\n      ],\n      riskFactors: [\n        \"Age (risk increases with age)\",\n        \"Family history\",\n        \"Obesity or overweight\",\n        \"Physical inactivity\",\n        \"High salt intake\",\n        \"Excessive alcohol consumption\",\n        \"Stress and anxiety\",\n        \"Smoking\"\n      ],\n      herbs: [\n        {\n          name: \"Hibiscus\",\n          scientificName: \"Hibiscus sabdariffa\",\n          description: \"Studies suggest hibiscus tea may help lower blood pressure through its diuretic and vasodilating properties.\",\n          preparation: \"Tea, cold brew, or extract\",\n          dosage: \"2-3 cups of tea daily\",\n          research: \"Clinical studies show hibiscus may reduce systolic and diastolic blood pressure.\"\n        },\n        {\n          name: \"Garlic\",\n          scientificName: \"Allium sativum\",\n          description: \"Traditional cardiovascular herb that may help relax blood vessels and improve circulation.\",\n          preparation: \"Fresh cloves, powder, or aged extract\",\n          dosage: \"1-2 cloves daily or 600-1200mg extract\",\n          research: \"Contains allicin which may help lower blood pressure and improve arterial health.\"\n        },\n        {\n          name: \"African Basil\",\n          scientificName: \"Ocimum gratissimum\",\n          description: \"Stress-reducing herb that may help lower blood pressure through its calming effects.\",\n          preparation: \"Tea, fresh leaves, or essential oil\",\n          dosage: \"1-2 cups of tea daily\",\n          research: \"May help reduce stress hormones that contribute to elevated blood pressure.\"\n        }\n      ],\n      lifestyleTips: [\n        \"Reduce sodium intake (aim for <2,300mg daily)\",\n        \"Follow the DASH diet (Dietary Approaches to Stop Hypertension)\",\n        \"Exercise regularly (30 minutes most days)\",\n        \"Limit alcohol consumption\",\n        \"Quit smoking\",\n        \"Practice stress management techniques\",\n        \"Maintain a healthy weight\"\n      ],\n      warning: {\n        type: \"red\",\n        text: \"Do not discontinue prescribed blood pressure medications. Work with your doctor when adding herbs to your routine. Monitor blood pressure regularly.\"\n      }\n    },\n    {\n      id: \"arthritis\",\n      icon: Heart,\n      title: \"Arthritis\",\n      subtitle: \"Joint Health Support\",\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\",\n      borderColor: \"border-green-200\",\n      definition: \"Arthritis is inflammation of one or more joints, causing pain, stiffness, and reduced range of motion. There are over 100 different types of arthritis.\",\n      types: [\n        {\n          name: \"Osteoarthritis\",\n          description: \"Most common type, caused by wear and tear of joint cartilage\"\n        },\n        {\n          name: \"Rheumatoid Arthritis\",\n          description: \"Autoimmune condition where the immune system attacks joint tissues\"\n        },\n        {\n          name: \"Gout\",\n          description: \"Caused by uric acid crystal buildup in joints\"\n        }\n      ],\n      symptoms: [\n        \"Joint pain and stiffness\",\n        \"Swelling and tenderness\",\n        \"Reduced range of motion\",\n        \"Warmth and redness around joints\",\n        \"Fatigue and weakness\",\n        \"Morning stiffness lasting >30 minutes\"\n      ],\n      riskFactors: [\n        \"Age (risk increases with age)\",\n        \"Family history\",\n        \"Previous joint injury\",\n        \"Obesity (puts extra stress on joints)\",\n        \"Repetitive joint movements\",\n        \"Autoimmune conditions\"\n      ],\n      herbs: [\n        {\n          name: \"Ginger\",\n          scientificName: \"Zingiber officinale\",\n          description: \"Powerful anti-inflammatory herb that may help reduce joint pain and inflammation.\",\n          preparation: \"Fresh root, tea, powder, or extract\",\n          dosage: \"1-2 inches fresh ginger daily or 1-2 cups tea\",\n          research: \"Contains gingerols and shogaols with potent anti-inflammatory properties.\"\n        },\n        {\n          name: \"Turmeric\",\n          scientificName: \"Curcuma longa\",\n          description: \"Golden spice containing curcumin, a powerful anti-inflammatory compound.\",\n          preparation: \"Fresh root, powder, or extract\",\n          dosage: \"1/2-1 tsp powder daily with black pepper\",\n          research: \"Curcumin may help reduce inflammation and joint pain comparable to some medications.\"\n        },\n        {\n          name: \"Moringa\",\n          scientificName: \"Moringa oleifera\",\n          description: \"Nutrient-rich herb that supports overall joint and bone health.\",\n          preparation: \"Fresh leaves, powder, or tea\",\n          dosage: \"1/2-1 tsp powder daily\",\n          research: \"Rich in calcium, magnesium, and anti-inflammatory compounds.\"\n        }\n      ],\n      lifestyleTips: [\n        \"Low-impact exercise (swimming, walking, yoga)\",\n        \"Maintain a healthy weight\",\n        \"Use hot/cold therapy for pain relief\",\n        \"Practice gentle stretching daily\",\n        \"Eat anti-inflammatory foods\",\n        \"Get adequate rest and sleep\",\n        \"Consider physical therapy\"\n      ],\n      warning: {\n        type: \"blue\",\n        text: \"Combine herbs with gentle exercise, heat therapy, and a balanced diet for best results. Consult healthcare provider for severe or worsening symptoms.\"\n      }\n    },\n    {\n      id: \"digestive\",\n      icon: Utensils,\n      title: \"Digestive Health\",\n      subtitle: \"Gut Wellness Support\",\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\",\n      borderColor: \"border-orange-200\",\n      definition: \"Digestive health encompasses the proper functioning of the gastrointestinal system, including digestion, absorption, and elimination of food.\",\n      types: [\n        {\n          name: \"Irritable Bowel Syndrome (IBS)\",\n          description: \"Functional disorder affecting the large intestine\"\n        },\n        {\n          name: \"Acid Reflux/GERD\",\n          description: \"Stomach acid flows back into the esophagus\"\n        },\n        {\n          name: \"Constipation\",\n          description: \"Infrequent or difficult bowel movements\"\n        }\n      ],\n      symptoms: [\n        \"Abdominal pain and cramping\",\n        \"Bloating and gas\",\n        \"Nausea and vomiting\",\n        \"Heartburn and acid reflux\",\n        \"Diarrhea or constipation\",\n        \"Loss of appetite\",\n        \"Fatigue\"\n      ],\n      riskFactors: [\n        \"Poor diet (high in processed foods)\",\n        \"Stress and anxiety\",\n        \"Lack of physical activity\",\n        \"Dehydration\",\n        \"Food intolerances\",\n        \"Medication side effects\"\n      ],\n      herbs: [\n        {\n          name: \"Peppermint\",\n          scientificName: \"Mentha piperita\",\n          description: \"Soothing herb that may help relax digestive muscles and reduce bloating.\",\n          preparation: \"Tea, essential oil, or capsules\",\n          dosage: \"1-2 cups of tea daily\",\n          research: \"May help relieve IBS symptoms and reduce abdominal pain.\"\n        },\n        {\n          name: \"Ginger\",\n          scientificName: \"Zingiber officinale\",\n          description: \"Traditional digestive aid that may help with nausea and improve digestion.\",\n          preparation: \"Fresh root, tea, or powder\",\n          dosage: \"1-2 inches fresh ginger daily\",\n          research: \"May help reduce nausea, improve gastric emptying, and reduce inflammation.\"\n        },\n        {\n          name: \"Chamomile\",\n          scientificName: \"Matricaria chamomilla\",\n          description: \"Gentle herb that may help soothe digestive discomfort and reduce inflammation.\",\n          preparation: \"Tea or extract\",\n          dosage: \"1-2 cups of tea daily\",\n          research: \"May help reduce stomach acid and soothe irritated digestive tissues.\"\n        }\n      ],\n      lifestyleTips: [\n        \"Eat slowly and chew thoroughly\",\n        \"Stay hydrated (8-10 glasses water daily)\",\n        \"Include fiber-rich foods\",\n        \"Manage stress through relaxation techniques\",\n        \"Exercise regularly\",\n        \"Avoid trigger foods\",\n        \"Eat smaller, more frequent meals\"\n      ],\n      warning: {\n        type: \"green\",\n        text: \"Start with small amounts of herbs and gradually increase. Keep a food diary to identify triggers.\"\n      }\n    }\n  ];\n\n  const getWarningColor = (type: string) => {\n    switch (type) {\n      case \"yellow\": return \"bg-yellow-50 border-yellow-200 text-yellow-800\";\n      case \"red\": return \"bg-red-50 border-red-200 text-red-800\";\n      case \"blue\": return \"bg-blue-50 border-blue-200 text-blue-800\";\n      case \"green\": return \"bg-green-50 border-green-200 text-green-800\";\n      default: return \"bg-gray-50 border-gray-200 text-gray-800\";\n    }\n  };\n\n  // Handle scrolling when an ailment is selected\n  useEffect(() => {\n    if (selectedAilment && detailsRef.current) {\n      // Use requestAnimationFrame to ensure DOM has updated\n      const scrollToDetails = () => {\n        if (detailsRef.current) {\n          const yOffset = -20; // Small offset from top\n          const y = detailsRef.current.getBoundingClientRect().top + window.pageYOffset + yOffset;\n          \n          window.scrollTo({\n            top: y,\n            behavior: 'smooth'\n          });\n        }\n      };\n      \n      // Use multiple timing strategies to ensure it works\n      requestAnimationFrame(() => {\n        requestAnimationFrame(scrollToDetails);\n      });\n      \n      // Fallback timeout\n      setTimeout(scrollToDetails, 100);\n    }\n  }, [selectedAilment]);\n\n  const handleAilmentClick = (ailmentId: string) => {\n    const newSelectedAilment = selectedAilment === ailmentId ? null : ailmentId;\n    setSelectedAilment(newSelectedAilment);\n  };\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"text-page-title\">\n            Common Health Conditions\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n            Educational information about common health conditions and natural herbal support. \n            Always consult healthcare providers for proper diagnosis and treatment.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12\">\n          {ailments.map((ailment) => {\n            const IconComponent = ailment.icon;\n            \n            return (\n              <Card \n                key={ailment.id} \n                className={`p-6 shadow-lg border-2 cursor-pointer transition-all hover:shadow-xl ${ailment.borderColor} ${selectedAilment === ailment.id ? 'ring-2 ring-primary' : ''}`}\n                onClick={() => handleAilmentClick(ailment.id)}\n                data-testid={`card-ailment-${ailment.id}`}\n              >\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className={`p-3 rounded-full ${ailment.bgColor}`}>\n                      <IconComponent className={`h-6 w-6 ${ailment.color}`} />\n                    </div>\n                    <div>\n                      <CardTitle className={`text-xl font-bold ${ailment.color}`}>\n                        {ailment.title}\n                      </CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">{ailment.subtitle}</p>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <p className=\"text-muted-foreground text-sm mb-4\">\n                    {ailment.definition}\n                  </p>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {ailment.herbs.length} Herbs\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      Natural Support\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {selectedAilment && (\n          <div ref={detailsRef} data-details-section=\"true\" className=\"mt-12\">\n            {ailments.filter(ailment => ailment.id === selectedAilment).map((ailment) => {\n              const IconComponent = ailment.icon;\n              \n              return (\n                <Card key={ailment.id} className={`p-8 shadow-lg border-2 ${ailment.borderColor}`}>\n                  <CardHeader className=\"pb-6\">\n                    <div className=\"flex items-center gap-4 mb-4\">\n                      <div className={`p-4 rounded-full ${ailment.bgColor}`}>\n                        <IconComponent className={`h-8 w-8 ${ailment.color}`} />\n                      </div>\n                      <div>\n                        <h2 className={`text-3xl font-bold ${ailment.color}`}>\n                          {ailment.title}\n                        </h2>\n                        <p className=\"text-lg text-muted-foreground\">{ailment.subtitle}</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n\n                  <CardContent className=\"space-y-8\">\n                    <Tabs defaultValue=\"overview\" className=\"w-full\">\n                      <TabsList className=\"grid w-full grid-cols-5\">\n                        <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                        <TabsTrigger value=\"symptoms\">Symptoms</TabsTrigger>\n                        <TabsTrigger value=\"herbs\">Herbal Support</TabsTrigger>\n                        <TabsTrigger value=\"lifestyle\">Lifestyle</TabsTrigger>\n                        <TabsTrigger value=\"safety\">Safety</TabsTrigger>\n                      </TabsList>\n\n                      <TabsContent value=\"overview\" className=\"space-y-6\">\n                        <div>\n                          <h3 className=\"text-xl font-semibold mb-3 flex items-center gap-2\">\n                            <BookOpen className=\"h-5 w-5\" />\n                            Definition & Types\n                          </h3>\n                          <p className=\"text-muted-foreground mb-4\">{ailment.definition}</p>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            {ailment.types.map((type, index) => (\n                              <div key={index} className=\"bg-muted p-4 rounded-lg\">\n                                <h4 className=\"font-semibold mb-2\">{type.name}</h4>\n                                <p className=\"text-sm text-muted-foreground\">{type.description}</p>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n\n                        <div>\n                          <h3 className=\"text-xl font-semibold mb-3 flex items-center gap-2\">\n                            <AlertTriangle className=\"h-5 w-5\" />\n                            Risk Factors\n                          </h3>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                            {ailment.riskFactors.map((factor, index) => (\n                              <div key={index} className=\"flex items-center gap-2\">\n                                <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                                <span className=\"text-sm\">{factor}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </TabsContent>\n\n                      <TabsContent value=\"symptoms\" className=\"space-y-6\">\n                        <div>\n                          <h3 className=\"text-xl font-semibold mb-4\">Common Symptoms</h3>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                            {ailment.symptoms.map((symptom, index) => (\n                              <div key={index} className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                                <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n                                <span className=\"text-sm\">{symptom}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </TabsContent>\n\n                      <TabsContent value=\"herbs\" className=\"space-y-6\">\n                        <div>\n                          <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n                            <Leaf className=\"h-5 w-5\" />\n                            Herbal Support\n                          </h3>\n                          <div className=\"space-y-6\">\n                            {ailment.herbs.map((herb, index) => (\n                              <Card key={index} className=\"p-6\">\n                                <CardHeader className=\"pb-4\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <div>\n                                      <h4 className=\"text-lg font-semibold\">{herb.name}</h4>\n                                      <p className=\"text-sm text-muted-foreground italic\">{herb.scientificName}</p>\n                                    </div>\n                                    <Badge variant=\"outline\">Herbal Support</Badge>\n                                  </div>\n                                </CardHeader>\n                                <CardContent className=\"space-y-4\">\n                                  <p className=\"text-muted-foreground\">{herb.description}</p>\n                                  \n                                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                    <div>\n                                      <h5 className=\"font-semibold mb-2\">Preparation & Dosage</h5>\n                                      <p className=\"text-sm text-muted-foreground mb-2\"><strong>How to use:</strong> {herb.preparation}</p>\n                                      <p className=\"text-sm text-muted-foreground\"><strong>Dosage:</strong> {herb.dosage}</p>\n                                    </div>\n                                    <div>\n                                      <h5 className=\"font-semibold mb-2\">Research Notes</h5>\n                                      <p className=\"text-sm text-muted-foreground\">{herb.research}</p>\n                                    </div>\n                                  </div>\n                                </CardContent>\n                              </Card>\n                            ))}\n                          </div>\n                        </div>\n                      </TabsContent>\n\n                      <TabsContent value=\"lifestyle\" className=\"space-y-6\">\n                        <div>\n                          <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n                            <Lightbulb className=\"h-5 w-5\" />\n                            Lifestyle Recommendations\n                          </h3>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                            {ailment.lifestyleTips.map((tip, index) => (\n                              <div key={index} className=\"flex items-start gap-3 p-4 bg-muted rounded-lg\">\n                                <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                                <span className=\"text-sm\">{tip}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </TabsContent>\n\n                      <TabsContent value=\"safety\" className=\"space-y-6\">\n                        <div>\n                          <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n                            <Info className=\"h-5 w-5\" />\n                            Important Safety Information\n                          </h3>\n                          <div className={`p-6 rounded-lg border ${getWarningColor(ailment.warning.type)}`}>\n                            <p className=\"font-semibold mb-2\">\n                              {ailment.warning.type === \"yellow\" && \"⚠️ Important:\"}\n                              {ailment.warning.type === \"red\" && \"🚨 Caution:\"}\n                              {ailment.warning.type === \"blue\" && \"💡 Tip:\"}\n                              {ailment.warning.type === \"green\" && \"✅ Note:\"}\n                            </p>\n                            <p>{ailment.warning.text}</p>\n                          </div>\n                          \n                          <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                            <h4 className=\"font-semibold text-blue-800 mb-2\">When to Seek Medical Attention</h4>\n                            <ul className=\"text-sm text-blue-700 space-y-1\">\n                              <li>• Severe or worsening symptoms</li>\n                              <li>• New or unusual symptoms</li>\n                              <li>• Symptoms that interfere with daily activities</li>\n                              <li>• Concerns about medication interactions</li>\n                              <li>• Emergency symptoms (chest pain, severe shortness of breath, etc.)</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n\n        <div className=\"mt-12 text-center\">\n          <Card className=\"p-6 bg-muted/30\">\n            <CardContent>\n              <h3 className=\"text-lg font-semibold mb-2\">Disclaimer</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                This information is for educational purposes only and is not intended as medical advice. \n                Always consult with qualified healthcare professionals for proper diagnosis and treatment. \n                Herbs may interact with medications and should be used under medical supervision.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":27254},"client/src/pages/community.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Heart, \n  MessageCircle, \n  Eye, \n  Plus, \n  Send, \n  Users, \n  TrendingUp, \n  Award,\n  Calendar,\n  Tag,\n  User,\n  ThumbsUp\n} from \"lucide-react\";\nimport type { CommunityPost, CommunityComment } from \"@/shared/schema\";\n\ninterface CreatePostForm {\n  authorName: string;\n  authorEmail: string;\n  title: string;\n  content: string;\n  category: string;\n  tags: string[];\n  imageUrl?: string;\n}\n\ninterface CreateCommentForm {\n  authorName: string;\n  authorEmail: string;\n  content: string;\n}\n\nexport default function Community() {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isCreatePostOpen, setIsCreatePostOpen] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<CommunityPost | null>(null);\n  const [isCommentDialogOpen, setIsCommentDialogOpen] = useState(false);\n  const [currentUserEmail, setCurrentUserEmail] = useState(\"\"); // User will input their email\n  const [currentUserName, setCurrentUserName] = useState(\"\"); // User will input their name\n  \n  const queryClient = useQueryClient();\n\n  // Form states\n  const [postForm, setPostForm] = useState<CreatePostForm>({\n    authorName: \"\",\n    authorEmail: \"\",\n    title: \"\",\n    content: \"\",\n    category: \"success-story\",\n    tags: [],\n    imageUrl: \"\"\n  });\n\n  const [commentForm, setCommentForm] = useState<CreateCommentForm>({\n    authorName: \"\",\n    authorEmail: \"\",\n    content: \"\"\n  });\n\n  // Fetch community posts\n  const { data: posts = [], isLoading, error } = useQuery<CommunityPost[]>({\n    queryKey: [\"/api/community/posts\"],\n    refetchOnWindowFocus: false,\n    retry: 3,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Fallback sample posts if API fails\n  const fallbackPosts: CommunityPost[] = [\n    {\n      id: \"1\",\n      authorName: \"Sarah Johnson\",\n      authorEmail: \"sarah@example.com\",\n      title: \"My Journey with Chamomile for Better Sleep\",\n      content: \"I've been struggling with insomnia for months, and chamomile tea has been a game-changer! I started drinking a cup 30 minutes before bed, and within a week, I noticed a significant improvement in my sleep quality.\",\n      category: \"success-story\",\n      tags: [\"sleep\", \"chamomile\", \"anxiety\", \"insomnia\"],\n      imageUrl: \"/attached_assets/generated_images/Chamomile_flowers_blooming_fcc5a2fb.png\",\n      likes: \"5\",\n      views: \"12\",\n      isApproved: \"true\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    },\n    {\n      id: \"2\",\n      authorName: \"Michael Chen\",\n      authorEmail: \"michael@example.com\",\n      title: \"Ginger Tea: My Natural Energy Boost\",\n      content: \"As someone who works long hours, I was always looking for natural ways to boost my energy without caffeine crashes. Ginger tea has been incredible!\",\n      category: \"success-story\",\n      tags: [\"energy\", \"ginger\", \"digestion\", \"anti-inflammatory\"],\n      imageUrl: \"/attached_assets/generated_images/Fresh_ginger_root_pieces_b404e3ce.png\",\n      likes: \"3\",\n      views: \"8\",\n      isApproved: \"true\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    },\n    {\n      id: \"3\",\n      authorName: \"David Thompson\",\n      authorEmail: \"david@example.com\",\n      title: \"Question: Best Herbs for Stress Management?\",\n      content: \"I'm going through a particularly stressful time at work and looking for natural ways to manage stress. What would you recommend?\",\n      category: \"question\",\n      tags: [\"stress\", \"adaptogens\", \"mental-health\", \"beginner\"],\n      imageUrl: null,\n      likes: \"2\",\n      views: \"15\",\n      isApproved: \"true\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    }\n  ];\n\n  const displayPosts = posts.length > 0 ? posts : fallbackPosts;\n\n  // Fetch comments for selected post\n  const { data: comments = [] } = useQuery<CommunityComment[]>({\n    queryKey: [\"/api/community/posts\", selectedPost?.id, \"comments\"],\n    enabled: !!selectedPost,\n    refetchOnWindowFocus: false,\n  });\n\n  // Create post mutation\n  const createPostMutation = useMutation({\n    mutationFn: async (postData: CreatePostForm) => {\n      const response = await fetch(\"/api/community/posts\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(postData),\n      });\n      if (!response.ok) throw new Error(\"Failed to create post\");\n      return response.json();\n    },\n         onSuccess: () => {\n       queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\"] });\n       setIsCreatePostOpen(false);\n       setPostForm({\n         authorName: \"\",\n         authorEmail: \"\",\n         title: \"\",\n         content: \"\",\n         category: \"success-story\",\n         tags: [],\n         imageUrl: \"\"\n       });\n     },\n  });\n\n  // Create comment mutation\n  const createCommentMutation = useMutation({\n    mutationFn: async (commentData: CreateCommentForm & { postId: string }) => {\n      const response = await fetch(\"/api/community/comments\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(commentData),\n      });\n      if (!response.ok) throw new Error(\"Failed to create comment\");\n      return response.json();\n    },\n         onSuccess: () => {\n       queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\", selectedPost?.id, \"comments\"] });\n       setIsCommentDialogOpen(false);\n       setCommentForm({\n         authorName: \"\",\n         authorEmail: \"\",\n         content: \"\"\n       });\n     },\n  });\n\n  // Like post mutation\n  const likePostMutation = useMutation({\n    mutationFn: async ({ postId, userEmail }: { postId: string; userEmail: string }) => {\n      const response = await fetch(`/api/community/posts/${postId}/like`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userEmail }),\n      });\n      if (!response.ok) throw new Error(\"Failed to like post\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\"] });\n    },\n  });\n\n  // Filter posts based on category and search\n  const filteredPosts = displayPosts.filter(post => {\n    const matchesCategory = selectedCategory === \"all\" || post.category === selectedCategory;\n    const matchesSearch = searchQuery === \"\" || \n      post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      post.content.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (post.tags && post.tags.some((tag: string) => tag.toLowerCase().includes(searchQuery.toLowerCase())));\n    \n    return matchesCategory && matchesSearch;\n  });\n\n  // Debug logging\n  console.log('All posts:', displayPosts);\n  console.log('Selected category:', selectedCategory);\n  console.log('Filtered posts:', filteredPosts);\n\n  const categories = [\n    { value: \"all\", label: \"All Posts\", icon: Users },\n    { value: \"success-story\", label: \"Success Stories\", icon: Award },\n    { value: \"journey\", label: \"Wellness Journeys\", icon: TrendingUp },\n    { value: \"question\", label: \"Questions\", icon: MessageCircle },\n    { value: \"tip\", label: \"Tips & Advice\", icon: Heart },\n  ];\n\n  const handleCreatePost = () => {\n    if (!postForm.authorName.trim() || !postForm.authorEmail.trim()) {\n      alert(\"Please provide your name and email to share your story.\");\n      return;\n    }\n    createPostMutation.mutate(postForm);\n  };\n\n  const handleCreateComment = () => {\n    if (!commentForm.authorName.trim() || !commentForm.authorEmail.trim()) {\n      alert(\"Please provide your name and email to comment.\");\n      return;\n    }\n    if (selectedPost) {\n      createCommentMutation.mutate({\n        ...commentForm,\n        postId: selectedPost.id\n      });\n    }\n  };\n\n  const handleLikePost = (postId: string) => {\n    if (!currentUserEmail.trim()) {\n      const email = prompt(\"Please enter your email to like this post:\");\n      if (!email || !email.trim()) {\n        return;\n      }\n      setCurrentUserEmail(email.trim());\n      likePostMutation.mutate({ postId, userEmail: email.trim() });\n      return;\n    }\n    likePostMutation.mutate({ postId, userEmail: currentUserEmail });\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const cat = categories.find(c => c.value === category);\n    return cat ? cat.icon : Users;\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"success-story\": return \"bg-green-100 text-green-800\";\n      case \"journey\": return \"bg-blue-100 text-blue-800\";\n      case \"question\": return \"bg-purple-100 text-purple-800\";\n      case \"tip\": return \"bg-orange-100 text-orange-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading community posts...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"text-red-500 text-2xl mb-4\">⚠️</div>\n          <h3 className=\"text-lg font-semibold mb-2\">Error Loading Community</h3>\n          <p className=\"text-muted-foreground mb-4\">Unable to load community posts. Please try again later.</p>\n          <Button onClick={() => window.location.reload()}>Retry</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"text-community-title\">\n            Wellness Community Center\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Share your wellness journey, celebrate successes, ask questions, and support others on their path to natural health.\n          </p>\n        </div>\n\n                 {/* Debug Info - Remove this in production */}\n         {process.env.NODE_ENV === 'development' && (\n           <div className=\"mb-8 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n             <h3 className=\"font-semibold mb-2\">Debug Info:</h3>\n             <p>Total posts: {displayPosts.length}</p>\n             <p>Selected category: {selectedCategory}</p>\n             <p>Filtered posts: {filteredPosts.length}</p>\n             <p>Posts by category:</p>\n             <ul className=\"text-sm\">\n               {categories.map(cat => (\n                 <li key={cat.value}>\n                   {cat.label}: {displayPosts.filter(p => p.category === cat.value).length}\n                 </li>\n               ))}\n             </ul>\n           </div>\n         )}\n\n         {/* Stats */}\n         <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <Users className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold\">{displayPosts.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Community Posts</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <Award className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                             <div className=\"text-2xl font-bold\">\n                 {displayPosts.filter(p => p.category === \"success-story\").length}\n               </div>\n              <div className=\"text-sm text-muted-foreground\">Success Stories</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <MessageCircle className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n                             <div className=\"text-2xl font-bold\">\n                 {displayPosts.filter(p => p.category === \"question\").length}\n               </div>\n              <div className=\"text-sm text-muted-foreground\">Questions Asked</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <Heart className=\"h-8 w-8 text-red-600 mx-auto mb-2\" />\n                             <div className=\"text-2xl font-bold\">\n                 {displayPosts.reduce((sum, post) => sum + parseInt(post.likes), 0)}\n               </div>\n              <div className=\"text-sm text-muted-foreground\">Total Likes</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Controls */}\n        <div className=\"flex flex-col md:flex-row gap-4 mb-8\">\n          <div className=\"flex-1\">\n            <Input\n              placeholder=\"Search posts, tags, or content...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"max-w-md\"\n            />\n          </div>\n          <Dialog open={isCreatePostOpen} onOpenChange={setIsCreatePostOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"flex items-center gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Share Your Story\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Share Your Wellness Journey</DialogTitle>\n              </DialogHeader>\n                             <div className=\"space-y-4\">\n                 <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                   <div>\n                     <label className=\"text-sm font-medium\">Your Name *</label>\n                     <Input\n                       placeholder=\"Enter your name...\"\n                       value={postForm.authorName}\n                       onChange={(e) => setPostForm({ ...postForm, authorName: e.target.value })}\n                       required\n                     />\n                   </div>\n                                        <div>\n                       <label className=\"text-sm font-medium\">Your Email *</label>\n                       <Input\n                         type=\"email\"\n                         placeholder=\"Enter your email...\"\n                         value={postForm.authorEmail}\n                         onChange={(e) => setPostForm({ ...postForm, authorEmail: e.target.value })}\n                         required\n                       />\n                       <p className=\"text-xs text-muted-foreground mt-1\">Your email will only be used for community features and won't be shared publicly.</p>\n                     </div>\n                 </div>\n                 <div>\n                   <label className=\"text-sm font-medium\">Title</label>\n                   <Input\n                     placeholder=\"Give your post a descriptive title...\"\n                     value={postForm.title}\n                     onChange={(e) => setPostForm({ ...postForm, title: e.target.value })}\n                   />\n                 </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Category</label>\n                  <Select value={postForm.category} onValueChange={(value) => setPostForm({ ...postForm, category: value })}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"success-story\">Success Story</SelectItem>\n                      <SelectItem value=\"journey\">Wellness Journey</SelectItem>\n                      <SelectItem value=\"question\">Question</SelectItem>\n                      <SelectItem value=\"tip\">Tip & Advice</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Content</label>\n                  <Textarea\n                    placeholder=\"Share your experience, ask questions, or provide helpful tips...\"\n                    value={postForm.content}\n                    onChange={(e) => setPostForm({ ...postForm, content: e.target.value })}\n                    rows={6}\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Tags (comma-separated)</label>\n                  <Input\n                    placeholder=\"herbs, sleep, energy, etc.\"\n                    value={postForm.tags.join(\", \")}\n                    onChange={(e) => setPostForm({ ...postForm, tags: e.target.value.split(\",\").map(t => t.trim()).filter(t => t) })}\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Image URL (optional)</label>\n                  <Input\n                    placeholder=\"https://example.com/image.jpg\"\n                    value={postForm.imageUrl}\n                    onChange={(e) => setPostForm({ ...postForm, imageUrl: e.target.value })}\n                  />\n                </div>\n                                 <Button \n                   onClick={handleCreatePost} \n                   disabled={createPostMutation.isPending || !postForm.title || !postForm.content || !postForm.authorName || !postForm.authorEmail}\n                   className=\"w-full\"\n                 >\n                   {createPostMutation.isPending ? \"Creating...\" : \"Share Post\"}\n                 </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Category Tabs */}\n        <Tabs value={selectedCategory} onValueChange={setSelectedCategory} className=\"mb-8\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            {categories.map((category) => {\n              const IconComponent = category.icon;\n              return (\n                <TabsTrigger key={category.value} value={category.value} className=\"flex items-center gap-2\">\n                  <IconComponent className=\"h-4 w-4\" />\n                  <span className=\"hidden sm:inline\">{category.label}</span>\n                </TabsTrigger>\n              );\n            })}\n          </TabsList>\n        </Tabs>\n\n        {/* Posts Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {filteredPosts.map((post) => {\n            const CategoryIcon = getCategoryIcon(post.category);\n            return (\n              <Card key={post.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Badge className={getCategoryColor(post.category)}>\n                          <CategoryIcon className=\"h-3 w-3 mr-1\" />\n                          {categories.find(c => c.value === post.category)?.label}\n                        </Badge>\n                        <span className=\"text-sm text-muted-foreground\">\n                          {formatDate(post.createdAt)}\n                        </span>\n                      </div>\n                      <CardTitle className=\"text-lg mb-2\">{post.title}</CardTitle>\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center gap-1\">\n                          <User className=\"h-4 w-4\" />\n                          {post.authorName}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Eye className=\"h-4 w-4\" />\n                          {post.views}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Heart className=\"h-4 w-4\" />\n                          {post.likes}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground mb-4 line-clamp-3\">\n                    {post.content}\n                  </p>\n                  \n                  {post.imageUrl && (\n                    <img \n                      src={post.imageUrl} \n                      alt={post.title}\n                      className=\"w-full h-48 object-cover rounded-lg mb-4\"\n                    />\n                  )}\n                  \n                  {post.tags.length > 0 && (\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      {post.tags.map((tag: string, index: number) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          <Tag className=\"h-3 w-3 mr-1\" />\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                  \n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleLikePost(post.id)}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <ThumbsUp className=\"h-4 w-4\" />\n                      Like\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedPost(post);\n                        setIsCommentDialogOpen(true);\n                      }}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <MessageCircle className=\"h-4 w-4\" />\n                      {post.category === \"question\" ? \"Answer\" : \"Comment\"}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {filteredPosts.length === 0 && (\n          <div className=\"text-center py-12\">\n            <MessageCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No posts found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery ? \"Try adjusting your search terms\" : \"Be the first to share your wellness journey!\"}\n            </p>\n            <Button onClick={() => setIsCreatePostOpen(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Share Your Story\n            </Button>\n          </div>\n        )}\n\n        {/* Comment Dialog */}\n        <Dialog open={isCommentDialogOpen} onOpenChange={setIsCommentDialogOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {selectedPost?.category === \"question\" \n                  ? `Answers to \"${selectedPost?.title}\"` \n                  : `Comments on \"${selectedPost?.title}\"`}\n              </DialogTitle>\n            </DialogHeader>\n            \n            {selectedPost && (\n              <div className=\"space-y-4\">\n                {/* Post Preview */}\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Badge className={getCategoryColor(selectedPost.category)}>\n                        {categories.find(c => c.value === selectedPost.category)?.label}\n                      </Badge>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {formatDate(selectedPost.createdAt)}\n                      </span>\n                    </div>\n                    <h3 className=\"font-semibold mb-2\">{selectedPost.title}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{selectedPost.content}</p>\n                  </CardContent>\n                </Card>\n\n                {/* Comments */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">\n                    {selectedPost.category === \"question\" \n                      ? `Answers (${comments.length})` \n                      : `Comments (${comments.length})`}\n                  </h4>\n                  {comments.map((comment) => (\n                    <Card key={comment.id}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center gap-2\">\n                            <User className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"font-medium text-sm\">{comment.authorName}</span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {formatDate(comment.createdAt)}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                            <Heart className=\"h-3 w-3\" />\n                            {comment.likes}\n                          </div>\n                        </div>\n                        <p className=\"text-sm\">{comment.content}</p>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n\n                                 {/* Add Comment */}\n                 <div className=\"space-y-4\">\n                   <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                     <div>\n                       <label className=\"text-sm font-medium\">Your Name *</label>\n                       <Input\n                         placeholder=\"Enter your name...\"\n                         value={commentForm.authorName}\n                         onChange={(e) => setCommentForm({ ...commentForm, authorName: e.target.value })}\n                         required\n                       />\n                     </div>\n                     <div>\n                       <label className=\"text-sm font-medium\">Your Email *</label>\n                       <Input\n                         type=\"email\"\n                         placeholder=\"Enter your email...\"\n                         value={commentForm.authorEmail}\n                         onChange={(e) => {\n                           setCommentForm({ ...commentForm, authorEmail: e.target.value });\n                           setCurrentUserEmail(e.target.value); // Store for likes\n                         }}\n                         required\n                       />\n                       <p className=\"text-xs text-muted-foreground mt-1\">Your email will only be used for community features and won't be shared publicly.</p>\n                     </div>\n                   </div>\n                   <div>\n                     <label className=\"text-sm font-medium\">\n                      {selectedPost.category === \"question\" ? \"Your Answer\" : \"Your Comment\"}\n                    </label>\n                     <Textarea\n                       placeholder={selectedPost.category === \"question\" \n                        ? \"Share your experience and advice to help answer this question...\" \n                        : \"Share your thoughts, ask questions, or offer support...\"}\n                       value={commentForm.content}\n                       onChange={(e) => setCommentForm({ ...commentForm, content: e.target.value })}\n                       rows={3}\n                     />\n                   </div>\n                   <Button \n                     onClick={handleCreateComment}\n                     disabled={createCommentMutation.isPending || !commentForm.content || !commentForm.authorName || !commentForm.authorEmail}\n                     className=\"w-full\"\n                   >\n                     {createCommentMutation.isPending ? \"Posting...\" : (selectedPost.category === \"question\" ? \"Post Answer\" : \"Post Comment\")}\n                   </Button>\n                 </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":29271},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MessageCircle, Clock, Heart } from \"lucide-react\";\nimport type { InsertContactMessage } from \"@/shared/schema\";\n\nexport default function Contact() {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\"\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: InsertContactMessage) => {\n      return await apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message sent successfully!\",\n        description: \"We'll respond within 24-48 hours.\",\n      });\n      setFormData({ name: \"\", email: \"\", subject: \"\", message: \"\" });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to send message\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name || !formData.email || !formData.message) {\n      toast({\n        title: \"Please fill in required fields\",\n        description: \"Name, email, and message are required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    contactMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const socialLinks = [\n    { name: \"Facebook\", icon: \"fab fa-facebook\", color: \"text-blue-600\", bgColor: \"bg-blue-50 hover:bg-blue-100\" },\n    { name: \"Instagram\", icon: \"fab fa-instagram\", color: \"text-pink-600\", bgColor: \"bg-pink-50 hover:bg-pink-100\" },\n    { name: \"YouTube\", icon: \"fab fa-youtube\", color: \"text-red-600\", bgColor: \"bg-red-50 hover:bg-red-100\" },\n    { name: \"Twitter\", icon: \"fab fa-twitter\", color: \"text-blue-400\", bgColor: \"bg-blue-50 hover:bg-blue-100\" }\n  ];\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-4xl font-bold text-center mb-8\" data-testid=\"text-page-title\">\n          Contact Us\n        </h1>\n        <p className=\"text-lg text-muted-foreground text-center mb-12 max-w-2xl mx-auto\">\n          Have questions about herbs or natural wellness? We'd love to hear from you!\n        </p>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <Card className=\"p-8 shadow-lg border border-border\">\n            <CardContent className=\"p-0\">\n              <h2 className=\"text-2xl font-bold mb-6\" data-testid=\"text-form-title\">\n                Send us a Message\n              </h2>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div>\n                  <label htmlFor=\"name\" className=\"block text-sm font-medium mb-2\">\n                    Your Name *\n                  </label>\n                  <Input\n                    id=\"name\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={formData.name}\n                    onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                    required\n                    data-testid=\"input-name\"\n                  />\n                </div>\n                \n                <div>\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium mb-2\">\n                    Email Address *\n                  </label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"your.email@example.com\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n                \n                <div>\n                  <label htmlFor=\"subject\" className=\"block text-sm font-medium mb-2\">\n                    Subject\n                  </label>\n                  <Select onValueChange={(value) => handleInputChange(\"subject\", value)}>\n                    <SelectTrigger data-testid=\"select-subject\">\n                      <SelectValue placeholder=\"Select a topic\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"general\">General Question</SelectItem>\n                      <SelectItem value=\"herbs\">Herb Information</SelectItem>\n                      <SelectItem value=\"safety\">Safety Concerns</SelectItem>\n                      <SelectItem value=\"collaboration\">Collaboration</SelectItem>\n                      <SelectItem value=\"feedback\">Feedback</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <label htmlFor=\"message\" className=\"block text-sm font-medium mb-2\">\n                    Message *\n                  </label>\n                  <Textarea\n                    id=\"message\"\n                    rows={5}\n                    placeholder=\"Tell us how we can help you...\"\n                    value={formData.message}\n                    onChange={(e) => handleInputChange(\"message\", e.target.value)}\n                    required\n                    data-testid=\"textarea-message\"\n                  />\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={contactMutation.isPending}\n                  data-testid=\"button-send-message\"\n                >\n                  {contactMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Contact Information */}\n          <div className=\"space-y-8\">\n            {/* Quick Connect */}\n            <Card className=\"p-8 shadow-lg border border-border\">\n              <CardContent className=\"p-0\">\n                <h3 className=\"text-xl font-bold mb-4 flex items-center\">\n                  <MessageCircle className=\"text-primary mr-3\" />\n                  Quick Connect\n                </h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  For immediate questions or consultations, reach out through our messaging platforms:\n                </p>\n                <div className=\"space-y-4\">\n                  <a \n                    href=\"#\" \n                    className=\"flex items-center space-x-3 p-3 bg-green-50 hover:bg-green-100 rounded-lg transition-colors\"\n                    data-testid=\"link-whatsapp\"\n                  >\n                    <i className=\"fab fa-whatsapp text-2xl text-green-600\"></i>\n                    <span className=\"font-medium\">WhatsApp</span>\n                    <span className=\"text-sm text-muted-foreground ml-auto\">Coming Soon</span>\n                  </a>\n                  <a \n                    href=\"#\" \n                    className=\"flex items-center space-x-3 p-3 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors\"\n                    data-testid=\"link-telegram\"\n                  >\n                    <i className=\"fab fa-telegram text-2xl text-blue-600\"></i>\n                    <span className=\"font-medium\">Telegram</span>\n                    <span className=\"text-sm text-muted-foreground ml-auto\">Coming Soon</span>\n                  </a>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Response Time */}\n            <Card className=\"p-8 shadow-lg border border-border\">\n              <CardContent className=\"p-0\">\n                <h3 className=\"text-xl font-bold mb-4 flex items-center\">\n                  <Clock className=\"text-accent mr-3\" />\n                  Response Time\n                </h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  We typically respond to messages within 24-48 hours. For urgent health concerns, please consult with a healthcare professional immediately.\n                </p>\n                <div className=\"bg-yellow-50 border border-yellow-200 p-4 rounded-lg\">\n                  <p className=\"text-sm text-yellow-800\">\n                    <strong>Remember:</strong> We provide educational information only. For medical emergencies or serious health issues, please contact your healthcare provider or emergency services.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Social Links */}\n            <Card className=\"p-8 shadow-lg border border-border\">\n              <CardContent className=\"p-0\">\n                <h3 className=\"text-xl font-bold mb-4 flex items-center\">\n                  <Heart className=\"text-secondary mr-3\" />\n                  Connect with Us\n                </h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Join our community of natural wellness enthusiasts:\n                </p>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  {socialLinks.map((social) => (\n                    <a\n                      key={social.name}\n                      href=\"#\"\n                      className={`flex items-center justify-center space-x-2 p-3 rounded-lg transition-colors ${social.bgColor}`}\n                      data-testid={`link-social-${social.name.toLowerCase()}`}\n                    >\n                      <i className={`${social.icon} ${social.color}`}></i>\n                      <span className=\"text-sm\">{social.name}</span>\n                    </a>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10217},"client/src/pages/energy.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Zap, Sun, Battery, TrendingUp, Clock, Lightbulb } from \"lucide-react\";\nimport HerbCard from \"@/components/herbs/herb-card\";\nimport HerbDetailModal from \"@/components/herbs/herb-detail-modal\";\nimport type { Herb } from \"@/shared/schema\";\n\nexport default function Energy() {\n  const [selectedHerb, setSelectedHerb] = useState<Herb | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const { data: allHerbs = [] } = useQuery<Herb[]>({\n    queryKey: [\"/api/herbs\"],\n  });\n\n  // Filter herbs for energy\n  const energyHerbs = allHerbs.filter(herb => \n    herb.categories.includes(\"Energy\")\n  );\n\n  const handleHerbClick = (herb: Herb) => {\n    setSelectedHerb(herb);\n    setIsModalOpen(true);\n  };\n\n  const energyTips = [\n    {\n      icon: Zap,\n      title: \"Natural Boost\",\n      description: \"Use herbs like ginger and moringa for sustained energy without crashes.\",\n      color: \"text-yellow-600\"\n    },\n    {\n      icon: Sun,\n      title: \"Morning Ritual\",\n      description: \"Start your day with energizing herbal teas to boost vitality naturally.\",\n      color: \"text-orange-600\"\n    },\n    {\n      icon: Battery,\n      title: \"Endurance Support\",\n      description: \"Support your body's energy systems with nutrient-rich herbs.\",\n      color: \"text-green-600\"\n    }\n  ];\n\n  const energyRituals = [\n    \"Morning ginger tea for natural energy boost\",\n    \"Moringa powder in smoothies for sustained vitality\",\n    \"Baobab fruit for vitamin C and energy support\",\n    \"Regular hydration with herbal infusions\",\n    \"Balanced meals with energy-supporting herbs\",\n    \"Adequate rest to complement herbal energy support\"\n  ];\n\n  const energyTiming = [\n    { time: \"6-8 AM\", activity: \"Ginger tea or moringa smoothie\", herb: \"Ginger, Moringa\" },\n    { time: \"10-11 AM\", activity: \"Mid-morning energy boost\", herb: \"Baobab, Turmeric\" },\n    { time: \"2-3 PM\", activity: \"Afternoon vitality support\", herb: \"Peppermint, Hibiscus\" },\n    { time: \"6-7 PM\", activity: \"Evening wind-down\", herb: \"Chamomile, African Sage\" }\n  ];\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"w-20 h-20 bg-yellow-100 rounded-full flex items-center justify-center\">\n              <Zap className=\"h-10 w-10 text-yellow-600\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold mb-6 text-yellow-600\" data-testid=\"text-page-title\">\n            Natural Energy & Vitality\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Discover herbs that provide sustained energy, boost vitality, and support your body's natural energy systems.\n          </p>\n        </div>\n\n        {/* Key Benefits */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          {energyTips.map((tip, index) => {\n            const IconComponent = tip.icon;\n            return (\n              <Card key={index} className=\"text-center\">\n                <CardContent className=\"pt-6\">\n                  <IconComponent className={`h-12 w-12 mx-auto mb-4 ${tip.color}`} />\n                  <h3 className=\"text-xl font-semibold mb-2\">{tip.title}</h3>\n                  <p className=\"text-muted-foreground\">{tip.description}</p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Featured Herbs */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Herbs for Energy & Vitality</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {energyHerbs.map((herb) => (\n              <div key={herb.id} onClick={() => handleHerbClick(herb)}>\n                <HerbCard herb={herb} />\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Daily Energy Rituals */}\n        <Card className=\"mb-16\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-6 w-6\" />\n              Daily Energy Rituals\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {energyRituals.map((ritual, index) => (\n                <div key={index} className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                  <div className=\"w-2 h-2 bg-yellow-600 rounded-full\"></div>\n                  <span className=\"text-sm\">{ritual}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Energy Timing Guide */}\n        <Card className=\"mb-16\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-6 w-6\" />\n              Optimal Energy Timing\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {energyTiming.map((timing, index) => (\n                <div key={index} className=\"p-4 border rounded-lg\">\n                  <div className=\"font-semibold text-yellow-600 mb-2\">{timing.time}</div>\n                  <div className=\"text-sm text-muted-foreground mb-2\">{timing.activity}</div>\n                  <Badge variant=\"outline\" className=\"text-xs\">{timing.herb}</Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Energy Tips */}\n        <Card className=\"bg-yellow-50 border-yellow-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-yellow-800\">\n              <Lightbulb className=\"h-6 w-6\" />\n              Energy Enhancement Tips\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 text-yellow-800\">\n              <p>\n                <strong>Start Slow:</strong> Begin with small amounts of energizing herbs and gradually increase as your body adapts.\n              </p>\n              <p>\n                <strong>Stay Hydrated:</strong> Energy herbs work best when you're well-hydrated. Drink plenty of water throughout the day.\n              </p>\n              <p>\n                <strong>Listen to Your Body:</strong> Pay attention to how different herbs affect your energy levels and adjust accordingly.\n              </p>\n              <p>\n                <strong>Combine with Lifestyle:</strong> Herbs work best when combined with good sleep, nutrition, and regular movement.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Herb Detail Modal */}\n        <HerbDetailModal\n          herb={selectedHerb}\n          isOpen={isModalOpen}\n          onClose={() => {\n            setIsModalOpen(false);\n            setSelectedHerb(null);\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\n","size_bytes":7288},"client/src/pages/general-wellness.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Shield, Heart, Brain, Leaf, Activity, Sun, Moon, Users, Globe, TrendingUp, AlertTriangle, Info, Lightbulb, BookOpen } from \"lucide-react\";\nimport HerbCard from \"@/components/herbs/herb-card\";\nimport HerbDetailModal from \"@/components/herbs/herb-detail-modal\";\nimport type { Herb } from \"@/shared/schema\";\n\nexport default function GeneralWellness() {\n  const [selectedHerb, setSelectedHerb] = useState<Herb | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const { data: allHerbs = [] } = useQuery<Herb[]>({\n    queryKey: [\"/api/herbs\"],\n  });\n\n  // Filter herbs for general wellness\n  const wellnessHerbs = allHerbs.filter(herb => \n    herb.categories.includes(\"General Wellness\") ||\n    herb.categories.includes(\"Energy\") ||\n    herb.categories.includes(\"Mental Health\")\n  );\n\n  const handleHerbClick = (herb: Herb) => {\n    setSelectedHerb(herb);\n    setIsModalOpen(true);\n  };\n\n  const globalHealthPillars = [\n    {\n      id: \"nutrition\",\n      icon: Leaf,\n      title: \"Nutrition & Diet\",\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\",\n      borderColor: \"border-green-200\",\n      definition: \"The foundation of health - what we eat directly impacts every system in our body.\",\n      keyPrinciples: [\n        \"Whole, unprocessed foods\",\n        \"Plant-based foundation\",\n        \"Adequate protein and healthy fats\",\n        \"Fiber-rich carbohydrates\",\n        \"Hydration with clean water\"\n      ],\n      globalImpact: [\n        \"Poor nutrition causes 11 million deaths annually\",\n        \"2 billion people lack essential micronutrients\",\n        \"Diet-related diseases cost $2 trillion globally\",\n        \"Food choices impact climate change\"\n      ],\n      preventionStrategies: [\n        \"Eat a rainbow of vegetables daily\",\n        \"Choose whole grains over refined\",\n        \"Include healthy fats (nuts, seeds, avocados)\",\n        \"Limit processed foods and added sugars\",\n        \"Stay hydrated with water and herbal teas\"\n      ]\n    },\n    {\n      id: \"movement\",\n      icon: Activity,\n      title: \"Physical Activity\",\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-50\",\n      borderColor: \"border-blue-200\",\n      definition: \"Regular movement is essential for maintaining health, preventing disease, and supporting mental wellbeing.\",\n      keyPrinciples: [\n        \"150 minutes moderate activity weekly\",\n        \"Strength training 2-3 times per week\",\n        \"Flexibility and balance exercises\",\n        \"Daily movement throughout the day\",\n        \"Activities you enjoy and can sustain\"\n      ],\n      globalImpact: [\n        \"Physical inactivity causes 3.2 million deaths annually\",\n        \"60-85% of people worldwide lead sedentary lives\",\n        \"Exercise reduces risk of chronic diseases by 30%\",\n        \"Active communities have better mental health\"\n      ],\n      preventionStrategies: [\n        \"Start with 10-minute walks daily\",\n        \"Use stairs instead of elevators\",\n        \"Walk or bike for short trips\",\n        \"Join group activities or sports\",\n        \"Make movement a social activity\"\n      ]\n    },\n    {\n      id: \"sleep\",\n      icon: Moon,\n      title: \"Sleep & Recovery\",\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-50\",\n      borderColor: \"border-purple-200\",\n      definition: \"Quality sleep is essential for immune function, mental health, and overall wellbeing.\",\n      keyPrinciples: [\n        \"7-9 hours of quality sleep nightly\",\n        \"Consistent sleep schedule\",\n        \"Dark, cool, quiet sleep environment\",\n        \"Relaxing bedtime routine\",\n        \"Limit screen time before bed\"\n      ],\n      globalImpact: [\n        \"1 in 3 adults don't get enough sleep\",\n        \"Sleep deprivation costs $411 billion annually\",\n        \"Poor sleep linked to 7 of 15 leading causes of death\",\n        \"Sleep quality affects immune function\"\n      ],\n      preventionStrategies: [\n        \"Establish consistent sleep schedule\",\n        \"Create relaxing bedtime routine\",\n        \"Keep bedroom cool and dark\",\n        \"Avoid caffeine after 2 PM\",\n        \"Use calming herbs like chamomile\"\n      ]\n    },\n    {\n      id: \"stress\",\n      icon: Brain,\n      title: \"Stress Management\",\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\",\n      borderColor: \"border-orange-200\",\n      definition: \"Chronic stress affects every system in the body and is a major contributor to modern health issues.\",\n      keyPrinciples: [\n        \"Regular stress reduction practices\",\n        \"Mindfulness and meditation\",\n        \"Social connections and support\",\n        \"Time in nature\",\n        \"Healthy boundaries and self-care\"\n      ],\n      globalImpact: [\n        \"75% of doctor visits are stress-related\",\n        \"Chronic stress affects 80% of adults\",\n        \"Stress costs $300 billion annually in lost productivity\",\n        \"Stress weakens immune system function\"\n      ],\n      preventionStrategies: [\n        \"Practice daily meditation or deep breathing\",\n        \"Spend time in nature regularly\",\n        \"Maintain strong social connections\",\n        \"Set healthy boundaries\",\n        \"Use adaptogenic herbs for support\"\n      ]\n    }\n  ];\n\n  const preventiveHealthStrategies = {\n    title: \"Preventive Health Strategies for Global Wellness\",\n    categories: [\n      {\n        name: \"Immune System Support\",\n        description: \"Strengthening the body's natural defense system\",\n        strategies: [\n          \"Eat immune-boosting foods (garlic, ginger, citrus)\",\n          \"Get adequate vitamin D from sun exposure\",\n          \"Practice good hygiene and hand washing\",\n          \"Manage stress levels\",\n          \"Get quality sleep\",\n          \"Stay physically active\"\n        ],\n        herbs: [\"Echinacea\", \"Elderberry\", \"Ginger\", \"Turmeric\", \"Garlic\"]\n      },\n      {\n        name: \"Gut Health Optimization\",\n        description: \"Supporting the microbiome for overall health\",\n        strategies: [\n          \"Eat fiber-rich foods daily\",\n          \"Include fermented foods (yogurt, sauerkraut)\",\n          \"Stay hydrated with clean water\",\n          \"Limit processed foods and antibiotics\",\n          \"Manage stress levels\",\n          \"Get adequate sleep\"\n        ],\n        herbs: [\"Ginger\", \"Peppermint\", \"Chamomile\", \"Fennel\", \"Probiotics\"]\n      },\n      {\n        name: \"Detoxification Support\",\n        description: \"Helping the body eliminate toxins naturally\",\n        strategies: [\n          \"Stay hydrated with clean water\",\n          \"Eat cruciferous vegetables\",\n          \"Support liver function with herbs\",\n          \"Sweat through exercise or sauna\",\n          \"Get adequate fiber for elimination\",\n          \"Reduce exposure to environmental toxins\"\n        ],\n        herbs: [\"Dandelion root\", \"Milk thistle\", \"Burdock root\", \"Nettle\", \"Cilantro\"]\n      },\n      {\n        name: \"Energy & Vitality\",\n        description: \"Maintaining optimal energy levels throughout life\",\n        strategies: [\n          \"Eat nutrient-dense whole foods\",\n          \"Stay hydrated throughout the day\",\n          \"Get regular physical activity\",\n          \"Manage stress and get adequate sleep\",\n          \"Use energizing herbs and adaptogens\",\n          \"Practice mindful eating\"\n        ],\n        herbs: [\"Ginseng\", \"Rhodiola\", \"Ashwagandha\", \"Moringa\", \"Green tea\"]\n      }\n    ]\n  };\n\n  const lifestyleOptimization = [\n    {\n      category: \"Daily Routines\",\n      practices: [\n        \"Morning hydration with lemon water\",\n        \"10-15 minutes of stretching or yoga\",\n        \"Mindful breakfast with protein and fiber\",\n        \"Regular meal timing\",\n        \"Evening wind-down routine\",\n        \"Gratitude practice\"\n      ]\n    },\n    {\n      category: \"Environmental Health\",\n      practices: [\n        \"Use natural cleaning products\",\n        \"Improve indoor air quality with plants\",\n        \"Filter drinking water\",\n        \"Reduce plastic use\",\n        \"Choose organic foods when possible\",\n        \"Spend time in nature regularly\"\n      ]\n    },\n    {\n      category: \"Social Wellness\",\n      practices: [\n        \"Maintain strong relationships\",\n        \"Join community groups or activities\",\n        \"Practice active listening\",\n        \"Give and receive support\",\n        \"Volunteer or help others\",\n        \"Stay connected with family and friends\"\n      ]\n    },\n    {\n      category: \"Mental Wellness\",\n      practices: [\n        \"Practice mindfulness or meditation\",\n        \"Learn new skills or hobbies\",\n        \"Read regularly\",\n        \"Limit social media use\",\n        \"Seek professional help when needed\",\n        \"Practice self-compassion\"\n      ]\n    }\n  ];\n\n  const herbalWellnessSupport = {\n    adaptogens: [\n      {\n        name: \"Ashwagandha\",\n        benefits: [\"Reduces stress and cortisol\", \"Improves energy and focus\", \"Supports immune function\"],\n        usage: \"300-600mg daily, best in morning\"\n      },\n      {\n        name: \"Rhodiola\",\n        benefits: [\"Enhances mental performance\", \"Reduces fatigue\", \"Supports stress adaptation\"],\n        usage: \"200-400mg daily, avoid evening\"\n      },\n      {\n        name: \"Holy Basil\",\n        benefits: [\"Reduces stress and anxiety\", \"Supports respiratory health\", \"Anti-inflammatory\"],\n        usage: \"300-600mg daily or as tea\"\n      }\n    ],\n    immune: [\n      {\n        name: \"Echinacea\",\n        benefits: [\"Stimulates immune system\", \"Reduces cold duration\", \"Anti-inflammatory\"],\n        usage: \"At first sign of illness, 3-5 days\"\n      },\n      {\n        name: \"Elderberry\",\n        benefits: [\"Antiviral properties\", \"Rich in antioxidants\", \"Supports respiratory health\"],\n        usage: \"During cold/flu season, 1-2 weeks\"\n      },\n      {\n        name: \"Garlic\",\n        benefits: [\"Antimicrobial properties\", \"Supports cardiovascular health\", \"Immune boosting\"],\n        usage: \"1-2 cloves daily or aged extract\"\n      }\n    ],\n    digestive: [\n      {\n        name: \"Ginger\",\n        benefits: [\"Improves digestion\", \"Reduces nausea\", \"Anti-inflammatory\"],\n        usage: \"Fresh tea or 1-2 inches daily\"\n      },\n      {\n        name: \"Peppermint\",\n        benefits: [\"Soothes digestive discomfort\", \"Reduces bloating\", \"Calming effect\"],\n        usage: \"1-2 cups tea daily after meals\"\n      },\n      {\n        name: \"Chamomile\",\n        benefits: [\"Gentle digestive support\", \"Promotes relaxation\", \"Anti-inflammatory\"],\n        usage: \"1-2 cups tea daily, especially evening\"\n      }\n    ]\n  };\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center\">\n              <Shield className=\"h-10 w-10 text-blue-600\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold mb-6 text-blue-600\" data-testid=\"text-page-title\">\n            Global Wellness & Preventive Health\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Discover how lifestyle choices impact global health outcomes and learn preventive strategies \n            for optimal wellbeing using natural approaches and herbal support.\n          </p>\n        </div>\n\n        {/* Global Health Pillars */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Four Pillars of Global Wellness</h2>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {globalHealthPillars.map((pillar) => {\n              const IconComponent = pillar.icon;\n              return (\n                <Card key={pillar.id} className={`p-6 shadow-lg border-2 ${pillar.borderColor}`}>\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <div className={`p-3 rounded-full ${pillar.bgColor}`}>\n                        <IconComponent className={`h-6 w-6 ${pillar.color}`} />\n                      </div>\n                      <h3 className={`text-xl font-bold ${pillar.color}`}>{pillar.title}</h3>\n                    </div>\n                    <p className=\"text-muted-foreground text-sm\">{pillar.definition}</p>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Key Principles:</h4>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {pillar.keyPrinciples.map((principle, index) => (\n                          <li key={index} className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                            {principle}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Global Impact:</h4>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {pillar.globalImpact.map((impact, index) => (\n                          <li key={index} className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                            {impact}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Prevention Strategies:</h4>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {pillar.preventionStrategies.map((strategy, index) => (\n                          <li key={index} className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                            {strategy}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Preventive Health Strategies */}\n        <div className=\"mb-16\">\n          <Card className=\"p-8 shadow-lg\">\n            <CardHeader className=\"text-center pb-6\">\n              <h2 className=\"text-3xl font-bold mb-4 flex items-center justify-center gap-3\">\n                <Globe className=\"h-8 w-8 text-blue-600\" />\n                {preventiveHealthStrategies.title}\n              </h2>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                {preventiveHealthStrategies.categories.map((category, index) => (\n                  <div key={index} className=\"space-y-4\">\n                    <div>\n                      <h3 className=\"text-xl font-semibold text-blue-600 mb-2\">{category.name}</h3>\n                      <p className=\"text-muted-foreground mb-3\">{category.description}</p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Strategies:</h4>\n                      <ul className=\"text-sm text-muted-foreground space-y-1 mb-3\">\n                        {category.strategies.map((strategy, idx) => (\n                          <li key={idx} className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                            {strategy}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Supporting Herbs:</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {category.herbs.map((herb, idx) => (\n                          <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                            {herb}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Lifestyle Optimization */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Lifestyle Optimization for Wellness</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {lifestyleOptimization.map((category, index) => (\n              <Card key={index} className=\"p-6 shadow-lg\">\n                <CardHeader className=\"pb-4\">\n                  <h3 className=\"text-lg font-semibold text-center\">{category.category}</h3>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {category.practices.map((practice, idx) => (\n                      <li key={idx} className=\"flex items-start gap-2 text-sm text-muted-foreground\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\n                        <span>{practice}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Herbal Wellness Support */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Herbal Support for Wellness</h2>\n          <Tabs defaultValue=\"adaptogens\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"adaptogens\">Adaptogens</TabsTrigger>\n              <TabsTrigger value=\"immune\">Immune Support</TabsTrigger>\n              <TabsTrigger value=\"digestive\">Digestive Health</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"adaptogens\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {herbalWellnessSupport.adaptogens.map((herb, index) => (\n                  <Card key={index} className=\"p-6\">\n                    <CardHeader>\n                      <h3 className=\"text-lg font-semibold\">{herb.name}</h3>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Benefits:</h4>\n                        <ul className=\"text-sm text-muted-foreground space-y-1\">\n                          {herb.benefits.map((benefit, idx) => (\n                            <li key={idx} className=\"flex items-center gap-2\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                              {benefit}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Usage:</h4>\n                        <p className=\"text-sm text-muted-foreground\">{herb.usage}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"immune\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {herbalWellnessSupport.immune.map((herb, index) => (\n                  <Card key={index} className=\"p-6\">\n                    <CardHeader>\n                      <h3 className=\"text-lg font-semibold\">{herb.name}</h3>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Benefits:</h4>\n                        <ul className=\"text-sm text-muted-foreground space-y-1\">\n                          {herb.benefits.map((benefit, idx) => (\n                            <li key={idx} className=\"flex items-center gap-2\">\n                              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                              {benefit}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Usage:</h4>\n                        <p className=\"text-sm text-muted-foreground\">{herb.usage}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"digestive\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {herbalWellnessSupport.digestive.map((herb, index) => (\n                  <Card key={index} className=\"p-6\">\n                    <CardHeader>\n                      <h3 className=\"text-lg font-semibold\">{herb.name}</h3>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Benefits:</h4>\n                        <ul className=\"text-sm text-muted-foreground space-y-1\">\n                          {herb.benefits.map((benefit, idx) => (\n                            <li key={idx} className=\"flex items-center gap-2\">\n                              <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n                              {benefit}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Usage:</h4>\n                        <p className=\"text-sm text-muted-foreground\">{herb.usage}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        {/* Featured Herbs */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Herbs for General Wellness</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {wellnessHerbs.map((herb) => (\n              <div key={herb.id} onClick={() => handleHerbClick(herb)}>\n                <HerbCard herb={herb} />\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center\">\n          <Card className=\"p-8 bg-blue-50 border-blue-200\">\n            <CardContent>\n              <h3 className=\"text-2xl font-bold text-blue-800 mb-4\">Commit to Your Wellness Journey</h3>\n              <p className=\"text-blue-700 mb-6\">\n                Remember, optimal health is achieved through consistent, sustainable lifestyle choices. \n                Start with small changes, build healthy habits, and use natural support to enhance your wellbeing.\n              </p>\n              <div className=\"flex flex-wrap justify-center gap-4\">\n                <Badge variant=\"outline\" className=\"text-blue-700 border-blue-300\">\n                  <Shield className=\"h-4 w-4 mr-1\" />\n                  Prevention First\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-blue-700 border-blue-300\">\n                  <Heart className=\"h-4 w-4 mr-1\" />\n                  Holistic Approach\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-blue-700 border-blue-300\">\n                  <TrendingUp className=\"h-4 w-4 mr-1\" />\n                  Sustainable Habits\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-blue-700 border-blue-300\">\n                  <Leaf className=\"h-4 w-4 mr-1\" />\n                  Natural Support\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Herb Detail Modal */}\n        <HerbDetailModal\n          herb={selectedHerb}\n          isOpen={isModalOpen}\n          onClose={() => {\n            setIsModalOpen(false);\n            setSelectedHerb(null);\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\n","size_bytes":24646},"client/src/pages/herbs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport HerbCard from \"@/components/herbs/herb-card\";\nimport HerbSearch from \"@/components/herbs/herb-search\";\nimport HerbDetailModal from \"@/components/herbs/herb-detail-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Herb } from \"@/shared/schema\";\n\nexport default function Herbs() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const [selectedHerb, setSelectedHerb] = useState<Herb | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const { data: allHerbs = [], isLoading } = useQuery<Herb[]>({\n    queryKey: [\"/api/herbs\"],\n  });\n\n  const { data: searchResults = [], isLoading: isSearching } = useQuery<Herb[]>({\n    queryKey: [\"/api/herbs/search\", searchQuery],\n    queryFn: async () => {\n      const response = await fetch(`/api/herbs/search?q=${encodeURIComponent(searchQuery)}`);\n      if (!response.ok) {\n        throw new Error('Failed to search herbs');\n      }\n      return response.json();\n    },\n    enabled: searchQuery.length >= 2,\n  });\n\n  const displayedHerbs = searchQuery.length >= 2 ? searchResults : allHerbs;\n  \n  const globalHerbs = displayedHerbs.filter(herb => herb.isIndigenous === \"false\");\n  const indigenousHerbs = displayedHerbs.filter(herb => herb.isIndigenous === \"true\");\n\n  const allCategories = Array.from(\n    new Set(allHerbs.flatMap(herb => herb.categories))\n  ).sort();\n\n  const handleHerbClick = (herb: Herb) => {\n    setSelectedHerb(herb);\n    setIsModalOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading herbs library...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <h1 className=\"text-4xl font-bold text-center mb-8\" data-testid=\"text-page-title\">\n          Herbs Library\n        </h1>\n        <p className=\"text-lg text-muted-foreground text-center mb-12 max-w-2xl mx-auto\">\n          Discover nature's pharmacy with our comprehensive collection of healing herbs from around the world.\n        </p>\n\n        {/* Search Bar */}\n        <div className=\"mb-12\">\n          <HerbSearch onSearch={setSearchQuery} />\n        </div>\n\n        {/* Category Filters */}\n        {!searchQuery && (\n          <div className=\"mb-8\">\n            <div className=\"flex flex-wrap gap-2 justify-center\">\n              <Button\n                variant={selectedCategory === \"\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedCategory(\"\")}\n                data-testid=\"button-category-all\"\n              >\n                All Categories\n              </Button>\n              {allCategories.map((category) => (\n                <Button\n                  key={category}\n                  variant={selectedCategory === category ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category)}\n                  data-testid={`button-category-${category.toLowerCase().replace(' ', '-')}`}\n                >\n                  {category}\n                </Button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Search Results */}\n        {searchQuery && (\n          <div className=\"mb-8\">\n            <h2 className=\"text-2xl font-bold mb-6\">\n              Search Results for \"{searchQuery}\"\n              {!isSearching && (\n                <Badge variant=\"secondary\" className=\"ml-2\">\n                  {searchResults.length} found\n                </Badge>\n              )}\n            </h2>\n            {isSearching ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"bg-card rounded-lg p-6 animate-pulse\">\n                    <div className=\"bg-muted h-48 rounded mb-4\"></div>\n                    <div className=\"bg-muted h-6 rounded mb-2\"></div>\n                    <div className=\"bg-muted h-4 rounded\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : searchResults.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {searchResults.map((herb) => (\n                  <HerbCard\n                    key={herb.id}\n                    herb={herb}\n                    onClick={() => handleHerbClick(herb)}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <p className=\"text-muted-foreground\">No herbs found matching your search.</p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Global Herbs */}\n        {!searchQuery && (\n          <div className=\"mb-12\">\n            <h2 className=\"text-2xl font-bold mb-6\" data-testid=\"text-global-herbs-title\">\n              Global Herbs\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {globalHerbs\n                .filter(herb => !selectedCategory || herb.categories.includes(selectedCategory))\n                .map((herb) => (\n                  <HerbCard\n                    key={herb.id}\n                    herb={herb}\n                    onClick={() => handleHerbClick(herb)}\n                  />\n                ))}\n            </div>\n          </div>\n        )}\n\n        {/* Indigenous African Herbs */}\n        {!searchQuery && (\n          <div>\n            <h2 className=\"text-2xl font-bold mb-6\" data-testid=\"text-indigenous-herbs-title\">\n              Indigenous African Herbs\n            </h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {indigenousHerbs\n                .filter(herb => !selectedCategory || herb.categories.includes(selectedCategory))\n                .map((herb) => (\n                  <HerbCard\n                    key={herb.id}\n                    herb={herb}\n                    onClick={() => handleHerbClick(herb)}\n                  />\n                ))}\n            </div>\n          </div>\n        )}\n\n        {/* Empty State */}\n        {!searchQuery && selectedCategory && (\n          displayedHerbs.filter(herb => herb.categories.includes(selectedCategory)).length === 0 && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">No herbs found in the \"{selectedCategory}\" category.</p>\n            </div>\n          )\n        )}\n      </div>\n\n      {/* Herb Detail Modal */}\n      <HerbDetailModal\n        herb={selectedHerb}\n        isOpen={isModalOpen}\n        onClose={() => {\n          setIsModalOpen(false);\n          setSelectedHerb(null);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":7141},"client/src/pages/home.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport FeaturedHerb from \"@/components/herbs/featured-herb\";\nimport { Brain, Zap, Moon, Scale, Heart, Search, Play, Bot, Send, X, Sparkles } from \"lucide-react\";\nimport type { Herb } from \"@/shared/schema\";\nconst familyImage = \"/attached_assets/generated_images/Family_enjoying_herbal_tea_747c1dae.png\";\n\ninterface ChatMessage {\n  id: string;\n  type: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\nexport default function Home() {\n  const [featuredHerbIndex, setFeaturedHerbIndex] = useState(0);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isAIOpen, setIsAIOpen] = useState(false);\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([\n    {\n      id: '1',\n      type: 'assistant',\n             content: \"Hello! I'm your herbal wellness help assistant. I can help you find herbs for specific health concerns, suggest preparation methods, or answer questions about natural remedies. What would you like to know?\",\n      timestamp: new Date()\n    }\n  ]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const latestResponseRef = useRef<HTMLDivElement>(null);\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n\n  // Scroll to top of latest AI response for better reading experience\n  useEffect(() => {\n    if (!isTyping && latestResponseRef.current && scrollContainerRef.current && chatMessages.length > 1) {\n      const latestMessage = chatMessages[chatMessages.length - 1];\n      if (latestMessage.type === 'assistant') {\n        setTimeout(() => {\n          if (scrollContainerRef.current && latestResponseRef.current) {\n            // Scroll to the AI response position\n            const responseTop = latestResponseRef.current.offsetTop - 20;\n            scrollContainerRef.current.scrollTo({\n              top: responseTop,\n              behavior: 'smooth'\n            });\n          }\n        }, 300);\n      }\n    }\n  }, [chatMessages, isTyping]);\n\n  const { data: herbs, isLoading } = useQuery<Herb[]>({\n    queryKey: [\"/api/herbs\"],\n  });\n\n  // Featured herbs rotation\n  const featuredHerbs = herbs?.filter(herb => \n    [\"Ginger\", \"Chamomile\", \"Peppermint\", \"Hibiscus\", \"Neem\", \"Moringa\"].includes(herb.name)\n  ) || [];\n\n  // Search functionality\n  const filteredHerbs = herbs?.filter(herb =>\n    herb.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    herb.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    herb.benefits.some(benefit => benefit.toLowerCase().includes(searchQuery.toLowerCase()))\n  ) || [];\n\n  useEffect(() => {\n    if (featuredHerbs.length > 0) {\n      const interval = setInterval(() => {\n        setFeaturedHerbIndex((prev) => (prev + 1) % featuredHerbs.length);\n      }, 10000); // Rotate every 10 seconds\n      return () => clearInterval(interval);\n    }\n  }, [featuredHerbs.length]);\n\n  const currentFeaturedHerb = featuredHerbs[featuredHerbIndex];\n\n  // AI Assistant functionality\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: userInput,\n      timestamp: new Date()\n    };\n\n    setChatMessages(prev => [...prev, userMessage]);\n    const currentInput = userInput;\n    setUserInput(\"\");\n    setIsTyping(true);\n\n    try {\n      // Call the real Gemini API\n      const response = await fetch('/api/ai/wellness', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: currentInput })\n      });\n\n      const data = await response.json();\n      \n      const assistantMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        type: 'assistant',\n        content: data.response || \"I'm sorry, I couldn't process your request right now. Please try again.\",\n        timestamp: new Date()\n      };\n      \n      setChatMessages(prev => [...prev, assistantMessage]);\n    } catch (error) {\n      console.error('Error calling AI API:', error);\n      const errorMessage: ChatMessage = {\n        id: (Date.now() + 2).toString(),\n        type: 'assistant',\n        content: \"I'm experiencing technical difficulties. Please try again in a moment.\",\n        timestamp: new Date()\n      };\n      setChatMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n\n  const wellnessCategories = [\n    {\n      icon: Brain,\n      title: \"Mental Health\",\n      description: \"Find calm and clarity with natural herbs\",\n      color: \"text-primary\",\n      href: \"/mental-health\"\n    },\n    {\n      icon: Zap,\n      title: \"Energy\",\n      description: \"Boost vitality and stamina naturally\",\n      color: \"text-accent\",\n      href: \"/energy\"\n    },\n    {\n      icon: Moon,\n      title: \"Sleep\",\n      description: \"Rest better with soothing herbs\",\n      color: \"text-secondary\",\n      href: \"/sleep\"\n    },\n    {\n      icon: Scale,\n      title: \"Weight Balance\",\n      description: \"Support healthy weight management\",\n      color: \"text-primary\",\n      href: \"/weight-balance\"\n    },\n    {\n      icon: Heart,\n      title: \"General Wellness\",\n      description: \"Overall health and vitality support\",\n      color: \"text-accent\",\n      href: \"/general-wellness\"\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading natural wellness...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {/* Hero Section with Search */}\n      <section className=\"relative\">\n        <div className=\"bg-gradient-to-br from-accent/20 to-secondary/30 py-16 px-4 pl-[16px] pr-[16px] pt-[10px] pb-[10px]\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n              <div className=\"order-2 lg:order-1\">\n                <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-6\" data-testid=\"text-hero-title\">\n                  Feel stronger, calmer, and more alive—naturally\n                </h1>\n                \n                {/* Search Bar */}\n                <div className=\"mb-6\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-5 w-5\" />\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Search herbs by name, benefits, or health concern...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-10 pr-4 py-3 text-lg border-2 border-primary/20 focus:border-primary\"\n                    />\n                  </div>\n                  \n                  {/* Search Results */}\n                  {searchQuery && filteredHerbs.length > 0 && (\n                    <div className=\"mt-4 bg-card rounded-lg shadow-lg border border-border max-h-64 overflow-y-auto\">\n                      {filteredHerbs.slice(0, 5).map((herb) => (\n                        <Link key={herb.id} href={`/herbs#${herb.id}`}>\n                          <div className=\"p-4 hover:bg-accent/10 cursor-pointer border-b border-border last:border-b-0\">\n                            <div className=\"flex items-center gap-3\">\n                              <span className=\"text-2xl\">{herb.emoji}</span>\n                              <div>\n                                <h3 className=\"font-semibold text-foreground\">{herb.name}</h3>\n                                <p className=\"text-sm text-muted-foreground line-clamp-2\">{herb.description}</p>\n                                <div className=\"flex flex-wrap gap-1 mt-1\">\n                                  {herb.benefits.slice(0, 2).map((benefit, index) => (\n                                    <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                      {benefit}\n                                    </Badge>\n                                  ))}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </Link>\n                      ))}\n                      {filteredHerbs.length > 5 && (\n                        <div className=\"p-4 text-center text-sm text-muted-foreground\">\n                          And {filteredHerbs.length - 5} more herbs...\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  \n                  {searchQuery && filteredHerbs.length === 0 && (\n                    <div className=\"mt-4 bg-card rounded-lg shadow-lg border border-border p-4\">\n                      <p className=\"text-muted-foreground text-center\">No herbs found matching \"{searchQuery}\"</p>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"bg-primary/90 text-primary-foreground p-6 rounded-xl mb-6\">\n                  <p className=\"text-lg italic mb-2 text-[#b58700]\">\n                    \"I have given you all these trees for you to eat...\"\n                  </p>\n                  <p className=\"text-base text-[#b58700]\">\n                    At Herbal Care Hub, we help you discover natural ways to boost energy, improve mental health, sleep better, and support wellbeing.\n                  </p>\n                </div>\n                \n                <div className=\"flex gap-4\">\n                  <Link href=\"/herbs\">\n                    <Button size=\"lg\" className=\"text-lg font-semibold px-8 py-3\" data-testid=\"button-explore-herbs\">\n                      Explore Herbs\n                    </Button>\n                  </Link>\n                  \n                  {/* AI Assistant Button */}\n                  <Dialog open={isAIOpen} onOpenChange={setIsAIOpen}>\n                    <DialogTrigger asChild>\n                      <Button size=\"lg\" variant=\"outline\" className=\"text-lg font-semibold px-8 py-3\">\n                        <Bot className=\"h-5 w-5 mr-2\" />\n                        AI Assistant\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl max-h-[80vh] flex flex-col border-2 border-primary/20 shadow-xl\">\n                      <DialogHeader>\n                                       <DialogTitle className=\"flex items-center gap-2\">\n                 <Bot className=\"h-5 w-5\" />\n                 Herbal Wellness Help Assistant\n               </DialogTitle>\n                      </DialogHeader>\n                      \n                      <div className=\"flex-1 flex flex-col min-h-0\">\n                        {/* Chat Messages */}\n                        <div ref={scrollContainerRef} className=\"flex-1 overflow-y-auto space-y-4 mb-4 p-4 bg-muted/20 rounded-lg\">\n                          {chatMessages.map((message, index) => (\n                            <div\n                              key={message.id}\n                              ref={message.type === 'assistant' && index === chatMessages.length - 1 ? latestResponseRef : null}\n                              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n                            >\n                              <div\n                                className={`max-w-[80%] p-3 rounded-lg ${\n                                  message.type === 'user'\n                                    ? 'bg-primary text-primary-foreground'\n                                    : 'bg-card border border-border'\n                                }`}\n                              >\n                                <p className=\"text-sm\">{message.content}</p>\n                                <p className=\"text-xs opacity-70 mt-1\">\n                                  {message.timestamp.toLocaleTimeString()}\n                                </p>\n                              </div>\n                            </div>\n                          ))}\n                          {isTyping && (\n                            <div className=\"flex justify-start\">\n                              <div className=\"bg-card border border-border p-3 rounded-lg\">\n                                <div className=\"flex space-x-1\">\n                                  <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\"></div>\n                                  <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                                  <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                        \n                        {/* Input Area */}\n                        <div className=\"flex gap-2\">\n                          <Textarea\n                            placeholder=\"Ask about herbs, health concerns, or preparation methods...\"\n                            value={userInput}\n                            onChange={(e) => setUserInput(e.target.value)}\n                            onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage()}\n                            className=\"flex-1 resize-none\"\n                            rows={2}\n                          />\n                          <Button\n                            onClick={handleSendMessage}\n                            disabled={!userInput.trim() || isTyping}\n                            className=\"px-4\"\n                          >\n                            <Send className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                        \n                        {/* Quick Suggestions */}\n                        <div className=\"mt-3\">\n                          <p className=\"text-xs text-muted-foreground mb-2\">Quick suggestions:</p>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {[\n                              \"Help me sleep better\",\n                              \"Boost my energy\",\n                              \"Digestive support\",\n                              \"Stress relief\"\n                            ].map((suggestion) => (\n                              <Button\n                                key={suggestion}\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setUserInput(suggestion);\n                                  setTimeout(() => handleSendMessage(), 100);\n                                }}\n                                className=\"text-xs\"\n                              >\n                                {suggestion}\n                              </Button>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </div>\n              <div className=\"order-1 lg:order-2\">\n                <div className=\"relative\">\n                  <img \n                    src={familyImage} \n                    alt=\"Family enjoying herbal tea together\"\n                    className=\"rounded-2xl w-full h-80 lg:h-96 object-cover shadow-lg\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-primary/20 to-transparent rounded-2xl\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      {/* Quick Navigation Tiles */}\n      <section className=\"py-16 px-4 bg-muted/30 pt-[10px] pb-[10px]\">\n        <div className=\"max-w-5xl mx-auto\">\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 md:gap-6\">\n            {wellnessCategories.map((category) => {\n              const IconComponent = category.icon;\n              return (\n                <Link key={category.title} href={category.href}>\n                  <div className=\"bg-card hover:bg-accent/10 transition-all duration-200 rounded-2xl p-6 text-center shadow-sm hover:shadow-md cursor-pointer\" data-testid={`card-category-${category.title.toLowerCase().replace(' ', '-')}`}>\n                    <div className=\"bg-secondary/40 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3\">\n                      <IconComponent className=\"h-8 w-8 text-foreground\" />\n                    </div>\n                    <h3 className=\"font-semibold text-sm text-foreground\">{category.title}</h3>\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n      {/* Featured Herb Spotlight */}\n      <section className=\"py-16 px-4 pt-[10px] pb-[10px]\">\n        <div className=\"max-w-6xl mx-auto\">\n          <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"text-featured-herb-title\">\n            Featured Herb\n          </h2>\n          {currentFeaturedHerb ? (\n            <div className=\"bg-card rounded-2xl p-8 shadow-lg border border-border\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\">\n                <div>\n                  <h3 className=\"text-4xl font-bold mb-4 text-foreground\" data-testid=\"text-featured-herb-name\">\n                    {currentFeaturedHerb.name}\n                  </h3>\n                  <p className=\"text-muted-foreground text-lg mb-6\" data-testid=\"text-featured-herb-description\">\n                    {currentFeaturedHerb.description}\n                  </p>\n                  <Button \n                    className=\"bg-primary text-primary-foreground px-6 py-3 rounded-xl font-semibold\" \n                    onClick={() => window.location.href = `/herbs#${currentFeaturedHerb.id}`}\n                    data-testid=\"button-learn-more-featured\"\n                  >\n                    Learn More\n                  </Button>\n                </div>\n                <div className=\"flex justify-center\">\n                  <img \n                    src={currentFeaturedHerb.imageUrl || \"/attached_assets/generated_images/Family_enjoying_herbal_tea_747c1dae.png\"} \n                    alt={currentFeaturedHerb.name}\n                    className=\"rounded-2xl w-full max-w-sm h-64 object-cover shadow-md\"\n                  />\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"bg-card rounded-2xl p-8 shadow-lg border border-border text-center\">\n              <p className=\"text-muted-foreground\">Loading featured herb...</p>\n            </div>\n          )}\n        </div>\n      </section>\n      {/* Video Section */}\n      <section className=\"py-16 px-4 bg-muted/30 pt-[10px] pb-[10px]\">\n        <div className=\"max-w-6xl mx-auto\">\n          <h2 className=\"text-2xl font-bold mb-8\" data-testid=\"text-video-title\">\n            Watch simple herb preparations\n          </h2>\n          <div className=\"bg-card rounded-2xl p-8 shadow-lg border border-border\">\n            <div className=\"aspect-video rounded-xl overflow-hidden relative\" data-testid=\"video-placeholder-ginger-tea\">\n              <img \n                src=\"/attached_assets/generated_images/Herbal_preparation_workspace_scene_4088b9aa.png\"\n                alt=\"Traditional herbal preparation workspace with fresh herbs, mortar and pestle, and natural remedies\"\n                className=\"w-full h-full object-cover\"\n              />\n              <div className=\"absolute inset-0 bg-black/20 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"bg-primary/90 rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-4\">\n                    <Play className=\"h-10 w-10 text-primary-foreground\" />\n                  </div>\n                  <p className=\"text-white text-lg font-semibold mb-2 drop-shadow-lg\">Herbal Preparation Guides</p>\n                  <p className=\"text-white/90 drop-shadow-md\">Learn traditional methods for natural remedies</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":21042},"client/src/pages/mental-health.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Brain, Heart, Leaf, BookOpen, Lightbulb } from \"lucide-react\";\nimport HerbCard from \"@/components/herbs/herb-card\";\nimport HerbDetailModal from \"@/components/herbs/herb-detail-modal\";\nimport type { Herb } from \"@/shared/schema\";\n\nexport default function MentalHealth() {\n  const [selectedHerb, setSelectedHerb] = useState<Herb | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const { data: allHerbs = [] } = useQuery<Herb[]>({\n    queryKey: [\"/api/herbs\"],\n  });\n\n  // Filter herbs for mental health\n  const mentalHealthHerbs = allHerbs.filter(herb => \n    herb.categories.includes(\"Mental Health\")\n  );\n\n  const handleHerbClick = (herb: Herb) => {\n    setSelectedHerb(herb);\n    setIsModalOpen(true);\n  };\n\n  const mentalHealthTips = [\n    {\n      icon: Brain,\n      title: \"Mindful Breathing\",\n      description: \"Practice deep breathing exercises with chamomile or lavender tea to calm your mind.\",\n      color: \"text-blue-600\"\n    },\n    {\n      icon: Heart,\n      title: \"Emotional Balance\",\n      description: \"Use herbs like African sage and peppermint to support emotional stability and clarity.\",\n      color: \"text-pink-600\"\n    },\n    {\n      icon: Leaf,\n      title: \"Natural Calming\",\n      description: \"Incorporate calming herbs into your daily routine for sustained mental wellness.\",\n      color: \"text-green-600\"\n    }\n  ];\n\n  const dailyPractices = [\n    \"Start your day with a calming herbal tea\",\n    \"Practice 10 minutes of mindful meditation\",\n    \"Take short breaks to breathe deeply\",\n    \"Create a peaceful evening routine\",\n    \"Limit screen time before bed\",\n    \"Connect with nature regularly\"\n  ];\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center\">\n              <Brain className=\"h-10 w-10 text-blue-600\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold mb-6 text-blue-600\" data-testid=\"text-page-title\">\n            Mental Health & Wellness\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Discover natural herbs and practices that support mental clarity, emotional balance, and inner peace.\n          </p>\n        </div>\n\n        {/* Key Benefits */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          {mentalHealthTips.map((tip, index) => {\n            const IconComponent = tip.icon;\n            return (\n              <Card key={index} className=\"text-center\">\n                <CardContent className=\"pt-6\">\n                  <IconComponent className={`h-12 w-12 mx-auto mb-4 ${tip.color}`} />\n                  <h3 className=\"text-xl font-semibold mb-2\">{tip.title}</h3>\n                  <p className=\"text-muted-foreground\">{tip.description}</p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Featured Herbs */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Herbs for Mental Wellness</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {mentalHealthHerbs.map((herb) => (\n              <div key={herb.id} onClick={() => handleHerbClick(herb)}>\n                <HerbCard herb={herb} />\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Daily Practices */}\n        <Card className=\"mb-16\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-6 w-6\" />\n              Daily Mental Wellness Practices\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {dailyPractices.map((practice, index) => (\n                <div key={index} className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                  <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\n                  <span className=\"text-sm\">{practice}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Safety & Guidance */}\n        <Card className=\"bg-blue-50 border-blue-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-blue-800\">\n              <Lightbulb className=\"h-6 w-6\" />\n              Important Guidance\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 text-blue-800\">\n              <p>\n                <strong>Professional Support:</strong> These herbs complement but don't replace professional mental health care. \n                If you're experiencing persistent mental health challenges, please seek support from qualified professionals.\n              </p>\n              <p>\n                <strong>Individual Response:</strong> Everyone responds differently to herbs. Start with small amounts and \n                observe how your body and mind respond.\n              </p>\n              <p>\n                <strong>Consistency:</strong> Mental wellness is a journey. Regular, gentle practices often work better than \n                occasional intensive use.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Herb Detail Modal */}\n        <HerbDetailModal\n          herb={selectedHerb}\n          isOpen={isModalOpen}\n          onClose={() => {\n            setIsModalOpen(false);\n            setSelectedHerb(null);\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\n","size_bytes":5940},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/privacy-policy.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Shield, Eye, Lock, Users, Mail, Calendar, FileText } from \"lucide-react\";\n\nexport default function PrivacyPolicy() {\n  const lastUpdated = \"December 2024\";\n\n  const dataTypes = [\n    {\n      icon: Users,\n      title: \"Personal Information\",\n      description: \"Name, email address, and any information you voluntarily provide when using our community features.\",\n      examples: [\"Name\", \"Email address\", \"Community posts\", \"Comments\"]\n    },\n    {\n      icon: Eye,\n      title: \"Usage Information\",\n      description: \"Information about how you interact with our website and services.\",\n      examples: [\"Pages visited\", \"Time spent on site\", \"Search queries\", \"Herb preferences\"]\n    },\n    {\n      icon: FileText,\n      title: \"Content Information\",\n      description: \"Information you share through our community features and wellness tracking.\",\n      examples: [\"Wellness posts\", \"Herb reviews\", \"Health goals\", \"Progress updates\"]\n    }\n  ];\n\n  const dataUsage = [\n    {\n      purpose: \"Service Provision\",\n      description: \"To provide and maintain our herbal wellness platform and community features.\"\n    },\n    {\n      purpose: \"Personalization\",\n      description: \"To customize your experience and provide relevant herbal recommendations.\"\n    },\n    {\n      purpose: \"Communication\",\n      description: \"To respond to your inquiries and send important updates about our services.\"\n    },\n    {\n      purpose: \"Community Features\",\n      description: \"To enable community interactions, wellness sharing, and peer support.\"\n    },\n    {\n      purpose: \"Analytics\",\n      description: \"To understand how our services are used and improve user experience.\"\n    }\n  ];\n\n  const dataProtection = [\n    {\n      icon: Lock,\n      title: \"Encryption\",\n      description: \"All data is encrypted in transit and at rest using industry-standard protocols.\"\n    },\n    {\n      icon: Shield,\n      title: \"Access Controls\",\n      description: \"Strict access controls ensure only authorized personnel can access your data.\"\n    },\n    {\n      icon: Eye,\n      title: \"Monitoring\",\n      description: \"Continuous monitoring and security audits to protect against unauthorized access.\"\n    }\n  ];\n\n  const userRights = [\n    {\n      right: \"Access\",\n      description: \"Request a copy of the personal data we hold about you.\"\n    },\n    {\n      right: \"Correction\",\n      description: \"Request correction of inaccurate or incomplete personal data.\"\n    },\n    {\n      right: \"Deletion\",\n      description: \"Request deletion of your personal data under certain circumstances.\"\n    },\n    {\n      right: \"Portability\",\n      description: \"Request transfer of your data to another service provider.\"\n    },\n    {\n      right: \"Objection\",\n      description: \"Object to processing of your personal data for certain purposes.\"\n    },\n    {\n      right: \"Restriction\",\n      description: \"Request restriction of processing under certain circumstances.\"\n    }\n  ];\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center\">\n              <Shield className=\"h-10 w-10 text-blue-600\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold mb-6 text-blue-600\" data-testid=\"text-page-title\">\n            Privacy Policy\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Your privacy is important to us. This policy explains how we collect, use, and protect your information.\n          </p>\n          <p className=\"text-sm text-muted-foreground mt-4\">\n            Last updated: {lastUpdated}\n          </p>\n        </div>\n\n        {/* Introduction */}\n        <Card className=\"mb-16\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-6 w-6\" />\n              Introduction\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                Herbal Care Hub (\"we,\" \"our,\" or \"us\") is committed to protecting your privacy and personal information. \n                This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you \n                use our website and services.\n              </p>\n              <p>\n                By using our services, you agree to the collection and use of information in accordance with this policy. \n                If you do not agree with our policies and practices, please do not use our services.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Information We Collect */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Information We Collect</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {dataTypes.map((type, index) => {\n              const IconComponent = type.icon;\n              return (\n                <Card key={index} className=\"text-center\">\n                  <CardContent className=\"pt-6\">\n                    <IconComponent className=\"h-12 w-12 mx-auto mb-4 text-blue-600\" />\n                    <h3 className=\"text-xl font-semibold mb-2\">{type.title}</h3>\n                    <p className=\"text-muted-foreground mb-4\">{type.description}</p>\n                    <div className=\"text-sm\">\n                      <p className=\"font-medium mb-2\">Examples:</p>\n                      <ul className=\"space-y-1\">\n                        {type.examples.map((example, idx) => (\n                          <li key={idx} className=\"text-muted-foreground\">• {example}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* How We Use Information */}\n        <Card className=\"mb-16\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Eye className=\"h-6 w-6\" />\n              How We Use Your Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {dataUsage.map((usage, index) => (\n                <div key={index} className=\"flex items-start gap-4 p-4 bg-muted rounded-lg\">\n                  <div className=\"w-2 h-2 bg-blue-600 rounded-full mt-2\"></div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">{usage.purpose}</h4>\n                    <p className=\"text-muted-foreground text-sm\">{usage.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Data Protection */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">How We Protect Your Data</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {dataProtection.map((protection, index) => {\n              const IconComponent = protection.icon;\n              return (\n                <Card key={index} className=\"text-center\">\n                  <CardContent className=\"pt-6\">\n                    <IconComponent className=\"h-12 w-12 mx-auto mb-4 text-green-600\" />\n                    <h3 className=\"text-xl font-semibold mb-2\">{protection.title}</h3>\n                    <p className=\"text-muted-foreground\">{protection.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Your Rights */}\n        <Card className=\"mb-16\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-6 w-6\" />\n              Your Privacy Rights\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-6\">\n              You have certain rights regarding your personal information. To exercise these rights, please contact us.\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {userRights.map((right, index) => (\n                <div key={index} className=\"flex items-start gap-3 p-3 bg-muted rounded-lg\">\n                  <div className=\"w-2 h-2 bg-green-600 rounded-full mt-2\"></div>\n                  <div>\n                    <h4 className=\"font-semibold text-sm\">{right.right}</h4>\n                    <p className=\"text-muted-foreground text-xs\">{right.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Cookies and Tracking */}\n        <Card className=\"mb-16\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Eye className=\"h-6 w-6\" />\n              Cookies and Tracking\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                We use cookies and similar tracking technologies to enhance your experience on our website. \n                Cookies are small data files stored on your device that help us:\n              </p>\n              <ul className=\"space-y-2 ml-4\">\n                <li>• Remember your preferences and settings</li>\n                <li>• Understand how you use our website</li>\n                <li>• Improve our services and user experience</li>\n                <li>• Provide personalized content and recommendations</li>\n              </ul>\n              <p>\n                You can control cookie settings through your browser preferences. However, disabling cookies \n                may affect the functionality of our website.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Third-Party Services */}\n        <Card className=\"mb-16\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-6 w-6\" />\n              Third-Party Services\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                We may use third-party services to help us provide and improve our services. These services may collect \n                information about you in accordance with their own privacy policies. We carefully select our partners \n                and ensure they meet our privacy standards.\n              </p>\n              <p>\n                Common third-party services we use include:\n              </p>\n              <ul className=\"space-y-2 ml-4\">\n                <li>• Analytics services to understand website usage</li>\n                <li>• Content delivery networks for faster loading</li>\n                <li>• Email services for communications</li>\n                <li>• Security services to protect against threats</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact Information */}\n        <Card className=\"bg-blue-50 border-blue-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-blue-800\">\n              <Mail className=\"h-6 w-6\" />\n              Contact Us\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 text-blue-800\">\n              <p>\n                If you have any questions about this Privacy Policy or our data practices, please contact us:\n              </p>\n              <div className=\"space-y-2\">\n                <p><strong>Email:</strong> privacy@herbalcarehub.com</p>\n                <p><strong>Address:</strong> Herbal Care Hub Privacy Team</p>\n                <p><strong>Response Time:</strong> We will respond to your inquiry within 30 days</p>\n              </div>\n              <p className=\"mt-4\">\n                We may update this Privacy Policy from time to time. We will notify you of any changes by \n                posting the new Privacy Policy on this page and updating the \"Last updated\" date.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12607},"client/src/pages/safety-guidelines.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AlertTriangle, Shield, Heart, BookOpen, Users, Phone } from \"lucide-react\";\n\nexport default function SafetyGuidelines() {\n  const safetyPrinciples = [\n    {\n      icon: AlertTriangle,\n      title: \"Consult Healthcare Providers\",\n      description: \"Always consult with qualified healthcare providers before using herbs, especially if you have existing medical conditions or are taking medications.\",\n      color: \"text-red-600\"\n    },\n    {\n      icon: Shield,\n      title: \"Start Small\",\n      description: \"Begin with small amounts and gradually increase as needed. Monitor your body's response and discontinue use if adverse effects occur.\",\n      color: \"text-blue-600\"\n    },\n    {\n      icon: Heart,\n      title: \"Know Your Body\",\n      description: \"Understand your individual health conditions, allergies, and sensitivities. What works for others may not work for you.\",\n      color: \"text-green-600\"\n    }\n  ];\n\n  const safetyChecklist = [\n    \"Research the herb thoroughly before use\",\n    \"Check for potential drug interactions\",\n    \"Verify the quality and source of herbs\",\n    \"Start with the lowest recommended dose\",\n    \"Monitor for any adverse reactions\",\n    \"Keep a record of herbs you're using\",\n    \"Store herbs properly in cool, dry places\",\n    \"Check expiration dates regularly\"\n  ];\n\n  const warningSigns = [\n    \"Allergic reactions (rash, itching, swelling)\",\n    \"Digestive upset (nausea, vomiting, diarrhea)\",\n    \"Dizziness or lightheadedness\",\n    \"Changes in heart rate or blood pressure\",\n    \"Unusual fatigue or weakness\",\n    \"Mood changes or irritability\",\n    \"Sleep disturbances\",\n    \"Headaches or migraines\"\n  ];\n\n  const specialPopulations = [\n    {\n      group: \"Pregnant & Breastfeeding Women\",\n      considerations: [\n        \"Many herbs are not safe during pregnancy\",\n        \"Some herbs can affect milk supply\",\n        \"Always consult healthcare provider first\",\n        \"Avoid herbs with hormonal effects\"\n      ]\n    },\n    {\n      group: \"Children\",\n      considerations: [\n        \"Children's bodies process herbs differently\",\n        \"Dosages must be adjusted for age and weight\",\n        \"Some herbs are not safe for children\",\n        \"Always consult pediatric healthcare provider\"\n      ]\n    },\n    {\n      group: \"Elderly\",\n      considerations: [\n        \"May have multiple health conditions\",\n        \"Often taking multiple medications\",\n        \"Higher risk of drug interactions\",\n        \"May need lower dosages\"\n      ]\n    },\n    {\n      group: \"People with Chronic Conditions\",\n      considerations: [\n        \"Diabetes, heart disease, kidney disease\",\n        \"Autoimmune conditions\",\n        \"Mental health conditions\",\n        \"Cancer or cancer treatment history\"\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center\">\n              <Shield className=\"h-10 w-10 text-red-600\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold mb-6 text-red-600\" data-testid=\"text-page-title\">\n            Safety Guidelines\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Essential safety information for responsible herbal use. Your health and safety are our top priority.\n          </p>\n        </div>\n\n        {/* Important Notice */}\n        <Card className=\"mb-16 bg-red-50 border-red-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-red-800\">\n              <AlertTriangle className=\"h-6 w-6\" />\n              Important Medical Disclaimer\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 text-red-800\">\n              <p>\n                <strong>This information is for educational purposes only and is not intended as medical advice.</strong> \n                Herbal remedies should not replace professional medical treatment.\n              </p>\n              <p>\n                Always consult with qualified healthcare providers before using herbs, especially if you have \n                existing medical conditions, are pregnant, breastfeeding, or taking medications.\n              </p>\n              <p>\n                If you experience any adverse reactions, discontinue use immediately and seek medical attention.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Safety Principles */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Core Safety Principles</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {safetyPrinciples.map((principle, index) => {\n              const IconComponent = principle.icon;\n              return (\n                <Card key={index} className=\"text-center\">\n                  <CardContent className=\"pt-6\">\n                    <IconComponent className={`h-12 w-12 mx-auto mb-4 ${principle.color}`} />\n                    <h3 className=\"text-xl font-semibold mb-2\">{principle.title}</h3>\n                    <p className=\"text-muted-foreground\">{principle.description}</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Safety Checklist */}\n        <Card className=\"mb-16\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-6 w-6\" />\n              Pre-Use Safety Checklist\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {safetyChecklist.map((item, index) => (\n                <div key={index} className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                  <div className=\"w-2 h-2 bg-green-600 rounded-full\"></div>\n                  <span className=\"text-sm\">{item}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Warning Signs */}\n        <Card className=\"mb-16\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-orange-600\">\n              <AlertTriangle className=\"h-6 w-6\" />\n              Warning Signs to Watch For\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              If you experience any of these symptoms while using herbs, discontinue use immediately and consult a healthcare provider:\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {warningSigns.map((sign, index) => (\n                <div key={index} className=\"flex items-center gap-3 p-3 bg-orange-50 rounded-lg border border-orange-200\">\n                  <div className=\"w-2 h-2 bg-orange-600 rounded-full\"></div>\n                  <span className=\"text-sm\">{sign}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Special Populations */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Special Considerations</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {specialPopulations.map((population, index) => (\n              <Card key={index} className=\"p-6\">\n                <CardHeader className=\"pb-4\">\n                  <h3 className=\"text-lg font-semibold text-blue-600\">{population.group}</h3>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {population.considerations.map((consideration, idx) => (\n                      <li key={idx} className=\"flex items-start gap-2 text-sm text-muted-foreground\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\n                        <span>{consideration}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Emergency Information */}\n        <Card className=\"bg-blue-50 border-blue-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-blue-800\">\n              <Phone className=\"h-6 w-6\" />\n              Emergency Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 text-blue-800\">\n              <p>\n                <strong>In case of emergency or severe adverse reaction:</strong>\n              </p>\n              <ul className=\"space-y-2 ml-4\">\n                <li>• Call emergency services (911) immediately</li>\n                <li>• Contact your local poison control center</li>\n                <li>• Bring the herb or product with you to the emergency room</li>\n                <li>• Inform healthcare providers about all herbs and medications you're taking</li>\n              </ul>\n              <p className=\"mt-4\">\n                <strong>Poison Control Hotline:</strong> 1-800-222-1222 (US)\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9548},"client/src/pages/sleep.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Moon, Bed, Star, BookOpen, Clock, Lightbulb } from \"lucide-react\";\nimport HerbCard from \"@/components/herbs/herb-card\";\nimport HerbDetailModal from \"@/components/herbs/herb-detail-modal\";\nimport type { Herb } from \"@/shared/schema\";\n\nexport default function Sleep() {\n  const [selectedHerb, setSelectedHerb] = useState<Herb | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const { data: allHerbs = [] } = useQuery<Herb[]>({\n    queryKey: [\"/api/herbs\"],\n  });\n\n  // Filter herbs for sleep\n  const sleepHerbs = allHerbs.filter(herb => \n    herb.categories.includes(\"Sleep\")\n  );\n\n  const handleHerbClick = (herb: Herb) => {\n    setSelectedHerb(herb);\n    setIsModalOpen(true);\n  };\n\n  const sleepTips = [\n    {\n      icon: Moon,\n      title: \"Natural Relaxation\",\n      description: \"Use calming herbs like chamomile and African sage to prepare your mind for sleep.\",\n      color: \"text-indigo-600\"\n    },\n    {\n      icon: Bed,\n      title: \"Sleep Ritual\",\n      description: \"Create a consistent bedtime routine with soothing herbal teas and practices.\",\n      color: \"text-purple-600\"\n    },\n    {\n      icon: Star,\n      title: \"Quality Rest\",\n      description: \"Support deeper, more restorative sleep with gentle herbal remedies.\",\n      color: \"text-blue-600\"\n    }\n  ];\n\n  const bedtimeRitual = [\n    \"Dim lights 1 hour before bed\",\n    \"Drink calming herbal tea (chamomile, African sage)\",\n    \"Practice gentle breathing exercises\",\n    \"Read a book or listen to calming music\",\n    \"Avoid screens and stimulating activities\",\n    \"Create a cool, dark, quiet sleep environment\"\n  ];\n\n  const sleepTimeline = [\n    { time: \"8:00 PM\", activity: \"Begin winding down\", herb: \"Chamomile tea\" },\n    { time: \"9:00 PM\", activity: \"Relaxation practice\", herb: \"African sage steam\" },\n    { time: \"9:30 PM\", activity: \"Bedtime preparation\", herb: \"Lavender aromatherapy\" },\n    { time: \"10:00 PM\", activity: \"Sleep time\", herb: \"Gentle breathing\" }\n  ];\n\n  const sleepEnhancers = [\n    \"Keep bedroom cool (65-68°F/18-20°C)\",\n    \"Use blackout curtains\",\n    \"White noise machine or nature sounds\",\n    \"Comfortable, supportive mattress\",\n    \"Regular sleep schedule\",\n    \"Limit caffeine after 2 PM\"\n  ];\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"w-20 h-20 bg-indigo-100 rounded-full flex items-center justify-center\">\n              <Moon className=\"h-10 w-10 text-indigo-600\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold mb-6 text-indigo-600\" data-testid=\"text-page-title\">\n            Sleep & Relaxation\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Discover natural herbs and practices that promote restful sleep, deep relaxation, and peaceful nights.\n          </p>\n        </div>\n\n        {/* Key Benefits */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          {sleepTips.map((tip, index) => {\n            const IconComponent = tip.icon;\n            return (\n              <Card key={index} className=\"text-center\">\n                <CardContent className=\"pt-6\">\n                  <IconComponent className={`h-12 w-12 mx-auto mb-4 ${tip.color}`} />\n                  <h3 className=\"text-xl font-semibold mb-2\">{tip.title}</h3>\n                  <p className=\"text-muted-foreground\">{tip.description}</p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Featured Herbs */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Herbs for Sleep & Relaxation</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {sleepHerbs.map((herb) => (\n              <div key={herb.id} onClick={() => handleHerbClick(herb)}>\n                <HerbCard herb={herb} />\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Bedtime Ritual */}\n        <Card className=\"mb-16\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-6 w-6\" />\n              Bedtime Ritual\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {bedtimeRitual.map((ritual, index) => (\n                <div key={index} className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                  <div className=\"w-2 h-2 bg-indigo-600 rounded-full\"></div>\n                  <span className=\"text-sm\">{ritual}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sleep Timeline */}\n        <Card className=\"mb-16\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-6 w-6\" />\n              Sleep Preparation Timeline\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {sleepTimeline.map((timing, index) => (\n                <div key={index} className=\"p-4 border rounded-lg\">\n                  <div className=\"font-semibold text-indigo-600 mb-2\">{timing.time}</div>\n                  <div className=\"text-sm text-muted-foreground mb-2\">{timing.activity}</div>\n                  <Badge variant=\"outline\" className=\"text-xs\">{timing.herb}</Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sleep Environment */}\n        <Card className=\"mb-16\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Bed className=\"h-6 w-6\" />\n              Sleep Environment Optimization\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {sleepEnhancers.map((enhancer, index) => (\n                <div key={index} className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                  <div className=\"w-2 h-2 bg-purple-600 rounded-full\"></div>\n                  <span className=\"text-sm\">{enhancer}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sleep Tips */}\n        <Card className=\"bg-indigo-50 border-indigo-200\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-indigo-800\">\n              <Lightbulb className=\"h-6 w-6\" />\n              Sleep Enhancement Tips\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 text-indigo-800\">\n              <p>\n                <strong>Consistency is Key:</strong> Go to bed and wake up at the same time every day, even on weekends.\n              </p>\n              <p>\n                <strong>Herb Timing:</strong> Take sleep-supporting herbs 30-60 minutes before bedtime for best results.\n              </p>\n              <p>\n                <strong>Mind-Body Connection:</strong> Combine herbs with relaxation techniques like meditation or gentle yoga.\n              </p>\n              <p>\n                <strong>Patience:</strong> It may take 1-2 weeks to establish a new sleep routine. Be patient with the process.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Herb Detail Modal */}\n        <HerbDetailModal\n          herb={selectedHerb}\n          isOpen={isModalOpen}\n          onClose={() => {\n            setIsModalOpen(false);\n            setSelectedHerb(null);\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\n","size_bytes":8120},"client/src/pages/videos.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Play, Clock, ChefHat, List } from \"lucide-react\";\n\nexport default function Videos() {\n  const videos = [\n    {\n      id: \"turmeric-arthritis\",\n      title: \"Turmeric Remedy for Arthritis Pain\",\n      description: \"Natural anti-inflammatory remedy using turmeric to reduce joint pain and stiffness.\",\n      thumbnail: \"/attached_assets/generated_images/Fresh_turmeric_root_powder_2c202d36.png\",\n      duration: \"4:20\",\n      difficulty: \"Easy\",\n      youtubeUrl: null,\n      ingredients: [\"Turmeric powder\", \"Warm milk or water\", \"Black pepper\", \"Honey\"],\n      steps: [\n        \"Mix 1 tsp turmeric powder with warm milk\",\n        \"Add a pinch of black pepper for better absorption\",\n        \"Stir in honey for taste\",\n        \"Drink twice daily for best results\",\n        \"Consult your doctor for persistent pain\"\n      ]\n    },\n    {\n      id: \"garlic-cholesterol\",\n      title: \"Garlic for High Cholesterol\",\n      description: \"Learn how to use garlic as a natural remedy to help manage cholesterol levels.\",\n      thumbnail: \"/attached_assets/generated_images/Fresh_garlic_cloves_peeled_566ff3c0.png\",\n      duration: \"3:45\",\n      difficulty: \"Easy\",\n      youtubeUrl: null,\n      ingredients: [\"Fresh garlic cloves\", \"Warm water\", \"Lemon juice (optional)\"],\n      steps: [\n        \"Crush 2-3 fresh garlic cloves\",\n        \"Let sit for 10 minutes to activate compounds\",\n        \"Swallow with warm water on empty stomach\",\n        \"Add lemon juice if desired\",\n        \"Use for 2-3 weeks, then take a break\"\n      ]\n    },\n    {\n      id: \"aloe-acne\",\n      title: \"Aloe Vera for Clear Skin & Acne\",\n      description: \"Natural skincare remedy using aloe vera to treat acne and achieve clear, healthy skin.\",\n      thumbnail: \"/attached_assets/generated_images/Fresh_aloe_vera_plant_37ed8ded.png\",\n      duration: \"5:15\",\n      difficulty: \"Easy\",\n      youtubeUrl: null,\n      ingredients: [\"Fresh aloe vera gel\", \"Tea tree oil (optional)\", \"Clean cloth\"],\n      steps: [\n        \"Extract fresh gel from aloe vera leaf\",\n        \"Apply thin layer to clean face\",\n        \"Add 1 drop tea tree oil for stubborn acne\",\n        \"Leave for 15-20 minutes\",\n        \"Rinse with cool water, pat dry\"\n      ]\n    },\n    {\n      id: \"onion-hair-growth\",\n      title: \"Onion Juice for Hair Growth\",\n      description: \"Traditional remedy using onion juice to stimulate hair growth and reduce hair loss.\",\n      thumbnail: \"/attached_assets/generated_images/Fresh_red_onions_sliced_bb2a7403.png\",\n      duration: \"6:30\",\n      difficulty: \"Medium\",\n      youtubeUrl: null,\n      ingredients: [\"Medium onion\", \"Coconut oil\", \"Essential oil for scent\"],\n      steps: [\n        \"Grate or blend 1 medium onion\",\n        \"Strain to extract pure juice\",\n        \"Mix with 1 tbsp coconut oil\",\n        \"Massage into scalp for 5 minutes\",\n        \"Leave for 30 minutes, then shampoo thoroughly\"\n      ]\n    },\n    {\n      id: \"honey-cough\",\n      title: \"Honey & Ginger Cough Remedy\",\n      description: \"Soothing natural cough syrup using honey and ginger to relieve throat irritation.\",\n      thumbnail: \"/attached_assets/generated_images/Raw_honey_jar_ginger_63a42cf4.png\",\n      duration: \"4:00\",\n      difficulty: \"Easy\",\n      youtubeUrl: null,\n      ingredients: [\"Raw honey\", \"Fresh ginger\", \"Warm water\", \"Lemon juice\"],\n      steps: [\n        \"Grate 1 tsp fresh ginger\",\n        \"Mix with 2 tbsp raw honey\",\n        \"Add lemon juice and warm water\",\n        \"Take 1 tsp every 2-3 hours\",\n        \"Best taken before meals\"\n      ]\n    },\n    {\n      id: \"cucumber-dark-circles\",\n      title: \"Cucumber for Dark Under-Eye Circles\",\n      description: \"Simple and effective remedy to reduce dark circles and puffiness around the eyes.\",\n      thumbnail: \"/attached_assets/generated_images/Fresh_cucumber_slices_cooling_f0ef1ea8.png\",\n      duration: \"2:45\",\n      difficulty: \"Easy\",\n      youtubeUrl: null,\n      ingredients: [\"Fresh cucumber\", \"Rose water\", \"Cotton pads\"],\n      steps: [\n        \"Slice cucumber into thick rounds\",\n        \"Chill in refrigerator for 30 minutes\",\n        \"Soak cotton pads in rose water\",\n        \"Place cucumber slices on closed eyes\",\n        \"Relax for 15-20 minutes daily\"\n      ]\n    },\n    {\n      id: \"acv-acid-reflux\",\n      title: \"Apple Cider Vinegar for Acid Reflux\",\n      description: \"Natural remedy using apple cider vinegar to reduce heartburn and acid reflux symptoms.\",\n      thumbnail: \"/attached_assets/generated_images/Apple_cider_vinegar_remedy_8b948f09.png\",\n      duration: \"3:30\",\n      difficulty: \"Easy\",\n      youtubeUrl: null,\n      ingredients: [\"Apple cider vinegar\", \"Warm water\", \"Honey (optional)\"],\n      steps: [\n        \"Mix 1-2 tbsp apple cider vinegar with warm water\",\n        \"Add honey to taste if desired\",\n        \"Drink 20 minutes before meals\",\n        \"Start with small amounts to test tolerance\",\n        \"Use with the 'mother' for best results\"\n      ]\n    },\n    {\n      id: \"lemon-teeth-whitening\",\n      title: \"Lemon & Baking Soda Teeth Whitening\",\n      description: \"Natural teeth whitening remedy using lemon juice and baking soda for brighter smiles.\",\n      thumbnail: \"/attached_assets/generated_images/Lemon_baking_soda_whitening_04bc34a7.png\",\n      duration: \"2:15\",\n      difficulty: \"Easy\",\n      youtubeUrl: null,\n      ingredients: [\"Fresh lemon juice\", \"Baking soda\", \"Soft toothbrush\", \"Water\"],\n      steps: [\n        \"Mix equal parts lemon juice and baking soda\",\n        \"Apply gently to teeth with soft brush\",\n        \"Leave for 1-2 minutes maximum\",\n        \"Rinse thoroughly with water\",\n        \"Use only once per week to protect enamel\"\n      ]\n    },\n    {\n      id: \"coconut-oil-diabetes\",\n      title: \"Coconut Oil & Cinnamon for Blood Sugar\",\n      description: \"Natural remedy to help manage blood sugar levels using coconut oil and cinnamon.\",\n      thumbnail: \"/attached_assets/generated_images/Coconut_oil_cinnamon_diabetes_24d32a1a.png\",\n      duration: \"4:45\",\n      difficulty: \"Easy\",\n      youtubeUrl: null,\n      ingredients: [\"Virgin coconut oil\", \"Ceylon cinnamon\", \"Warm water\"],\n      steps: [\n        \"Take 1 tbsp virgin coconut oil daily\",\n        \"Add 1/2 tsp Ceylon cinnamon to meals\",\n        \"Mix cinnamon with warm water as tea\",\n        \"Take coconut oil before meals\",\n        \"Monitor blood sugar and consult doctor\"\n      ]\n    },\n    {\n      id: \"mint-ginger-nausea\",\n      title: \"Mint & Ginger for Nausea Relief\",\n      description: \"Quick natural remedy to relieve nausea and morning sickness using mint and ginger.\",\n      thumbnail: \"/attached_assets/generated_images/Mint_ginger_nausea_remedy_dd650feb.png\",\n      duration: \"3:45\",\n      difficulty: \"Easy\",\n      youtubeUrl: null,\n      ingredients: [\"Fresh mint leaves\", \"Fresh ginger\", \"Hot water\", \"Lemon\"],\n      steps: [\n        \"Steep fresh mint leaves in hot water\",\n        \"Add thin ginger slices to the tea\",\n        \"Let brew for 5-7 minutes\",\n        \"Add fresh lemon juice\",\n        \"Sip slowly when feeling nauseous\"\n      ]\n    },\n    {\n      id: \"chamomile-anxiety\",\n      title: \"Chamomile & Green Tea for Stress Relief\",\n      description: \"Calming herbal blend to reduce stress and anxiety naturally using chamomile and green tea.\",\n      thumbnail: \"/attached_assets/generated_images/Green_tea_chamomile_stress_b57eeb53.png\",\n      duration: \"4:20\",\n      difficulty: \"Easy\",\n      youtubeUrl: null,\n      ingredients: [\"Chamomile flowers\", \"Green tea\", \"Honey\", \"Warm water\"],\n      steps: [\n        \"Combine equal parts chamomile and green tea\",\n        \"Steep in warm (not boiling) water\",\n        \"Brew for 3-5 minutes to avoid bitterness\",\n        \"Add honey for natural sweetness\",\n        \"Drink 2-3 times daily during stressful periods\"\n      ]\n    },\n    {\n      id: \"banana-oats-constipation\",\n      title: \"Banana & Oats for Natural Constipation Relief\",\n      description: \"Gentle digestive remedy using bananas and oats to relieve constipation naturally.\",\n      thumbnail: \"/attached_assets/generated_images/Banana_oats_constipation_remedy_4c9229c2.png\",\n      duration: \"5:00\",\n      difficulty: \"Easy\",\n      youtubeUrl: null,\n      ingredients: [\"Ripe bananas\", \"Rolled oats\", \"Water or milk\", \"Honey\"],\n      steps: [\n        \"Mash 1 ripe banana in a bowl\",\n        \"Add 1/2 cup rolled oats\",\n        \"Pour warm water or milk to desired consistency\",\n        \"Add honey for sweetness\",\n        \"Eat first thing in the morning on empty stomach\"\n      ]\n    }\n  ];\n\n  const [selectedVideo, setSelectedVideo] = useState<any>(null);\n  const [showVideoModal, setShowVideoModal] = useState(false);\n\n  const handleVideoClick = (video: any) => {\n    setSelectedVideo(video);\n    setShowVideoModal(true);\n  };\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <h1 className=\"text-4xl font-bold text-center mb-8\" data-testid=\"text-page-title\">\n          Natural Home Remedies Videos\n        </h1>\n        <p className=\"text-lg text-muted-foreground text-center mb-8 max-w-2xl mx-auto\">\n          Practical home remedies for common health conditions using natural ingredients\n        </p>\n        <div className=\"bg-green-100 border border-green-300 rounded-lg p-4 max-w-3xl mx-auto mb-12\">\n          <p className=\"text-green-800 text-sm text-center\">\n            📺 <strong>Inspired by SUSANA HOME REMEDIES</strong> - Educational content for natural wellness.<br />\n            <em>Always consult healthcare professionals before trying new remedies.</em>\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {videos.map((video) => (\n            <Card \n              key={video.id} \n              className=\"overflow-hidden cursor-pointer hover:shadow-lg transition-shadow\"\n              onClick={() => handleVideoClick(video)}\n              data-testid={`card-video-${video.id}`}\n            >\n              <div className=\"aspect-video bg-muted flex items-center justify-center relative overflow-hidden\">\n                <img \n                  src={video.thumbnail} \n                  alt={video.title}\n                  className=\"w-full h-full object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-black/20 hover:bg-black/30 transition-colors flex items-center justify-center\">\n                  <Play className=\"h-16 w-16 text-white opacity-90\" />\n                </div>\n                <div className=\"absolute top-2 right-2\">\n                  <Badge variant=\"secondary\" className=\"text-xs\">{video.difficulty}</Badge>\n                </div>\n                <div className=\"absolute bottom-2 left-2\">\n                  <Badge variant=\"outline\" className=\"text-xs bg-black/50 text-white border-white/20\">\n                    {video.duration}\n                  </Badge>\n                </div>\n              </div>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-semibold mb-2\" data-testid={`text-video-title-${video.id}`}>\n                  {video.title}\n                </h3>\n                <p className=\"text-muted-foreground text-sm\" data-testid={`text-video-description-${video.id}`}>\n                  {video.description}\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"mt-12 text-center\">\n          <div className=\"bg-muted p-8 rounded-lg\">\n            <h3 className=\"text-xl font-semibold mb-4\">More Videos Coming Soon!</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              We're working on creating comprehensive video guides for all our featured herbs and preparation methods.\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Subscribe to our newsletter to be notified when new videos are available.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Video Detail Modal */}\n      {selectedVideo && (\n        <Dialog open={showVideoModal} onOpenChange={setShowVideoModal}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"text-2xl\">{selectedVideo.title}</DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"space-y-6\">\n                          <div className=\"aspect-video bg-muted rounded-lg overflow-hidden\">\n              {selectedVideo.youtubeUrl ? (\n                <iframe\n                  src={selectedVideo.youtubeUrl}\n                  title={selectedVideo.title}\n                  className=\"w-full h-full\"\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                />\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center relative\">\n                  <img \n                    src={selectedVideo.thumbnail} \n                    alt={selectedVideo.title}\n                    className=\"w-full h-full object-cover\"\n                  />\n                  <div className=\"absolute inset-0 bg-black/40 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <Play className=\"h-16 w-16 text-white mb-4 mx-auto\" />\n                      <p className=\"text-lg font-semibold text-white\">Educational Video</p>\n                      <p className=\"text-sm text-white/80\">Follow the ingredient list and preparation steps below for this natural home remedy</p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                    <ChefHat className=\"h-5 w-5\" />\n                    Ingredients\n                  </h3>\n                  <ul className=\"list-disc list-inside space-y-2 text-muted-foreground\">\n                    {selectedVideo.ingredients.map((ingredient: string, index: number) => (\n                      <li key={index}>{ingredient}</li>\n                    ))}\n                  </ul>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                    <Clock className=\"h-5 w-5\" />\n                    Video Details\n                  </h3>\n                  <div className=\"space-y-2 text-muted-foreground\">\n                    <p><strong>Duration:</strong> {selectedVideo.duration}</p>\n                    <p><strong>Difficulty:</strong> \n                      <Badge variant=\"secondary\" className=\"ml-2\">{selectedVideo.difficulty}</Badge>\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                  <List className=\"h-5 w-5\" />\n                  Preparation Steps\n                </h3>\n                <ol className=\"list-decimal list-inside space-y-3 text-muted-foreground\">\n                  {selectedVideo.steps.map((step: string, index: number) => (\n                    <li key={index} className=\"pl-2\">{step}</li>\n                  ))}\n                </ol>\n              </div>\n\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold text-blue-800 mb-2\">Tips for Success</h4>\n                <ul className=\"list-disc list-inside text-sm text-blue-700 space-y-1\">\n                  <li>Use fresh, high-quality ingredients when possible</li>\n                  <li>Follow the timing instructions carefully</li>\n                  <li>Store prepared herbs properly to maintain potency</li>\n                  <li>Start with small amounts and adjust to your preference</li>\n                </ul>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n","size_bytes":16332},"client/src/pages/weight-balance.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Scale, Apple, Heart, Leaf, Clock, Target, AlertTriangle } from \"lucide-react\";\nimport HerbCard from \"@/components/herbs/herb-card\";\nimport HerbDetailModal from \"@/components/herbs/herb-detail-modal\";\nimport type { Herb } from \"@/shared/schema\";\n\nexport default function WeightBalance() {\n  const [selectedHerb, setSelectedHerb] = useState<Herb | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const { data: allHerbs = [] } = useQuery<Herb[]>({\n    queryKey: [\"/api/herbs\"],\n  });\n\n  // Filter herbs for weight balance and metabolism\n  const weightBalanceHerbs = allHerbs.filter(herb => \n    herb.categories.includes(\"Weight Balance\") || \n    herb.categories.includes(\"General Wellness\")\n  );\n\n  const handleHerbClick = (herb: Herb) => {\n    setSelectedHerb(herb);\n    setIsModalOpen(true);\n  };\n\n  const globalHealthIssues = [\n    {\n      id: \"obesity-epidemic\",\n      icon: Scale,\n      title: \"Global Obesity Epidemic\",\n      color: \"text-red-600\",\n      bgColor: \"bg-red-50\",\n      borderColor: \"border-red-200\",\n      definition: \"Obesity has become a global health crisis affecting over 2 billion people worldwide, with rates tripling since 1975.\",\n      statistics: [\n        \"39% of adults worldwide are overweight\",\n        \"13% of adults are obese\",\n        \"340 million children and adolescents are overweight or obese\",\n        \"Obesity-related deaths: 4.7 million annually\"\n      ],\n      rootCauses: [\n        \"Ultra-processed foods high in sugar, salt, and unhealthy fats\",\n        \"Sedentary lifestyles and reduced physical activity\",\n        \"Food marketing and availability of cheap, unhealthy options\",\n        \"Stress and emotional eating patterns\",\n        \"Lack of nutrition education and cooking skills\",\n        \"Food deserts and limited access to fresh produce\"\n      ],\n      healthConsequences: [\n        \"Type 2 Diabetes - 90% of cases linked to obesity\",\n        \"Cardiovascular Disease - leading cause of death globally\",\n        \"Hypertension - affects 1.3 billion people worldwide\",\n        \"Sleep Apnea and respiratory issues\",\n        \"Joint problems and reduced mobility\",\n        \"Mental health issues and depression\"\n      ]\n    },\n    {\n      id: \"metabolic-syndrome\",\n      icon: Heart,\n      title: \"Metabolic Syndrome\",\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\",\n      borderColor: \"border-orange-200\",\n      definition: \"A cluster of conditions that occur together, increasing the risk of heart disease, stroke, and type 2 diabetes.\",\n      components: [\n        \"Abdominal obesity (waist circumference >40 inches men, >35 inches women)\",\n        \"High blood pressure (≥130/85 mmHg)\",\n        \"High blood sugar (≥100 mg/dL fasting)\",\n        \"High triglycerides (≥150 mg/dL)\",\n        \"Low HDL cholesterol (<40 mg/dL men, <50 mg/dL women)\"\n      ],\n      prevalence: \"Affects 25-30% of adults globally\",\n      riskFactors: [\n        \"Poor diet high in refined carbohydrates and sugars\",\n        \"Physical inactivity and sedentary behavior\",\n        \"Chronic stress and poor sleep quality\",\n        \"Genetic predisposition\",\n        \"Age and hormonal changes\"\n      ]\n    },\n    {\n      id: \"inflammation\",\n      icon: AlertTriangle,\n      title: \"Chronic Inflammation\",\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-50\",\n      borderColor: \"border-purple-200\",\n      definition: \"Low-grade, persistent inflammation that contributes to most chronic diseases and weight gain resistance.\",\n      causes: [\n        \"Processed foods and refined sugars\",\n        \"Trans fats and vegetable oils\",\n        \"Chronic stress and poor sleep\",\n        \"Environmental toxins and pollution\",\n        \"Sedentary lifestyle\",\n        \"Food sensitivities and gut dysbiosis\"\n      ],\n      healthImpact: [\n        \"Insulin resistance and diabetes\",\n        \"Cardiovascular disease\",\n        \"Autoimmune conditions\",\n        \"Cognitive decline and dementia\",\n        \"Cancer risk increase\",\n        \"Accelerated aging\"\n      ]\n    }\n  ];\n\n  const nutritionEducation = {\n    title: \"Nutrition Fundamentals for Global Health\",\n    principles: [\n      {\n        name: \"Whole Foods First\",\n        description: \"Prioritize unprocessed, nutrient-dense foods from nature\",\n        examples: [\"Fresh vegetables and fruits\", \"Whole grains\", \"Lean proteins\", \"Healthy fats\"],\n        benefits: [\"Higher nutrient density\", \"Better satiety\", \"Stable blood sugar\", \"Reduced inflammation\"]\n      },\n      {\n        name: \"Plant-Based Foundation\",\n        description: \"Build meals around plant foods for optimal health\",\n        examples: [\"Legumes and beans\", \"Nuts and seeds\", \"Colorful vegetables\", \"Whole fruits\"],\n        benefits: [\"Fiber for gut health\", \"Antioxidants\", \"Lower calorie density\", \"Heart health support\"]\n      },\n      {\n        name: \"Mindful Eating\",\n        description: \"Develop awareness of hunger, fullness, and eating patterns\",\n        examples: [\"Eat slowly and chew thoroughly\", \"Listen to hunger cues\", \"Avoid emotional eating\", \"Practice gratitude\"],\n        benefits: [\"Better portion control\", \"Improved digestion\", \"Reduced stress\", \"Sustainable habits\"]\n      },\n      {\n        name: \"Hydration Priority\",\n        description: \"Water is essential for metabolism and overall health\",\n        examples: [\"Drink water before meals\", \"Limit sugary beverages\", \"Include herbal teas\", \"Monitor urine color\"],\n        benefits: [\"Improved metabolism\", \"Better digestion\", \"Reduced cravings\", \"Clearer thinking\"]\n      }\n    ]\n  };\n\n  const lifestyleStrategies = [\n    {\n      category: \"Physical Activity\",\n      strategies: [\n        \"Start with 10-minute walks daily\",\n        \"Gradually increase to 150 minutes/week\",\n        \"Include strength training 2-3 times/week\",\n        \"Find activities you enjoy\",\n        \"Use stairs instead of elevators\",\n        \"Walk or bike for short trips\"\n      ]\n    },\n    {\n      category: \"Sleep Optimization\",\n      strategies: [\n        \"Aim for 7-9 hours of quality sleep\",\n        \"Establish consistent sleep schedule\",\n        \"Create a relaxing bedtime routine\",\n        \"Limit screen time before bed\",\n        \"Keep bedroom cool and dark\",\n        \"Avoid large meals before sleep\"\n      ]\n    },\n    {\n      category: \"Stress Management\",\n      strategies: [\n        \"Practice daily meditation or deep breathing\",\n        \"Engage in regular physical activity\",\n        \"Spend time in nature\",\n        \"Maintain social connections\",\n        \"Set boundaries and prioritize self-care\",\n        \"Consider therapy or counseling if needed\"\n      ]\n    },\n    {\n      category: \"Environment Optimization\",\n      strategies: [\n        \"Stock kitchen with healthy options\",\n        \"Remove tempting processed foods\",\n        \"Plan meals and snacks ahead\",\n        \"Use smaller plates and bowls\",\n        \"Eat at the table without distractions\",\n        \"Keep healthy snacks visible\"\n      ]\n    }\n  ];\n\n  const herbalSupport = {\n    metabolism: [\n      {\n        name: \"Green Tea\",\n        benefits: [\"Contains EGCG for fat oxidation\", \"Boosts metabolism\", \"Rich in antioxidants\"],\n        usage: \"2-3 cups daily, best between meals\"\n      },\n      {\n        name: \"Ginger\",\n        benefits: [\"Improves digestion\", \"Reduces inflammation\", \"Supports blood sugar balance\"],\n        usage: \"Fresh ginger tea or 1-2 inches daily\"\n      },\n      {\n        name: \"Cinnamon\",\n        benefits: [\"Helps regulate blood sugar\", \"Reduces insulin resistance\", \"Anti-inflammatory\"],\n        usage: \"1/2-1 tsp daily in food or tea\"\n      }\n    ],\n    appetite: [\n      {\n        name: \"Fiber-Rich Herbs\",\n        benefits: [\"Increase satiety\", \"Slow digestion\", \"Support gut health\"],\n        examples: [\"Psyllium husk\", \"Chia seeds\", \"Flaxseeds\"]\n      },\n      {\n        name: \"Bitter Herbs\",\n        benefits: [\"Stimulate digestive enzymes\", \"Reduce cravings\", \"Support liver function\"],\n        examples: [\"Dandelion root\", \"Burdock root\", \"Gentian\"]\n      }\n    ],\n    stress: [\n      {\n        name: \"Adaptogenic Herbs\",\n        benefits: [\"Help body adapt to stress\", \"Reduce cortisol levels\", \"Support energy balance\"],\n        examples: [\"Ashwagandha\", \"Rhodiola\", \"Holy basil\"]\n      }\n    ]\n  };\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center\">\n              <Scale className=\"h-10 w-10 text-green-600\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold mb-6 text-green-600\" data-testid=\"text-page-title\">\n            Global Health & Weight Balance\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Understanding how eating habits and lifestyle choices impact global health outcomes. \n            Discover sustainable approaches to weight management and overall wellbeing.\n          </p>\n        </div>\n\n        {/* Global Health Issues */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Major Health Issues Stemming from Eating Habits</h2>\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {globalHealthIssues.map((issue) => {\n              const IconComponent = issue.icon;\n              return (\n                <Card key={issue.id} className={`p-6 shadow-lg border-2 ${issue.borderColor}`}>\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-center gap-3 mb-4\">\n                      <div className={`p-3 rounded-full ${issue.bgColor}`}>\n                        <IconComponent className={`h-6 w-6 ${issue.color}`} />\n                      </div>\n                      <h3 className={`text-xl font-bold ${issue.color}`}>{issue.title}</h3>\n                    </div>\n                    <p className=\"text-muted-foreground text-sm\">{issue.definition}</p>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {issue.statistics && (\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Global Statistics:</h4>\n                        <ul className=\"text-sm text-muted-foreground space-y-1\">\n                          {issue.statistics.map((stat, index) => (\n                            <li key={index} className=\"flex items-center gap-2\">\n                              <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                              {stat}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Root Causes:</h4>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {issue.rootCauses?.map((cause, index) => (\n                          <li key={index} className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n                            {cause}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    {issue.healthConsequences && (\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Health Consequences:</h4>\n                        <ul className=\"text-sm text-muted-foreground space-y-1\">\n                          {issue.healthConsequences.map((consequence, index) => (\n                            <li key={index} className=\"flex items-center gap-2\">\n                              <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                              {consequence}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Nutrition Education */}\n        <div className=\"mb-16\">\n          <Card className=\"p-8 shadow-lg\">\n            <CardHeader className=\"text-center pb-6\">\n              <h2 className=\"text-3xl font-bold mb-4 flex items-center justify-center gap-3\">\n                <Apple className=\"h-8 w-8 text-green-600\" />\n                {nutritionEducation.title}\n              </h2>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                {nutritionEducation.principles.map((principle, index) => (\n                  <div key={index} className=\"space-y-4\">\n                    <div>\n                      <h3 className=\"text-xl font-semibold text-green-600 mb-2\">{principle.name}</h3>\n                      <p className=\"text-muted-foreground mb-3\">{principle.description}</p>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Examples:</h4>\n                      <ul className=\"text-sm text-muted-foreground space-y-1 mb-3\">\n                        {principle.examples.map((example, idx) => (\n                          <li key={idx} className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                            {example}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Benefits:</h4>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        {principle.benefits.map((benefit, idx) => (\n                          <li key={idx} className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                            {benefit}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Lifestyle Strategies */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Lifestyle Strategies for Sustainable Health</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {lifestyleStrategies.map((strategy, index) => (\n              <Card key={index} className=\"p-6 shadow-lg\">\n                <CardHeader className=\"pb-4\">\n                  <h3 className=\"text-lg font-semibold text-center\">{strategy.category}</h3>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {strategy.strategies.map((item, idx) => (\n                      <li key={idx} className=\"flex items-start gap-2 text-sm text-muted-foreground\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                        <span>{item}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Herbal Support */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Herbal Support for Weight Balance</h2>\n          <Tabs defaultValue=\"metabolism\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"metabolism\">Metabolism</TabsTrigger>\n              <TabsTrigger value=\"appetite\">Appetite Control</TabsTrigger>\n              <TabsTrigger value=\"stress\">Stress Management</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"metabolism\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {herbalSupport.metabolism.map((herb, index) => (\n                  <Card key={index} className=\"p-6\">\n                    <CardHeader>\n                      <h3 className=\"text-lg font-semibold\">{herb.name}</h3>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Benefits:</h4>\n                        <ul className=\"text-sm text-muted-foreground space-y-1\">\n                          {herb.benefits.map((benefit, idx) => (\n                            <li key={idx} className=\"flex items-center gap-2\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                              {benefit}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Usage:</h4>\n                        <p className=\"text-sm text-muted-foreground\">{herb.usage}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"appetite\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {herbalSupport.appetite.map((category, index) => (\n                  <Card key={index} className=\"p-6\">\n                    <CardHeader>\n                      <h3 className=\"text-lg font-semibold\">{category.name}</h3>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Benefits:</h4>\n                        <ul className=\"text-sm text-muted-foreground space-y-1\">\n                          {category.benefits.map((benefit, idx) => (\n                            <li key={idx} className=\"flex items-center gap-2\">\n                              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                              {benefit}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Examples:</h4>\n                        <ul className=\"text-sm text-muted-foreground space-y-1\">\n                          {category.examples.map((example, idx) => (\n                            <li key={idx} className=\"flex items-center gap-2\">\n                              <div className=\"w-2 h-2 bg-orange-500 rounded-full\"></div>\n                              {example}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"stress\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 gap-6\">\n                {herbalSupport.stress.map((category, index) => (\n                  <Card key={index} className=\"p-6\">\n                    <CardHeader>\n                      <h3 className=\"text-lg font-semibold\">{category.name}</h3>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Benefits:</h4>\n                        <ul className=\"text-sm text-muted-foreground space-y-1\">\n                          {category.benefits.map((benefit, idx) => (\n                            <li key={idx} className=\"flex items-center gap-2\">\n                              <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                              {benefit}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">Examples:</h4>\n                        <ul className=\"text-sm text-muted-foreground space-y-1\">\n                          {category.examples.map((example, idx) => (\n                            <li key={idx} className=\"flex items-center gap-2\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                              {example}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        {/* Featured Herbs */}\n        <div className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8 text-center\">Herbs for Weight Balance & Metabolism</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {weightBalanceHerbs.map((herb) => (\n              <div key={herb.id} onClick={() => handleHerbClick(herb)}>\n                <HerbCard herb={herb} />\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center\">\n          <Card className=\"p-8 bg-green-50 border-green-200\">\n            <CardContent>\n              <h3 className=\"text-2xl font-bold text-green-800 mb-4\">Start Your Health Journey Today</h3>\n              <p className=\"text-green-700 mb-6\">\n                Remember, sustainable weight management is about creating lasting lifestyle changes, \n                not quick fixes. Focus on nourishing your body with whole foods, staying active, \n                managing stress, and getting adequate sleep.\n              </p>\n              <div className=\"flex flex-wrap justify-center gap-4\">\n                <Badge variant=\"outline\" className=\"text-green-700 border-green-300\">\n                  <Target className=\"h-4 w-4 mr-1\" />\n                  Set Realistic Goals\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-green-700 border-green-300\">\n                  <Clock className=\"h-4 w-4 mr-1\" />\n                  Be Patient\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-green-700 border-green-300\">\n                  <Heart className=\"h-4 w-4 mr-1\" />\n                  Prioritize Health\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-green-700 border-green-300\">\n                  <Leaf className=\"h-4 w-4 mr-1\" />\n                  Use Natural Support\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Herb Detail Modal */}\n        <HerbDetailModal\n          herb={selectedHerb}\n          isOpen={isModalOpen}\n          onClose={() => {\n            setIsModalOpen(false);\n            setSelectedHerb(null);\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\n","size_bytes":23422},"client/src/pages/wellbeing.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Brain, Zap, Moon, Scale } from \"lucide-react\";\n\nexport default function Wellbeing() {\n  const wellbeingCategories = [\n    {\n      id: \"mental-health\",\n      icon: Brain,\n      title: \"Mental Health & Calm\",\n      color: \"text-primary\",\n      bgColor: \"bg-primary/10\",\n      description: \"Find peace and mental clarity with these calming herbs that have been used for centuries to reduce stress and promote emotional balance.\",\n      herbs: [\n        { name: \"Chamomile\", benefit: \"Gentle relaxation and sleep support\" },\n        { name: \"African Basil\", benefit: \"Mental clarity and stress relief\" },\n        { name: \"African Sage\", benefit: \"Calming aromatherapy benefits\" }\n      ],\n      tips: \"Practice deep breathing, maintain a regular sleep schedule, and create calming bedtime rituals with herbal teas.\",\n      image: \"/attached_assets/generated_images/Chamomile_flowers_blooming_fcc5a2fb.png\"\n    },\n    {\n      id: \"energy\",\n      icon: Zap,\n      title: \"Energy & Vitality\",\n      color: \"text-accent\",\n      bgColor: \"bg-accent/10\",\n      description: \"Boost your natural energy levels and stamina with these powerful herbs that support sustained vitality throughout the day.\",\n      herbs: [\n        { name: \"Moringa\", benefit: \"Complete nutrition and energy boost\" },\n        { name: \"Baobab\", benefit: \"Vitamin C powerhouse for immunity\" },\n        { name: \"Ginger\", benefit: \"Circulation and digestive energy\" }\n      ],\n      tips: \"Stay hydrated, eat nutrient-dense foods, get morning sunlight, and maintain regular exercise for sustained energy.\",\n      image: \"/attached_assets/generated_images/Fresh_moringa_plant_leaves_f8771929.png\"\n    },\n    {\n      id: \"sleep\",\n      icon: Moon,\n      title: \"Sleep & Relaxation\",\n      color: \"text-secondary\",\n      bgColor: \"bg-secondary/10\",\n      description: \"Improve your sleep quality and relaxation with these gentle, soothing herbs that help calm the mind and prepare the body for rest.\",\n      herbs: [\n        { name: \"Chamomile\", benefit: \"Classic bedtime tea for peaceful sleep\" },\n        { name: \"African Sage\", benefit: \"Aromatic relaxation therapy\" },\n        { name: \"Hibiscus\", benefit: \"Evening wind-down ritual\" }\n      ],\n      tips: \"Create a consistent bedtime routine, limit screen time before sleep, and keep your bedroom cool and dark.\",\n      image: \"/attached_assets/generated_images/African_sage_plant_11f1d049.png\"\n    },\n    {\n      id: \"weight\",\n      icon: Scale,\n      title: \"Weight & Balance\",\n      color: \"text-primary\",\n      bgColor: \"bg-primary/10\",\n      description: \"Support healthy weight management and metabolic balance with these herbs that assist digestion, metabolism, and overall wellness.\",\n      herbs: [\n        { name: \"Neem\", benefit: \"Blood sugar balance support\" },\n        { name: \"Hibiscus\", benefit: \"Metabolism and hydration support\" },\n        { name: \"Moringa\", benefit: \"Nutrient density for healthy meals\" }\n      ],\n      tips: \"Focus on whole foods, regular meals, portion control, and combining herbs with balanced nutrition and physical activity.\",\n      image: \"/attached_assets/generated_images/Neem_tree_leaves_8f8d6bbc.png\"\n    }\n  ];\n\n  return (\n    <div className=\"py-16 px-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <h1 className=\"text-4xl font-bold text-center mb-8\" data-testid=\"text-page-title\">\n          Wellbeing Categories\n        </h1>\n        <p className=\"text-lg text-muted-foreground text-center mb-12 max-w-2xl mx-auto\">\n          Explore natural solutions organized by your wellness goals and needs.\n        </p>\n\n        <div className=\"space-y-16\">\n          {wellbeingCategories.map((category, index) => {\n            const IconComponent = category.icon;\n            const isReversed = index % 2 === 1;\n            \n            return (\n              <section key={category.id} id={category.id}>\n                <Card className=\"p-8 shadow-lg border border-border\">\n                  <div className={`grid grid-cols-1 lg:grid-cols-2 gap-8 items-center ${isReversed ? 'lg:grid-flow-col-dense' : ''}`}>\n                    <div className={isReversed ? 'lg:col-start-2' : ''}>\n                      <h2 className={`text-3xl font-bold mb-4 ${category.color} flex items-center`} data-testid={`text-category-${category.id}`}>\n                        <IconComponent className=\"mr-3 h-8 w-8\" />\n                        {category.title}\n                      </h2>\n                      <p className=\"text-muted-foreground mb-6\">\n                        {category.description}\n                      </p>\n                      <div className=\"space-y-4\">\n                        {category.herbs.map((herb, herbIndex) => (\n                          <div key={herbIndex} className=\"flex items-center space-x-3\">\n                            <Badge className={`${category.bgColor} ${category.color} border-0`}>\n                              {herb.name}\n                            </Badge>\n                            <span className=\"text-sm text-muted-foreground\">- {herb.benefit}</span>\n                          </div>\n                        ))}\n                      </div>\n                      <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n                        <h4 className=\"font-semibold mb-2\">Lifestyle Tips:</h4>\n                        <p className=\"text-sm text-muted-foreground\">{category.tips}</p>\n                      </div>\n                    </div>\n                    <div className={isReversed ? 'lg:col-start-1' : ''}>\n                      <img \n                        src={category.image} \n                        alt={`${category.title} lifestyle`}\n                        className=\"rounded-lg w-full h-64 object-cover\"\n                      />\n                    </div>\n                  </div>\n                </Card>\n              </section>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6008},"client/src/components/herbs/featured-herb.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Check } from \"lucide-react\";\nimport type { Herb } from \"@/shared/schema\";\n\ninterface FeaturedHerbProps {\n  herb: Herb;\n  onLearnMore?: () => void;\n}\n\nexport default function FeaturedHerb({ herb, onLearnMore }: FeaturedHerbProps) {\n  return (\n    <div className=\"bg-card rounded-xl p-8 shadow-lg border border-border\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\">\n        <div>\n          <img \n            src={herb.imageUrl || \"/attached_assets/generated_images/Family_enjoying_herbal_tea_747c1dae.png\"} \n            alt={herb.name}\n            className=\"rounded-lg w-full h-64 object-cover\"\n          />\n        </div>\n        <div>\n          <h3 className=\"text-3xl font-bold mb-4 text-primary\" data-testid=\"text-featured-herb-name\">\n            {herb.name} {herb.emoji}\n          </h3>\n          {herb.localName && (\n            <p className=\"text-lg text-muted-foreground mb-2 italic\">{herb.localName}</p>\n          )}\n          <p className=\"text-lg text-muted-foreground mb-6\" data-testid=\"text-featured-herb-description\">\n            {herb.description}\n          </p>\n          <div className=\"space-y-3\">\n            {herb.benefits.slice(0, 3).map((benefit: string, index: number) => (\n              <div key={index} className=\"flex items-center space-x-3\">\n                <Check className=\"h-5 w-5 text-primary\" />\n                <span>{benefit}</span>\n              </div>\n            ))}\n          </div>\n          <Button \n            className=\"mt-6\" \n            onClick={onLearnMore}\n            data-testid=\"button-learn-more-featured\"\n          >\n            Learn More\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1744},"client/src/components/herbs/herb-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Herb } from \"@/shared/schema\";\n\ninterface HerbCardProps {\n  herb: Herb;\n  onClick?: () => void;\n}\n\nexport default function HerbCard({ herb, onClick }: HerbCardProps) {\n  return (\n    <Card \n      className=\"herb-card cursor-pointer overflow-hidden border border-border\"\n      onClick={onClick}\n      data-testid={`card-herb-${herb.id}`}\n    >\n      <div className=\"aspect-video overflow-hidden\">\n        <img \n          src={herb.imageUrl || \"/attached_assets/generated_images/Family_enjoying_herbal_tea_747c1dae.png\"} \n          alt={herb.name}\n          className=\"w-full h-full object-cover\"\n        />\n      </div>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center gap-2 mb-2\">\n          <h3 className=\"text-xl font-semibold\" data-testid={`text-herb-name-${herb.id}`}>\n            {herb.name} {herb.emoji}\n          </h3>\n          {herb.isIndigenous === \"true\" && (\n            <Badge variant=\"secondary\" className=\"text-xs\">African</Badge>\n          )}\n        </div>\n        {herb.localName && (\n          <p className=\"text-sm text-muted-foreground mb-2 italic\">{herb.localName}</p>\n        )}\n        <p className=\"text-muted-foreground text-sm mb-4\" data-testid={`text-herb-description-${herb.id}`}>\n          {herb.description}\n        </p>\n        <div className=\"flex flex-wrap gap-1\">\n          {herb.categories.slice(0, 3).map((category: string) => (\n            <Badge key={category} variant=\"outline\" className=\"text-xs\">\n              {category}\n            </Badge>\n          ))}\n          {herb.categories.length > 3 && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              +{herb.categories.length - 3} more\n            </Badge>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1885},"client/src/components/herbs/herb-detail-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Check, Clock, Thermometer } from \"lucide-react\";\nimport type { Herb } from \"@/shared/schema\";\nimport HerbRecipes from \"./herb-recipes\";\nimport SourcingGuide from \"./sourcing-guide\";\nimport WellnessTracker from \"./wellness-tracker\";\n\ninterface HerbDetailModalProps {\n  herb: Herb | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst preparationGuides = {\n  \"Tea\": {\n    steps: [\n      \"Boil fresh, filtered water\",\n      \"Add 1-2 tsp dried herb to tea infuser\",\n      \"Pour hot water (not boiling, about 85-90°C)\",\n      \"Steep for 5-10 minutes\",\n      \"Remove infuser and enjoy\"\n    ],\n    timing: \"5-10 minutes\",\n    temperature: \"85-90°C\",\n    tips: \"Use fresh water, avoid reboiling. Steep time affects strength.\"\n  },\n  \"Powder\": {\n    steps: [\n      \"Start with 1/4 to 1/2 tsp powder\",\n      \"Mix into smoothies, yogurt, or water\",\n      \"Store in airtight container away from light\",\n      \"Use within 6 months for best potency\"\n    ],\n    timing: \"Immediate\",\n    temperature: \"Room temperature\",\n    tips: \"Start with small amounts and gradually increase. Mix well to avoid clumping.\"\n  },\n  \"Fresh leaves\": {\n    steps: [\n      \"Wash fresh leaves thoroughly under cold water\",\n      \"Use 2-3 times more than dried herb\",\n      \"Chop finely for better extraction\",\n      \"Add to salads, smoothies, or steep in hot water\"\n    ],\n    timing: \"Immediate\",\n    temperature: \"Cold or room temperature\",\n    tips: \"Use within 2-3 days of harvesting. Store in refrigerator wrapped in damp paper towel.\"\n  },\n  \"Infusion\": {\n    steps: [\n      \"Bring water to a gentle boil\",\n      \"Add herbs and remove from heat\",\n      \"Cover and let steep for 15-30 minutes\",\n      \"Strain through fine mesh sieve\",\n      \"Store in refrigerator for up to 3 days\"\n    ],\n    timing: \"15-30 minutes\",\n    temperature: \"100°C then cool\",\n    tips: \"Longer steeping extracts more beneficial compounds. Use glass or ceramic container.\"\n  },\n  \"Decoction\": {\n    steps: [\n      \"Add herbs to cold water\",\n      \"Bring to boil and simmer for 20-30 minutes\",\n      \"Strain and let cool\",\n      \"Store in refrigerator for up to 3 days\"\n    ],\n    timing: \"20-30 minutes\",\n    temperature: \"100°C simmer\",\n    tips: \"Best for roots, bark, and hard plant parts. Simmer gently to avoid burning.\"\n  },\n  \"Poultice\": {\n    steps: [\n      \"Crush fresh herbs or moisten dried herbs\",\n      \"Apply directly to affected area\",\n      \"Cover with clean cloth or bandage\",\n      \"Leave for 15-30 minutes\",\n      \"Remove and clean area thoroughly\"\n    ],\n    timing: \"15-30 minutes\",\n    temperature: \"Room temperature\",\n    tips: \"Test on small area first. Use fresh herbs when possible for best results.\"\n  },\n  \"Capsules\": {\n    steps: [\n      \"Purchase pre-filled capsules or empty capsules\",\n      \"Fill with powdered herb\",\n      \"Take with water or juice\",\n      \"Store in cool, dry place\"\n    ],\n    timing: \"Immediate\",\n    temperature: \"Room temperature\",\n    tips: \"Follow dosage instructions. Take with food to avoid stomach upset.\"\n  },\n  \"Essential oil\": {\n    steps: [\n      \"Dilute essential oil with carrier oil (1-2 drops per tsp)\",\n      \"Apply to skin or use in diffuser\",\n      \"Never ingest undiluted essential oils\",\n      \"Store in dark glass bottles\"\n    ],\n    timing: \"Immediate\",\n    temperature: \"Room temperature\",\n    tips: \"Always dilute before use. Test on small area first. Keep away from children and pets.\"\n  },\n  \"Tincture\": {\n    steps: [\n      \"Purchase ready-made tincture or make your own\",\n      \"Take recommended dosage with water\",\n      \"Store in dark glass bottle\",\n      \"Keep in cool, dark place\"\n    ],\n    timing: \"Immediate\",\n    temperature: \"Room temperature\",\n    tips: \"Tinctures are concentrated. Follow dosage carefully. Alcohol-based tinctures last longer.\"\n  },\n  \"Extract\": {\n    steps: [\n      \"Purchase standardized extracts\",\n      \"Follow dosage instructions on label\",\n      \"Take with water or juice\",\n      \"Store according to package directions\"\n    ],\n    timing: \"Immediate\",\n    temperature: \"Room temperature\",\n    tips: \"Extracts are highly concentrated. Start with lowest recommended dose.\"\n  }\n};\n\nexport default function HerbDetailModal({ herb, isOpen, onClose }: HerbDetailModalProps) {\n  if (!herb) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-3 text-2xl\">\n            <span>{herb.emoji}</span>\n            <span>{herb.name}</span>\n            {herb.isIndigenous === \"true\" && <Badge variant=\"secondary\">African</Badge>}\n          </DialogTitle>\n          {herb.localName && <p className=\"text-muted-foreground italic\">{herb.localName}</p>}\n        </DialogHeader>\n\n        <Tabs defaultValue=\"overview\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"preparation\">Preparation</TabsTrigger>\n            <TabsTrigger value=\"sourcing\">Where to Find</TabsTrigger>\n            <TabsTrigger value=\"recipes\">Recipes</TabsTrigger>\n            <TabsTrigger value=\"daily\">Daily Use</TabsTrigger>\n            <TabsTrigger value=\"tracker\">Tracker</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <img \n                src={herb.imageUrl || \"/attached_assets/generated_images/Family_enjoying_herbal_tea_747c1dae.png\"} \n                alt={herb.name}\n                className=\"rounded-lg w-full h-64 object-cover\"\n              />\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-2\">Description</h3>\n                  <p className=\"text-muted-foreground\">{herb.description}</p>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-2\">Benefits</h3>\n                  <div className=\"space-y-2\">\n                    {herb.benefits.map((benefit: string, index: number) => (\n                      <div key={index} className=\"flex items-center gap-2\">\n                        <Check className=\"h-4 w-4 text-primary\" />\n                        <span className=\"text-sm\">{benefit}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"preparation\" className=\"space-y-6\">\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold mb-3\">Preparation Methods for {herb.name}</h3>\n              <p className=\"text-muted-foreground text-sm\">\n                Choose the preparation method that best suits your needs and the herb's properties. \n                Each method extracts different compounds and has different applications.\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n\n              {herb.preparationMethods.map((method: string) => {\n                const guide = preparationGuides[method as keyof typeof preparationGuides];\n                return (\n                  <Card key={method} className=\"p-4\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-lg\">{method}</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      {guide && (\n                        <>\n                          <ol className=\"list-decimal list-inside space-y-1 text-sm text-muted-foreground\">\n                            {guide.steps.map((step, index) => (\n                              <li key={index}>{step}</li>\n                            ))}\n                          </ol>\n                          <div className=\"flex gap-4 text-xs text-muted-foreground mb-2\">\n                            <div className=\"flex items-center gap-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              {guide.timing}\n                            </div>\n                            <div className=\"flex items-center gap-1\">\n                              <Thermometer className=\"h-3 w-3\" />\n                              {guide.temperature}\n                            </div>\n                          </div>\n                          {guide.tips && (\n                            <div className=\"text-xs text-blue-600 bg-blue-50 p-2 rounded\">\n                              <strong>Tip:</strong> {guide.tips}\n                            </div>\n                          )}\n                        </>\n                      )}\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n\n            <Card className=\"bg-green-50 border-green-200\">\n              <CardHeader>\n                <CardTitle className=\"text-green-800\">Preparation Best Practices</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-green-700\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Quality Considerations</h4>\n                    <ul className=\"space-y-1\">\n                      <li>• Use fresh, high-quality herbs</li>\n                      <li>• Store properly to maintain potency</li>\n                      <li>• Use filtered or spring water</li>\n                      <li>• Avoid aluminum cookware</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Safety Guidelines</h4>\n                    <ul className=\"space-y-1\">\n                      <li>• Start with small amounts</li>\n                      <li>• Follow recommended dosages</li>\n                      <li>• Consult healthcare providers</li>\n                      <li>• Monitor for any reactions</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n                    <TabsContent value=\"sourcing\" className=\"space-y-6\">\n            <SourcingGuide herb={herb} />\n          </TabsContent>\n\n          <TabsContent value=\"recipes\" className=\"space-y-6\">\n            <HerbRecipes herb={herb} />\n                      </TabsContent>\n\n          <TabsContent value=\"tracker\" className=\"space-y-6\">\n            <WellnessTracker herb={herb} />\n          </TabsContent>\n\n          <TabsContent value=\"daily\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Card className=\"p-4\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Morning Routine</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n                    <li>Add {herb.name} powder to your morning smoothie</li>\n                    <li>Brew {herb.name} tea with breakfast</li>\n                    <li>Mix fresh {herb.name} leaves in yogurt</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"p-4\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Evening Routine</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n                    <li>Enjoy {herb.name} tea before bedtime</li>\n                    <li>Add {herb.name} to your evening bath</li>\n                    <li>Use {herb.name} essential oil for aromatherapy</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"p-4\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Cooking & Meals</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n                    <li>Add fresh {herb.name} to salads</li>\n                    <li>Use {herb.name} powder in soups and stews</li>\n                    <li>Infuse {herb.name} in cooking oils</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"p-4\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Wellness Tracking</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n                    <li>Track how you feel after using {herb.name}</li>\n                    <li>Note any changes in energy or sleep</li>\n                    <li>Record dosage and timing</li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":13526},"client/src/components/herbs/herb-recipes.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Users, Star } from \"lucide-react\";\nimport type { Herb } from \"@/shared/schema\";\n\ninterface HerbRecipesProps {\n  herb: Herb;\n}\n\nconst recipeCategories = {\n  \"Tea\": {\n    icon: \"☕\",\n    description: \"Traditional herbal tea preparations\"\n  },\n  \"Smoothie\": {\n    icon: \"🥤\",\n    description: \"Nutritious smoothie recipes\"\n  },\n  \"Cooking\": {\n    icon: \"🍳\",\n    description: \"Cooking and meal integration\"\n  },\n  \"Wellness\": {\n    icon: \"🌿\",\n    description: \"Wellness and therapeutic uses\"\n  }\n};\n\nconst getRecipesForHerb = (herbName: string) => {\n  const recipes = {\n    \"Ginger\": [\n      {\n        title: \"Ginger Lemon Tea\",\n        category: \"Tea\",\n        time: \"10 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Fresh ginger root (1 inch)\", \"Lemon (1/2)\", \"Honey (1 tsp)\", \"Hot water (2 cups)\"],\n        instructions: [\n          \"Slice 1 inch of fresh ginger thinly\",\n          \"Boil 2 cups of water\",\n          \"Add ginger and simmer for 5 minutes\",\n          \"Strain and add lemon juice and honey\",\n          \"Let cool slightly before drinking\"\n        ],\n        benefits: \"Digestive support, immune boost, anti-inflammatory\"\n      },\n      {\n        title: \"Ginger Turmeric Golden Milk\",\n        category: \"Wellness\",\n        time: \"15 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Fresh ginger (1 inch)\", \"Turmeric powder (1/2 tsp)\", \"Black pepper (pinch)\", \"Milk (1 cup)\", \"Honey (1 tsp)\"],\n        instructions: [\n          \"Grate fresh ginger finely\",\n          \"Heat milk in a saucepan\",\n          \"Add ginger, turmeric, and black pepper\",\n          \"Simmer for 10 minutes, stirring occasionally\",\n          \"Strain and add honey to taste\"\n        ],\n        benefits: \"Anti-inflammatory, immune support, warming\"\n      },\n      {\n        title: \"Ginger Digestive Smoothie\",\n        category: \"Smoothie\",\n        time: \"5 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Fresh ginger (1/2 inch)\", \"Banana (1)\", \"Almond milk (1 cup)\", \"Honey (1 tsp)\", \"Cinnamon (pinch)\"],\n        instructions: [\n          \"Peel and grate fresh ginger\",\n          \"Add all ingredients to blender\",\n          \"Blend until smooth and creamy\",\n          \"Add ice if desired\"\n        ],\n        benefits: \"Digestive aid, energy boost, anti-nausea\"\n      }\n    ],\n    \"Chamomile\": [\n      {\n        title: \"Calming Chamomile Tea\",\n        category: \"Tea\",\n        time: \"5 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Chamomile flowers (2 tsp)\", \"Hot water (1 cup)\", \"Honey (1 tsp, optional)\"],\n        instructions: [\n          \"Add 2 tsp chamomile flowers to tea infuser\",\n          \"Pour hot water (not boiling, about 85°C)\",\n          \"Steep for 5-7 minutes\",\n          \"Remove infuser and add honey if desired\",\n          \"Best enjoyed before bedtime\"\n        ],\n        benefits: \"Sleep support, relaxation, digestive comfort\"\n      },\n      {\n        title: \"Chamomile Lavender Bath Soak\",\n        category: \"Wellness\",\n        time: \"20 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Chamomile flowers (1/4 cup)\", \"Lavender buds (2 tbsp)\", \"Epsom salts (2 cups)\", \"Warm bath water\"],\n        instructions: [\n          \"Mix chamomile and lavender in a muslin bag\",\n          \"Fill bath with warm water\",\n          \"Add Epsom salts and herb bag\",\n          \"Soak for 15-20 minutes\",\n          \"Relax and breathe deeply\"\n        ],\n        benefits: \"Stress relief, skin soothing, relaxation\"\n      },\n      {\n        title: \"Chamomile Honey Face Mask\",\n        category: \"Wellness\",\n        time: \"10 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Chamomile tea (2 tbsp)\", \"Raw honey (1 tbsp)\", \"Oatmeal (1 tbsp)\", \"Lemon juice (1/2 tsp)\"],\n        instructions: [\n          \"Brew strong chamomile tea and let cool\",\n          \"Mix with honey, oatmeal, and lemon juice\",\n          \"Apply to clean face\",\n          \"Leave for 10-15 minutes\",\n          \"Rinse with warm water\"\n        ],\n        benefits: \"Skin soothing, anti-inflammatory, calming\"\n      }\n    ],\n    \"Moringa\": [\n      {\n        title: \"Moringa Green Smoothie\",\n        category: \"Smoothie\",\n        time: \"5 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Moringa powder (1 tsp)\", \"Spinach (1 cup)\", \"Banana (1)\", \"Apple (1/2)\", \"Coconut water (1 cup)\"],\n        instructions: [\n          \"Add all ingredients to high-speed blender\",\n          \"Blend until smooth and creamy\",\n          \"Add more coconut water if too thick\",\n          \"Enjoy immediately for best nutrition\"\n        ],\n        benefits: \"Complete nutrition, energy boost, detox support\"\n      },\n      {\n        title: \"Moringa Energy Balls\",\n        category: \"Cooking\",\n        time: \"15 min\",\n        difficulty: \"Medium\",\n        servings: 12,\n        ingredients: [\"Dates (1 cup)\", \"Moringa powder (2 tbsp)\", \"Almonds (1/2 cup)\", \"Coconut flakes (1/4 cup)\", \"Chia seeds (2 tbsp)\"],\n        instructions: [\n          \"Process dates and almonds in food processor\",\n          \"Add moringa powder and chia seeds\",\n          \"Mix until well combined\",\n          \"Roll into 12 small balls\",\n          \"Coat with coconut flakes and refrigerate\"\n        ],\n        benefits: \"Sustained energy, nutrient dense, portable snack\"\n      },\n      {\n        title: \"Moringa Oatmeal Bowl\",\n        category: \"Cooking\",\n        time: \"10 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Oats (1/2 cup)\", \"Moringa powder (1 tsp)\", \"Banana (1/2)\", \"Berries (1/4 cup)\", \"Almond milk (1 cup)\"],\n        instructions: [\n          \"Cook oats with almond milk\",\n          \"Stir in moringa powder\",\n          \"Top with sliced banana and berries\",\n          \"Add honey or maple syrup if desired\"\n        ],\n        benefits: \"Nutrient-rich breakfast, sustained energy, fiber\"\n      }\n    ],\n    \"Hibiscus\": [\n      {\n        title: \"Hibiscus Iced Tea\",\n        category: \"Tea\",\n        time: \"20 min\",\n        difficulty: \"Easy\",\n        servings: 4,\n        ingredients: [\"Hibiscus flowers (1/4 cup)\", \"Water (4 cups)\", \"Honey (2 tbsp)\", \"Lemon (1)\", \"Fresh mint (handful)\"],\n        instructions: [\n          \"Boil water and add hibiscus flowers\",\n          \"Steep for 10-15 minutes\",\n          \"Strain and let cool completely\",\n          \"Add honey, lemon juice, and mint\",\n          \"Serve over ice\"\n        ],\n        benefits: \"Heart health, refreshing, rich in antioxidants\"\n      },\n      {\n        title: \"Hibiscus Agua Fresca\",\n        category: \"Wellness\",\n        time: \"25 min\",\n        difficulty: \"Easy\",\n        servings: 6,\n        ingredients: [\"Hibiscus flowers (1/2 cup)\", \"Water (6 cups)\", \"Lime juice (1/4 cup)\", \"Sugar (1/3 cup)\", \"Fresh mint\"],\n        instructions: [\n          \"Boil water and steep hibiscus for 15 minutes\",\n          \"Strain and add sugar while hot\",\n          \"Let cool completely\",\n          \"Add lime juice and mint\",\n          \"Serve chilled with ice\"\n        ],\n        benefits: \"Hydrating, vitamin C, cooling properties\"\n      },\n      {\n        title: \"Hibiscus Face Toner\",\n        category: \"Wellness\",\n        time: \"15 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Hibiscus tea (1/2 cup)\", \"Apple cider vinegar (1 tbsp)\", \"Witch hazel (1 tbsp)\", \"Essential oil (2 drops)\"],\n        instructions: [\n          \"Brew strong hibiscus tea and let cool\",\n          \"Mix with apple cider vinegar and witch hazel\",\n          \"Add essential oil of choice\",\n          \"Store in spray bottle\",\n          \"Use as facial toner\"\n        ],\n        benefits: \"Skin brightening, astringent, anti-aging\"\n      }\n    ],\n    \"Peppermint\": [\n      {\n        title: \"Peppermint Digestive Tea\",\n        category: \"Tea\",\n        time: \"5 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Fresh peppermint leaves (1/4 cup)\", \"Hot water (1 cup)\", \"Honey (optional)\"],\n        instructions: [\n          \"Wash fresh peppermint leaves\",\n          \"Add to tea infuser or directly to cup\",\n          \"Pour hot water and steep 5 minutes\",\n          \"Remove leaves and add honey if desired\"\n        ],\n        benefits: \"Digestive support, mental clarity, cooling\"\n      },\n      {\n        title: \"Peppermint Energy Smoothie\",\n        category: \"Smoothie\",\n        time: \"5 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Fresh peppermint (1/4 cup)\", \"Spinach (1 cup)\", \"Banana (1)\", \"Coconut water (1 cup)\", \"Lime (1/2)\"],\n        instructions: [\n          \"Blend all ingredients until smooth\",\n          \"Add ice if desired\",\n          \"Enjoy immediately for refreshing energy\"\n        ],\n        benefits: \"Mental clarity, digestive support, refreshing\"\n      }\n    ],\n    \"Turmeric\": [\n      {\n        title: \"Turmeric Golden Milk\",\n        category: \"Wellness\",\n        time: \"15 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Turmeric powder (1 tsp)\", \"Black pepper (1/4 tsp)\", \"Milk (1 cup)\", \"Honey (1 tsp)\", \"Cinnamon (pinch)\"],\n        instructions: [\n          \"Heat milk in saucepan\",\n          \"Add turmeric, black pepper, and cinnamon\",\n          \"Simmer for 10 minutes, stirring\",\n          \"Strain and add honey\",\n          \"Drink warm before bed\"\n        ],\n        benefits: \"Anti-inflammatory, immune support, warming\"\n      },\n      {\n        title: \"Turmeric Face Mask\",\n        category: \"Wellness\",\n        time: \"10 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Turmeric powder (1 tsp)\", \"Honey (1 tbsp)\", \"Yogurt (1 tbsp)\", \"Lemon juice (1/2 tsp)\"],\n        instructions: [\n          \"Mix all ingredients in bowl\",\n          \"Apply to clean face\",\n          \"Leave for 10-15 minutes\",\n          \"Rinse with warm water\"\n        ],\n        benefits: \"Anti-inflammatory, skin brightening, healing\"\n      }\n    ],\n    \"Neem\": [\n      {\n        title: \"Neem Detox Tea\",\n        category: \"Tea\",\n        time: \"10 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Neem leaves (1 tsp)\", \"Hot water (1 cup)\", \"Honey (1 tsp)\", \"Lemon (1/2)\"],\n        instructions: [\n          \"Add neem leaves to tea infuser\",\n          \"Pour hot water and steep 5-7 minutes\",\n          \"Add honey and lemon to mask bitterness\",\n          \"Drink on empty stomach\"\n        ],\n        benefits: \"Blood sugar support, detoxification, skin health\"\n      },\n      {\n        title: \"Neem Face Wash\",\n        category: \"Wellness\",\n        time: \"5 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Neem powder (1 tbsp)\", \"Honey (1 tsp)\", \"Water (2 tbsp)\", \"Tea tree oil (2 drops)\"],\n        instructions: [\n          \"Mix neem powder with water\",\n          \"Add honey and tea tree oil\",\n          \"Apply to face in circular motion\",\n          \"Rinse with warm water\"\n        ],\n        benefits: \"Antimicrobial, skin clearing, anti-acne\"\n      }\n    ],\n    \"Aloe Vera\": [\n      {\n        title: \"Aloe Vera Digestive Shot\",\n        category: \"Wellness\",\n        time: \"5 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Fresh aloe gel (2 tbsp)\", \"Lemon juice (1 tbsp)\", \"Honey (1 tsp)\", \"Water (1/4 cup)\"],\n        instructions: [\n          \"Extract fresh aloe gel from leaf\",\n          \"Blend with lemon, honey, and water\",\n          \"Drink on empty stomach\",\n          \"Best in morning\"\n        ],\n        benefits: \"Digestive support, skin healing, detoxification\"\n      },\n      {\n        title: \"Aloe Vera Face Gel\",\n        category: \"Wellness\",\n        time: \"10 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Fresh aloe gel (2 tbsp)\", \"Vitamin E oil (5 drops)\", \"Lavender oil (2 drops)\"],\n        instructions: [\n          \"Extract fresh aloe gel\",\n          \"Mix with vitamin E and lavender oil\",\n          \"Apply to clean face\",\n          \"Leave for 15 minutes, rinse\"\n        ],\n        benefits: \"Skin healing, moisturizing, anti-inflammatory\"\n      }\n    ],\n    \"Soursop\": [\n      {\n        title: \"Soursop Smoothie\",\n        category: \"Smoothie\",\n        time: \"5 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Soursop pulp (1/2 cup)\", \"Coconut milk (1/2 cup)\", \"Honey (1 tbsp)\", \"Lime juice (1 tbsp)\"],\n        instructions: [\n          \"Remove seeds from soursop pulp\",\n          \"Blend with coconut milk and lime\",\n          \"Add honey to taste\",\n          \"Serve chilled\"\n        ],\n        benefits: \"Antioxidant rich, immune support, digestive aid\"\n      },\n      {\n        title: \"Soursop Tea\",\n        category: \"Tea\",\n        time: \"15 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Soursop leaves (2-3)\", \"Hot water (1 cup)\", \"Honey (optional)\"],\n        instructions: [\n          \"Wash soursop leaves\",\n          \"Add to hot water\",\n          \"Steep for 10-15 minutes\",\n          \"Strain and add honey if desired\"\n        ],\n        benefits: \"Relaxation, sleep support, immune boost\"\n      }\n    ],\n    \"African Basil\": [\n      {\n        title: \"African Basil Steam Inhalation\",\n        category: \"Wellness\",\n        time: \"10 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Fresh African basil leaves (1/2 cup)\", \"Hot water (4 cups)\", \"Towel\"],\n        instructions: [\n          \"Boil water in large pot\",\n          \"Add fresh basil leaves\",\n          \"Cover head with towel\",\n          \"Inhale steam for 5-10 minutes\"\n        ],\n        benefits: \"Respiratory support, mental clarity, antimicrobial\"\n      },\n      {\n        title: \"African Basil Tea\",\n        category: \"Tea\",\n        time: \"5 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Fresh African basil (1/4 cup)\", \"Hot water (1 cup)\", \"Honey (1 tsp)\"],\n        instructions: [\n          \"Wash fresh basil leaves\",\n          \"Add to hot water\",\n          \"Steep for 5 minutes\",\n          \"Strain and add honey\"\n        ],\n        benefits: \"Cold relief, mental clarity, stress reduction\"\n      }\n    ],\n    \"Baobab\": [\n      {\n        title: \"Baobab Energy Smoothie\",\n        category: \"Smoothie\",\n        time: \"5 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Baobab powder (2 tbsp)\", \"Banana (1)\", \"Orange juice (1 cup)\", \"Chia seeds (1 tbsp)\"],\n        instructions: [\n          \"Blend all ingredients until smooth\",\n          \"Add ice if desired\",\n          \"Enjoy immediately\"\n        ],\n        benefits: \"Vitamin C boost, energy, immune support\"\n      },\n      {\n        title: \"Baobab Yogurt Bowl\",\n        category: \"Cooking\",\n        time: \"5 min\",\n        difficulty: \"Easy\",\n        servings: 1,\n        ingredients: [\"Greek yogurt (1 cup)\", \"Baobab powder (1 tbsp)\", \"Berries (1/2 cup)\", \"Honey (1 tsp)\"],\n        instructions: [\n          \"Mix baobab powder with yogurt\",\n          \"Top with berries and honey\",\n          \"Sprinkle with granola if desired\"\n        ],\n        benefits: \"Probiotic support, vitamin C, protein\"\n      }\n    ],\n         \"African Sage\": [\n       {\n         title: \"African Sage Steam Therapy\",\n         category: \"Wellness\",\n         time: \"15 min\",\n         difficulty: \"Easy\",\n         servings: 1,\n         ingredients: [\"Fresh African sage (1/2 cup)\", \"Hot water (4 cups)\", \"Towel\", \"Bowl\"],\n         instructions: [\n           \"Boil water in large bowl\",\n           \"Add fresh sage leaves\",\n           \"Cover head with towel\",\n           \"Inhale steam for 10-15 minutes\"\n         ],\n         benefits: \"Respiratory support, relaxation, antimicrobial\"\n       },\n       {\n         title: \"African Sage Tea\",\n         category: \"Tea\",\n         time: \"5 min\",\n         difficulty: \"Easy\",\n         servings: 1,\n         ingredients: [\"Fresh African sage (1/4 cup)\", \"Hot water (1 cup)\", \"Honey (optional)\"],\n         instructions: [\n           \"Wash fresh sage leaves\",\n           \"Add to hot water\",\n           \"Steep for 5-7 minutes\",\n           \"Strain and add honey if desired\"\n         ],\n         benefits: \"Respiratory health, relaxation, steam therapy\"\n       }\n     ],\n     \"Chia Seeds\": [\n       {\n         title: \"Chia Seed Pudding\",\n         category: \"Cooking\",\n         time: \"10 min + overnight\",\n         difficulty: \"Easy\",\n         servings: 1,\n         ingredients: [\"Chia seeds (1/4 cup)\", \"Almond milk (1 cup)\", \"Honey (1 tbsp)\", \"Vanilla extract (1/2 tsp)\"],\n         instructions: [\n           \"Mix chia seeds with almond milk\",\n           \"Add honey and vanilla\",\n           \"Stir well and refrigerate overnight\",\n           \"Top with berries before serving\"\n         ],\n         benefits: \"High protein, omega-3, sustained energy\"\n       },\n       {\n         title: \"Chia Energy Smoothie\",\n         category: \"Smoothie\",\n         time: \"5 min\",\n         difficulty: \"Easy\",\n         servings: 1,\n         ingredients: [\"Chia seeds (2 tbsp)\", \"Banana (1)\", \"Berries (1/2 cup)\", \"Coconut water (1 cup)\"],\n         instructions: [\n           \"Soak chia seeds in coconut water for 10 minutes\",\n           \"Add all ingredients to blender\",\n           \"Blend until smooth\",\n           \"Enjoy immediately\"\n         ],\n         benefits: \"Energy boost, hydration, nutrient dense\"\n       }\n     ],\n     \"Urtica massaica\": [\n       {\n         title: \"African Nettle Soup\",\n         category: \"Cooking\",\n         time: \"30 min\",\n         difficulty: \"Medium\",\n         servings: 4,\n         ingredients: [\"Cooked nettle leaves (2 cups)\", \"Onion (1)\", \"Garlic (3 cloves)\", \"Vegetable broth (4 cups)\"],\n         instructions: [\n           \"Cook nettle leaves thoroughly to remove sting\",\n           \"Sauté onion and garlic\",\n           \"Add broth and cooked nettles\",\n           \"Simmer for 20 minutes\"\n         ],\n         benefits: \"Rich in minerals, joint health, anti-inflammatory\"\n       },\n       {\n         title: \"Nettle Tea\",\n         category: \"Tea\",\n         time: \"10 min\",\n         difficulty: \"Easy\",\n         servings: 1,\n         ingredients: [\"Dried nettle leaves (2 tsp)\", \"Hot water (1 cup)\", \"Honey (optional)\"],\n         instructions: [\n           \"Add dried nettle leaves to hot water\",\n           \"Steep for 5-7 minutes\",\n           \"Strain and add honey if desired\",\n           \"Enjoy warm\"\n         ],\n         benefits: \"Allergy relief, mineral rich, detox support\"\n       }\n     ],\n     \"Persea americana\": [\n       {\n         title: \"Avocado Leaf Tea\",\n         category: \"Tea\",\n         time: \"10 min\",\n         difficulty: \"Easy\",\n         servings: 1,\n         ingredients: [\"Fresh avocado leaves (3-4)\", \"Hot water (2 cups)\", \"Honey (optional)\"],\n         instructions: [\n           \"Wash fresh avocado leaves\",\n           \"Add to hot water\",\n           \"Simmer for 5-7 minutes\",\n           \"Strain and add honey if desired\"\n         ],\n         benefits: \"Heart health, traditional medicine, calming\"\n       },\n       {\n         title: \"Avocado Wellness Bowl\",\n         category: \"Cooking\",\n         time: \"15 min\",\n         difficulty: \"Easy\",\n         servings: 1,\n         ingredients: [\"Avocado (1/2)\", \"Quinoa (1/2 cup)\", \"Cherry tomatoes (1/2 cup)\", \"Olive oil (1 tbsp)\"],\n         instructions: [\n           \"Cook quinoa according to package\",\n           \"Slice avocado and tomatoes\",\n           \"Mix with olive oil and seasonings\",\n           \"Serve as a nutritious bowl\"\n         ],\n         benefits: \"Heart health, healthy fats, nutrient dense\"\n       }\n     ],\n     \"Bidens pilosa\": [\n       {\n         title: \"Black Jack Wound Healing Paste\",\n         category: \"Wellness\",\n         time: \"15 min\",\n         difficulty: \"Easy\",\n         servings: 1,\n         ingredients: [\"Fresh Black Jack leaves (1/2 cup)\", \"Honey (1 tbsp)\", \"Coconut oil (1 tsp)\"],\n         instructions: [\n           \"Crush fresh leaves into paste\",\n           \"Mix with honey and coconut oil\",\n           \"Apply to clean wounds\",\n           \"Cover with clean bandage\"\n         ],\n         benefits: \"Wound healing, antimicrobial, traditional medicine\"\n       },\n       {\n         title: \"Black Jack Tea\",\n         category: \"Tea\",\n         time: \"10 min\",\n         difficulty: \"Easy\",\n         servings: 1,\n         ingredients: [\"Fresh Black Jack leaves (1/4 cup)\", \"Hot water (1 cup)\", \"Honey (optional)\"],\n         instructions: [\n           \"Wash fresh leaves thoroughly\",\n           \"Add to hot water\",\n           \"Steep for 5-7 minutes\",\n           \"Strain and add honey if desired\"\n         ],\n         benefits: \"Blood sugar support, immune boost, traditional use\"\n       }\n     ]\n  };\n\n  return recipes[herbName as keyof typeof recipes] || [\n    {\n      title: `${herbName} Basic Tea`,\n      category: \"Tea\",\n      time: \"10 min\",\n      difficulty: \"Easy\",\n      servings: 1,\n      ingredients: [`Dried ${herbName} (2 tsp)`, \"Hot water (1 cup)\", \"Honey (1 tsp, optional)\"],\n      instructions: [\n        \"Add 2 tsp of dried herb to tea infuser\",\n        \"Pour hot water (not boiling)\",\n        \"Steep for 5-10 minutes\",\n        \"Remove infuser and add honey if desired\",\n        \"Enjoy while warm\"\n      ],\n      benefits: \"General wellness support, traditional preparation\"\n    },\n    {\n      title: `${herbName} Wellness Smoothie`,\n      category: \"Smoothie\",\n      time: \"5 min\",\n      difficulty: \"Easy\",\n      servings: 1,\n      ingredients: [`${herbName} powder (1 tsp)`, \"Banana (1)\", \"Almond milk (1 cup)\", \"Honey (1 tsp)\"],\n      instructions: [\n        \"Add all ingredients to blender\",\n        \"Blend until smooth and creamy\",\n        \"Add ice if desired\",\n        \"Enjoy immediately\"\n      ],\n      benefits: \"Nutrient boost, easy absorption, daily wellness\"\n    }\n  ];\n};\n\nexport default function HerbRecipes({ herb }: HerbRecipesProps) {\n  const recipes = getRecipesForHerb(herb.name);\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-xl font-semibold mb-4\">Recipes & Daily Integration</h3>\n        <p className=\"text-muted-foreground mb-6\">\n          Discover delicious ways to incorporate {herb.name} into your daily routine\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {recipes.map((recipe, index) => (\n          <Card key={index} className=\"overflow-hidden\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-start justify-between\">\n                <div>\n                  <CardTitle className=\"text-lg\">{recipe.title}</CardTitle>\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {recipeCategories[recipe.category as keyof typeof recipeCategories]?.icon} {recipe.category}\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className=\"h-3 w-3\" />\n                    {recipe.time}\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Users className=\"h-3 w-3\" />\n                    {recipe.servings}\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium text-sm mb-2\">Ingredients:</h4>\n                <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n                  {recipe.ingredients.map((ingredient, idx) => (\n                    <li key={idx}>{ingredient}</li>\n                  ))}\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium text-sm mb-2\">Instructions:</h4>\n                <ol className=\"list-decimal list-inside text-sm text-muted-foreground space-y-1\">\n                  {recipe.instructions.map((instruction, idx) => (\n                    <li key={idx}>{instruction}</li>\n                  ))}\n                </ol>\n              </div>\n\n              <div className=\"bg-muted p-3 rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <Star className=\"h-4 w-4 text-primary\" />\n                  <span className=\"font-medium text-sm\">Benefits</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">{recipe.benefits}</p>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <Card className=\"bg-blue-50 border-blue-200\">\n        <CardHeader>\n          <CardTitle className=\"text-blue-800\">Daily Integration Tips</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h4 className=\"font-medium text-blue-800 mb-2\">Morning Routine</h4>\n              <ul className=\"list-disc list-inside text-sm text-blue-700 space-y-1\">\n                <li>Add {herb.name} to your morning tea or smoothie</li>\n                <li>Mix powder into yogurt or oatmeal</li>\n                <li>Use fresh leaves in breakfast salads</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-blue-800 mb-2\">Evening Routine</h4>\n              <ul className=\"list-disc list-inside text-sm text-blue-700 space-y-1\">\n                <li>Enjoy {herb.name} tea before bedtime</li>\n                <li>Add to evening meals for flavor and benefits</li>\n                <li>Use in relaxing bath preparations</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":25934},"client/src/components/herbs/herb-search.tsx":{"content":"import { useState } from \"react\";\nimport { Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface HerbSearchProps {\n  onSearch: (query: string) => void;\n  placeholder?: string;\n}\n\nexport default function HerbSearch({ onSearch, placeholder = \"Search herbs by name or condition...\" }: HerbSearchProps) {\n  const [query, setQuery] = useState(\"\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch(query);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newQuery = e.target.value;\n    setQuery(newQuery);\n    // Debounce search for better UX\n    if (newQuery.length === 0 || newQuery.length >= 2) {\n      onSearch(newQuery);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"max-w-md mx-auto\">\n      <div className=\"relative\">\n        <Input\n          type=\"text\"\n          placeholder={placeholder}\n          value={query}\n          onChange={handleChange}\n          className=\"pl-12\"\n          data-testid=\"input-herb-search\"\n        />\n        <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground h-5 w-5\" />\n      </div>\n    </form>\n  );\n}\n","size_bytes":1204},"client/src/components/herbs/sourcing-guide.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MapPin, Globe, ShoppingBag, Leaf, Star, AlertTriangle } from \"lucide-react\";\nimport type { Herb } from \"@/shared/schema\";\n\ninterface SourcingGuideProps {\n  herb: Herb;\n}\n\nconst sourcingOptions = [\n  {\n    id: \"local-markets\",\n    title: \"Local Markets & Farmers\",\n    icon: MapPin,\n    description: \"Traditional markets and local farmers\",\n    pros: [\"Fresh and local\", \"Support local economy\", \"Often organic\", \"Bargain prices\"],\n    cons: [\"Limited selection\", \"Seasonal availability\", \"Quality varies\"],\n    tips: [\n      \"Ask vendors about freshness and origin\",\n      \"Visit early for best selection\",\n      \"Build relationships with regular vendors\",\n      \"Ask about growing methods\"\n    ],\n    bestFor: [\"Fresh leaves\", \"Local varieties\", \"Bulk purchases\", \"Seasonal herbs\"]\n  },\n  {\n    id: \"health-stores\",\n    title: \"Health Food Stores\",\n    icon: ShoppingBag,\n    description: \"Specialized health and wellness stores\",\n    pros: [\"Quality assurance\", \"Organic options\", \"Expert staff\", \"Consistent supply\"],\n    cons: [\"Higher prices\", \"Limited fresh options\", \"May be processed\"],\n    tips: [\n      \"Look for organic certification\",\n      \"Check expiration dates\",\n      \"Ask staff for recommendations\",\n      \"Compare prices between stores\"\n    ],\n    bestFor: [\"Powdered herbs\", \"Capsules\", \"Essential oils\", \"Rare herbs\"]\n  },\n  {\n    id: \"online-retailers\",\n    title: \"Online Retailers\",\n    icon: Globe,\n    description: \"E-commerce platforms and specialty sites\",\n    pros: [\"Wide selection\", \"Convenient\", \"Reviews available\", \"Bulk options\"],\n    cons: [\"Cannot inspect quality\", \"Shipping costs\", \"Delivery time\", \"Return issues\"],\n    tips: [\n      \"Read customer reviews carefully\",\n      \"Check for organic certification\",\n      \"Compare prices across sites\",\n      \"Start with small orders\"\n    ],\n    bestFor: [\"Rare herbs\", \"Bulk orders\", \"Convenience\", \"International varieties\"]\n  },\n  {\n    id: \"grow-own\",\n    title: \"Grow Your Own\",\n    icon: Leaf,\n    description: \"Home gardening and cultivation\",\n    pros: [\"Most rewarding\", \"Cost effective\", \"Fresh supply\", \"Control over quality\"],\n    cons: [\"Requires time\", \"Space needed\", \"Learning curve\", \"Seasonal limitations\"],\n    tips: [\n      \"Start with easy-to-grow herbs\",\n      \"Use containers if space is limited\",\n      \"Research growing requirements\",\n      \"Join local gardening groups\"\n    ],\n    bestFor: [\"Fresh leaves\", \"Continuous supply\", \"Cost savings\", \"Educational\"]\n  }\n];\n\nconst qualityIndicators = [\n  {\n    title: \"Fresh Herbs\",\n    indicators: [\n      \"Bright, vibrant color\",\n      \"Firm texture\",\n      \"Strong aroma\",\n      \"No wilting or browning\"\n    ]\n  },\n  {\n    title: \"Dried Herbs\",\n    indicators: [\n      \"Intact, whole pieces\",\n      \"Strong fragrance\",\n      \"No mold or moisture\",\n      \"Recent harvest date\"\n    ]\n  },\n  {\n    title: \"Powdered Herbs\",\n    indicators: [\n      \"Fine, consistent texture\",\n      \"Rich color\",\n      \"Strong aroma\",\n      \"Sealed packaging\"\n    ]\n  }\n];\n\nexport default function SourcingGuide({ herb }: SourcingGuideProps) {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-xl font-semibold mb-4\">Where to Find {herb.name}</h3>\n        <p className=\"text-muted-foreground mb-6\">\n          Discover the best places to source {herb.name} and how to ensure quality\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {sourcingOptions.map((option) => {\n          const IconComponent = option.icon;\n          return (\n            <Card key={option.id} className=\"overflow-hidden\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2 text-lg\">\n                  <IconComponent className=\"h-5 w-5\" />\n                  {option.title}\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground\">{option.description}</p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 gap-3\">\n                  <div>\n                    <h4 className=\"font-medium text-sm mb-2 flex items-center gap-1\">\n                      <Star className=\"h-4 w-4 text-green-600\" />\n                      Pros\n                    </h4>\n                    <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n                      {option.pros.map((pro, index) => (\n                        <li key={index}>{pro}</li>\n                      ))}\n                    </ul>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-sm mb-2 flex items-center gap-1\">\n                      <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                      Cons\n                    </h4>\n                    <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n                      {option.cons.map((con, index) => (\n                        <li key={index}>{con}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium text-sm mb-2\">Tips:</h4>\n                  <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n                    {option.tips.map((tip, index) => (\n                      <li key={index}>{tip}</li>\n                    ))}\n                  </ul>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium text-sm mb-2\">Best for:</h4>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {option.bestFor.map((item) => (\n                      <Badge key={item} variant=\"secondary\" className=\"text-xs\">\n                        {item}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      <Card className=\"bg-green-50 border-green-200\">\n        <CardHeader>\n          <CardTitle className=\"text-green-800\">Quality Indicators</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {qualityIndicators.map((category) => (\n              <div key={category.title}>\n                <h4 className=\"font-medium text-green-800 mb-2\">{category.title}</h4>\n                <ul className=\"list-disc list-inside text-sm text-green-700 space-y-1\">\n                  {category.indicators.map((indicator, index) => (\n                    <li key={index}>{indicator}</li>\n                  ))}\n                </ul>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {herb.region && (\n        <Card className=\"bg-blue-50 border-blue-200\">\n          <CardHeader>\n            <CardTitle className=\"text-blue-800\">Regional Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-blue-700 text-sm\">\n              {herb.name} is native to {herb.region}. \n              {herb.isIndigenous === \"true\" \n                ? \" This indigenous herb has been used traditionally in local communities for generations. Look for it in local markets and traditional medicine shops.\"\n                : \" This herb has been adopted globally and is now widely available in most regions.\"\n              }\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      <Card className=\"bg-yellow-50 border-yellow-200\">\n        <CardHeader>\n          <CardTitle className=\"text-yellow-800\">Safety Reminders</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ul className=\"list-disc list-inside text-sm text-yellow-700 space-y-1\">\n            <li>Always verify the source and quality of herbs</li>\n            <li>Check for organic certification when possible</li>\n            <li>Avoid herbs that look moldy, discolored, or have unusual odors</li>\n            <li>Store herbs properly to maintain freshness and potency</li>\n            <li>Consult with healthcare providers about herb interactions</li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8381},"client/src/components/herbs/wellness-tracker.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar, Plus, CheckCircle, Clock, TrendingUp, Trash2 } from \"lucide-react\";\nimport type { Herb } from \"@/shared/schema\";\n\ninterface WellnessTrackerProps {\n  herb: Herb;\n}\n\ninterface WellnessEntry {\n  id: string;\n  date: string;\n  dosage: string;\n  method: string;\n  effects: string;\n  notes: string;\n}\n\nconst wellnessMetrics = [\n  {\n    id: \"energy\",\n    label: \"Energy Level\",\n    options: [\"Very Low\", \"Low\", \"Normal\", \"High\", \"Very High\"]\n  },\n  {\n    id: \"sleep\",\n    label: \"Sleep Quality\",\n    options: [\"Poor\", \"Fair\", \"Good\", \"Very Good\", \"Excellent\"]\n  },\n  {\n    id: \"mood\",\n    label: \"Mood\",\n    options: [\"Very Low\", \"Low\", \"Normal\", \"Good\", \"Excellent\"]\n  },\n  {\n    id: \"digestion\",\n    label: \"Digestion\",\n    options: [\"Poor\", \"Fair\", \"Good\", \"Very Good\", \"Excellent\"]\n  }\n];\n\nexport default function WellnessTracker({ herb }: WellnessTrackerProps) {\n  const [entries, setEntries] = useState<WellnessEntry[]>(() => {\n    const saved = localStorage.getItem(`wellness-tracker-${herb.id}`);\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [showForm, setShowForm] = useState(false);\n  const [newEntry, setNewEntry] = useState({\n    dosage: \"\",\n    method: \"\",\n    effects: \"\",\n    notes: \"\"\n  });\n  const [quickAssessment, setQuickAssessment] = useState({\n    energy: \"\",\n    sleep: \"\",\n    mood: \"\",\n    digestion: \"\"\n  });\n\n  const addEntry = () => {\n    const entry: WellnessEntry = {\n      id: Date.now().toString(),\n      date: new Date().toISOString().split('T')[0],\n      ...newEntry\n    };\n    const updatedEntries = [entry, ...entries];\n    setEntries(updatedEntries);\n    localStorage.setItem(`wellness-tracker-${herb.id}`, JSON.stringify(updatedEntries));\n    setNewEntry({ dosage: \"\", method: \"\", effects: \"\", notes: \"\" });\n    setShowForm(false);\n  };\n\n  const updateQuickAssessment = (metric: string, value: string) => {\n    setQuickAssessment(prev => ({\n      ...prev,\n      [metric]: value\n    }));\n  };\n\n  const saveQuickAssessment = () => {\n    const effects = Object.entries(quickAssessment)\n      .filter(([_, value]) => value)\n      .map(([key, value]) => `${key}: ${value}`)\n      .join(', ');\n    \n    const entry: WellnessEntry = {\n      id: Date.now().toString(),\n      date: new Date().toISOString().split('T')[0],\n      dosage: \"Quick Assessment\",\n      method: \"Daily Check-in\",\n      effects: effects || \"No specific effects noted\",\n      notes: \"Quick wellness assessment completed\"\n    };\n    \n    const updatedEntries = [entry, ...entries];\n    setEntries(updatedEntries);\n    localStorage.setItem(`wellness-tracker-${herb.id}`, JSON.stringify(updatedEntries));\n    setQuickAssessment({ energy: \"\", sleep: \"\", mood: \"\", digestion: \"\" });\n  };\n\n  const getRecentEntries = () => entries.slice(0, 5);\n\n  const deleteEntry = (entryId: string) => {\n    const updatedEntries = entries.filter(entry => entry.id !== entryId);\n    setEntries(updatedEntries);\n    localStorage.setItem(`wellness-tracker-${herb.id}`, JSON.stringify(updatedEntries));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-xl font-semibold mb-4\">Wellness Tracker</h3>\n        <p className=\"text-muted-foreground mb-6\">\n          Track your {herb.name} usage and monitor how it affects your wellbeing\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Plus className=\"h-5 w-5\" />\n              Add New Entry\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {!showForm ? (\n              <Button \n                onClick={() => setShowForm(true)}\n                className=\"w-full\"\n              >\n                Track Today's Usage\n              </Button>\n            ) : (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Dosage</label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"e.g., 1 tsp powder, 1 cup tea\"\n                    className=\"w-full p-2 border rounded-md\"\n                    value={newEntry.dosage}\n                    onChange={(e) => setNewEntry({...newEntry, dosage: e.target.value})}\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Method</label>\n                  <select\n                    className=\"w-full p-2 border rounded-md\"\n                    value={newEntry.method}\n                    onChange={(e) => setNewEntry({...newEntry, method: e.target.value})}\n                  >\n                    <option value=\"\">Select method</option>\n                    {herb.preparationMethods.map((method) => (\n                      <option key={method} value={method}>{method}</option>\n                    ))}\n                  </select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Effects</label>\n                  <Textarea\n                    placeholder=\"How did you feel after using this herb?\"\n                    value={newEntry.effects}\n                    onChange={(e) => setNewEntry({...newEntry, effects: e.target.value})}\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Notes</label>\n                  <Textarea\n                    placeholder=\"Any additional observations or notes\"\n                    value={newEntry.notes}\n                    onChange={(e) => setNewEntry({...newEntry, notes: e.target.value})}\n                  />\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button onClick={addEntry} className=\"flex-1\">\n                    Save Entry\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setShowForm(false)}\n                    className=\"flex-1\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Quick Assessment\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {wellnessMetrics.map((metric) => (\n                <div key={metric.id}>\n                  <label className=\"text-sm font-medium mb-2 block\">{metric.label}</label>\n                  <div className=\"flex gap-2\">\n                    {metric.options.map((option) => (\n                      <Button\n                        key={option}\n                        variant={quickAssessment[metric.id as keyof typeof quickAssessment] === option ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        className=\"flex-1 text-xs\"\n                        onClick={() => updateQuickAssessment(metric.id, option)}\n                      >\n                        {option}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              ))}\n              <Button \n                onClick={saveQuickAssessment}\n                className=\"w-full mt-4\"\n                disabled={!Object.values(quickAssessment).some(value => value)}\n              >\n                Save Assessment\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Recent Entries\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {getRecentEntries().length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Clock className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No entries yet. Start tracking your {herb.name} usage!</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {getRecentEntries().map((entry) => (\n                <div key={entry.id} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      <span className=\"font-medium\">{entry.date}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\">{entry.method}</Badge>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => deleteEntry(entry.id)}\n                        className=\"h-6 w-6 p-0 text-red-500 hover:text-red-700\"\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"font-medium\">Dosage:</span> {entry.dosage}\n                    </div>\n                    {entry.effects && (\n                      <div>\n                        <span className=\"font-medium\">Effects:</span> {entry.effects}\n                      </div>\n                    )}\n                  </div>\n                  {entry.notes && (\n                    <div className=\"mt-2 text-sm text-muted-foreground\">\n                      <span className=\"font-medium\">Notes:</span> {entry.notes}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-blue-50 border-blue-200\">\n        <CardHeader>\n          <CardTitle className=\"text-blue-800\">Tracking Tips</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h4 className=\"font-medium text-blue-800 mb-2\">What to Track</h4>\n              <ul className=\"list-disc list-inside text-sm text-blue-700 space-y-1\">\n                <li>Dosage and frequency</li>\n                <li>Preparation method</li>\n                <li>How you feel before and after</li>\n                <li>Any side effects or reactions</li>\n                <li>Changes in sleep, energy, or mood</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-blue-800 mb-2\">Best Practices</h4>\n              <ul className=\"list-disc list-inside text-sm text-blue-700 space-y-1\">\n                <li>Track consistently for at least 2 weeks</li>\n                <li>Note the time of day you take herbs</li>\n                <li>Record any other supplements or medications</li>\n                <li>Share your findings with healthcare providers</li>\n                <li>Listen to your body's signals</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11646},"client/src/components/layout/footer.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Leaf } from \"lucide-react\";\n\nexport default function Footer() {\n  const [location, setLocation] = useLocation();\n\n  const handleNavigation = (path: string) => {\n    setLocation(path);\n  };\n\n  return (\n    <footer className=\"bg-card border-t border-border mt-auto\">\n      <div className=\"max-w-6xl mx-auto px-4 py-12 pt-[10px] pb-[10px]\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"col-span-1 md:col-span-2\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <Leaf className=\"text-primary text-2xl\" />\n              <span className=\"text-xl font-bold text-primary\">Herbal Care Hub</span>\n            </div>\n            <p className=\"text-muted-foreground mb-4\">\n              Empowering natural wellness through traditional herbal wisdom and modern safety practices.\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Making herbal knowledge simple, safe, and accessible for everyone.\n            </p>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold mb-4\">Quick Links</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <button \n                  onClick={() => handleNavigation(\"/herbs\")} \n                  className=\"text-muted-foreground hover:text-primary transition-colors text-left w-full\"\n                  data-testid=\"footer-link-herbs\"\n                >\n                  Herbs Library\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => handleNavigation(\"/wellbeing\")} \n                  className=\"text-muted-foreground hover:text-primary transition-colors text-left w-full\"\n                  data-testid=\"footer-link-wellbeing\"\n                >\n                  Wellbeing\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => handleNavigation(\"/ailments\")} \n                  className=\"text-muted-foreground hover:text-primary transition-colors text-left w-full\"\n                  data-testid=\"footer-link-ailments\"\n                >\n                  Ailments\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => handleNavigation(\"/videos\")} \n                  className=\"text-muted-foreground hover:text-primary transition-colors text-left w-full\"\n                  data-testid=\"footer-link-videos\"\n                >\n                  Videos\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => handleNavigation(\"/community\")} \n                  className=\"text-muted-foreground hover:text-primary transition-colors text-left w-full\"\n                  data-testid=\"footer-link-community\"\n                >\n                  Community\n                </button>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold mb-4\">Resources</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <button \n                  onClick={() => handleNavigation(\"/about\")} \n                  className=\"text-muted-foreground hover:text-primary transition-colors text-left w-full\"\n                  data-testid=\"footer-link-about\"\n                >\n                  About Us\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => handleNavigation(\"/contact\")} \n                  className=\"text-muted-foreground hover:text-primary transition-colors text-left w-full\"\n                  data-testid=\"footer-link-contact\"\n                >\n                  Contact\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => handleNavigation(\"/safety-guidelines\")} \n                  className=\"text-muted-foreground hover:text-primary transition-colors text-left w-full\"\n                  data-testid=\"footer-link-safety-guidelines\"\n                >\n                  Safety Guidelines\n                </button>\n              </li>\n              <li>\n                <button \n                  onClick={() => handleNavigation(\"/privacy-policy\")} \n                  className=\"text-muted-foreground hover:text-primary transition-colors text-left w-full\"\n                  data-testid=\"footer-link-privacy-policy\"\n                >\n                  Privacy Policy\n                </button>\n              </li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border mt-8 pt-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-sm text-muted-foreground mb-4 md:mb-0\">\n              © 2024 Herbal Care Hub. All rights reserved.\n            </p>\n            <div className=\"bg-yellow-50 border border-yellow-200 px-4 py-2 rounded-lg\">\n              <p className=\"text-xs text-yellow-800 font-medium\">\n                Educational content only - Not medical advice. Consult healthcare providers for medical concerns.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5380},"client/src/components/layout/navigation.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, X, Leaf, ChevronDown, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport type { Herb } from \"@/shared/schema\";\n\nexport default function Navigation() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showSearchResults, setShowSearchResults] = useState(false);\n  const [location] = useLocation();\n  const searchRef = useRef<HTMLDivElement>(null);\n\n  // Close search results when clicking outside\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setShowSearchResults(false);\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const { data: herbs } = useQuery<Herb[]>({\n    queryKey: [\"/api/herbs\"],\n  });\n\n  // Search functionality\n  const filteredHerbs = herbs?.filter(herb =>\n    herb.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    herb.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    herb.benefits.some(benefit => benefit.toLowerCase().includes(searchQuery.toLowerCase()))\n  ) || [];\n\n  const navItems = [\n    { path: \"/\", label: \"Home\" },\n    { path: \"/herbs\", label: \"Herbs Library\" },\n    { path: \"/wellbeing\", label: \"Wellbeing\", hasDropdown: true },\n    { path: \"/ailments\", label: \"Ailments\" },\n    { path: \"/videos\", label: \"Videos\" },\n    { path: \"/community\", label: \"Community\" },\n    { path: \"/about\", label: \"About\" },\n    { path: \"/contact\", label: \"Contact\" },\n  ];\n\n  const wellbeingCategories = [\n    { path: \"/mental-health\", label: \"Mental Health\" },\n    { path: \"/energy\", label: \"Energy\" },\n    { path: \"/sleep\", label: \"Sleep\" },\n    { path: \"/weight-balance\", label: \"Weight Balance\" },\n    { path: \"/general-wellness\", label: \"General Wellness\" },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/\") {\n      return location === \"/\";\n    }\n    return location.startsWith(path);\n  };\n\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-50 shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n            <Leaf className=\"text-primary text-2xl\" />\n            <span className=\"text-xl font-bold text-primary\">Herbal Care Hub</span>\n          </Link>\n          \n          {/* Desktop Search Bar */}\n          <div className=\"hidden md:flex flex-1 max-w-md mx-8 relative\" ref={searchRef}>\n            <div className=\"relative w-full\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search herbs, benefits, health concerns...\"\n                value={searchQuery}\n                onChange={(e) => {\n                  setSearchQuery(e.target.value);\n                  setShowSearchResults(e.target.value.length > 0);\n                }}\n                onFocus={() => setShowSearchResults(searchQuery.length > 0)}\n                className=\"pl-10 pr-4\"\n              />\n              \n              {/* Search Results Dropdown */}\n              {showSearchResults && searchQuery && (\n                <div className=\"absolute top-full left-0 right-0 mt-1 bg-card rounded-lg shadow-lg border border-border max-h-64 overflow-y-auto z-50\">\n                  {filteredHerbs.slice(0, 5).map((herb) => (\n                    <Link key={herb.id} href={`/herbs#${herb.id}`}>\n                      <div \n                        className=\"p-3 hover:bg-accent/10 cursor-pointer border-b border-border last:border-b-0\"\n                        onClick={() => {\n                          setSearchQuery(\"\");\n                          setShowSearchResults(false);\n                        }}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <span className=\"text-xl\">{herb.emoji}</span>\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"font-semibold text-foreground truncate\">{herb.name}</h3>\n                            <p className=\"text-sm text-muted-foreground line-clamp-1\">{herb.description}</p>\n                            <div className=\"flex flex-wrap gap-1 mt-1\">\n                              {herb.benefits.slice(0, 2).map((benefit, index) => (\n                                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                  {benefit}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </Link>\n                  ))}\n                  {filteredHerbs.length > 5 && (\n                    <div className=\"p-3 text-center text-sm text-muted-foreground border-t border-border\">\n                      And {filteredHerbs.length - 5} more herbs...\n                    </div>\n                  )}\n                  {filteredHerbs.length === 0 && (\n                    <div className=\"p-3 text-center text-sm text-muted-foreground\">\n                      No herbs found matching \"{searchQuery}\"\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex space-x-8\">\n            {navItems.map((item) => (\n              item.hasDropdown ? (\n                <DropdownMenu key={item.path}>\n                  <DropdownMenuTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      className={`nav-link font-medium ${isActive(item.path) ? \"active\" : \"\"}`}\n                      data-testid={`link-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n                    >\n                      {item.label}\n                      <ChevronDown className=\"ml-1 h-4 w-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"start\">\n                    <DropdownMenuItem asChild>\n                      <Link href={item.path}>Overview</Link>\n                    </DropdownMenuItem>\n                    {wellbeingCategories.map((category) => (\n                      <DropdownMenuItem key={category.path} asChild>\n                        <Link href={category.path}>{category.label}</Link>\n                      </DropdownMenuItem>\n                    ))}\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              ) : (\n                <Link\n                  key={item.path}\n                  href={item.path}\n                  className={`nav-link font-medium ${isActive(item.path) ? \"active\" : \"\"}`}\n                  data-testid={`link-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n                >\n                  {item.label}\n                </Link>\n              )\n            ))}\n          </div>\n          \n          {/* Mobile Menu Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"md:hidden\"\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            data-testid=\"button-mobile-menu\"\n          >\n            {isMobileMenuOpen ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n          </Button>\n        </div>\n        \n        {/* Mobile Navigation */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1 bg-card border-t border-border\">\n              {/* Mobile Search Bar */}\n              <div className=\"relative mb-4\" ref={searchRef}>\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search herbs...\"\n                  value={searchQuery}\n                  onChange={(e) => {\n                    setSearchQuery(e.target.value);\n                    setShowSearchResults(e.target.value.length > 0);\n                  }}\n                  onFocus={() => setShowSearchResults(searchQuery.length > 0)}\n                  className=\"pl-10 pr-4\"\n                />\n                \n                {/* Mobile Search Results */}\n                {showSearchResults && searchQuery && (\n                  <div className=\"absolute top-full left-0 right-0 mt-1 bg-card rounded-lg shadow-lg border border-border max-h-48 overflow-y-auto z-50\">\n                    {filteredHerbs.slice(0, 3).map((herb) => (\n                      <Link key={herb.id} href={`/herbs#${herb.id}`}>\n                        <div \n                          className=\"p-3 hover:bg-accent/10 cursor-pointer border-b border-border last:border-b-0\"\n                          onClick={() => {\n                            setSearchQuery(\"\");\n                            setShowSearchResults(false);\n                            setIsMobileMenuOpen(false);\n                          }}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <span className=\"text-lg\">{herb.emoji}</span>\n                            <div className=\"flex-1 min-w-0\">\n                              <h3 className=\"font-semibold text-foreground text-sm\">{herb.name}</h3>\n                              <p className=\"text-xs text-muted-foreground line-clamp-1\">{herb.description}</p>\n                            </div>\n                          </div>\n                        </div>\n                      </Link>\n                    ))}\n                    {filteredHerbs.length === 0 && (\n                      <div className=\"p-3 text-center text-sm text-muted-foreground\">\n                        No herbs found\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n              \n              {navItems.map((item) => (\n                <Link\n                  key={item.path}\n                  href={item.path}\n                  className={`nav-link block px-3 py-2 ${isActive(item.path) ? \"active\" : \"\"}`}\n                  onClick={() => setIsMobileMenuOpen(false)}\n                  data-testid={`mobile-link-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n                >\n                  {item.label}\n                </Link>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":11195},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/floating-ai-assistant.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Bot, Send } from \"lucide-react\";\n\ninterface ChatMessage {\n  id: string;\n  type: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\nexport default function FloatingAIAssistant() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([\n    {\n      id: '1',\n      type: 'assistant',\n             content: \"Hello! I'm your herbal wellness help assistant. I can help you find herbs for specific health concerns, suggest preparation methods, or answer questions about natural remedies. What would you like to know?\",\n      timestamp: new Date()\n    }\n  ]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const latestResponseRef = useRef<HTMLDivElement>(null);\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n\n  // Scroll to top of latest AI response for better reading experience\n  useEffect(() => {\n    if (!isTyping && latestResponseRef.current && scrollContainerRef.current && chatMessages.length > 1) {\n      const latestMessage = chatMessages[chatMessages.length - 1];\n      if (latestMessage.type === 'assistant') {\n        setTimeout(() => {\n          if (scrollContainerRef.current && latestResponseRef.current) {\n            // Scroll to the AI response position\n            const responseTop = latestResponseRef.current.offsetTop - 20;\n            scrollContainerRef.current.scrollTo({\n              top: responseTop,\n              behavior: 'smooth'\n            });\n          }\n        }, 300);\n      }\n    }\n  }, [chatMessages, isTyping]);\n\n\n  const handleSendMessage = async () => {\n    if (!userInput.trim()) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: userInput,\n      timestamp: new Date()\n    };\n\n    setChatMessages(prev => [...prev, userMessage]);\n    const currentInput = userInput;\n    setUserInput(\"\");\n    setIsTyping(true);\n\n    try {\n      // Call the real Gemini API\n      const response = await fetch('/api/ai/wellness', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: currentInput })\n      });\n\n      const data = await response.json();\n      \n      const assistantMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        type: 'assistant',\n        content: data.response || \"I'm sorry, I couldn't process your request right now. Please try again.\",\n        timestamp: new Date()\n      };\n      \n      setChatMessages(prev => [...prev, assistantMessage]);\n    } catch (error) {\n      console.error('Error calling AI API:', error);\n      const errorMessage: ChatMessage = {\n        id: (Date.now() + 2).toString(),\n        type: 'assistant',\n        content: \"I'm experiencing technical difficulties. Please try again in a moment.\",\n        timestamp: new Date()\n      };\n      setChatMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      <Dialog open={isOpen} onOpenChange={setIsOpen}>\n        <DialogTrigger asChild>\n          <Button\n            size=\"lg\"\n            className=\"rounded-full w-16 h-16 shadow-lg hover:shadow-xl transition-all duration-200 bg-primary hover:bg-primary/90\"\n          >\n            <Bot className=\"h-6 w-6\" />\n          </Button>\n        </DialogTrigger>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] flex flex-col border-2 border-primary/20 shadow-xl\">\n          <DialogHeader>\n                         <DialogTitle className=\"flex items-center gap-2\">\n               <Bot className=\"h-5 w-5\" />\n               Herbal Wellness Help Assistant\n             </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"flex-1 flex flex-col min-h-0\">\n            {/* Chat Messages */}\n            <div ref={scrollContainerRef} className=\"flex-1 overflow-y-auto space-y-4 mb-4 p-4 bg-muted/20 rounded-lg\">\n              {chatMessages.map((message, index) => (\n                <div\n                  key={message.id}\n                  ref={message.type === 'assistant' && index === chatMessages.length - 1 ? latestResponseRef : null}\n                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n                >\n                  <div\n                    className={`max-w-[80%] p-3 rounded-lg ${\n                      message.type === 'user'\n                        ? 'bg-primary text-primary-foreground'\n                        : 'bg-card border border-border'\n                    }`}\n                  >\n                    <p className=\"text-sm\">{message.content}</p>\n                    <p className=\"text-xs opacity-70 mt-1\">\n                      {message.timestamp.toLocaleTimeString()}\n                    </p>\n                  </div>\n                </div>\n              ))}\n              {isTyping && (\n                <div className=\"flex justify-start\">\n                  <div className=\"bg-card border border-border p-3 rounded-lg\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\"></div>\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              <div ref={messagesEndRef} />\n            </div>\n            \n            {/* Input Area */}\n            <div className=\"flex gap-2\">\n              <Textarea\n                placeholder=\"Ask about herbs, health concerns, or preparation methods...\"\n                value={userInput}\n                onChange={(e) => setUserInput(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage()}\n                className=\"flex-1 resize-none\"\n                rows={2}\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={!userInput.trim() || isTyping}\n                className=\"px-4\"\n              >\n                <Send className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            \n            {/* Quick Suggestions */}\n            <div className=\"mt-3\">\n              <p className=\"text-xs text-muted-foreground mb-2\">Quick suggestions:</p>\n              <div className=\"flex flex-wrap gap-2\">\n                {[\n                  \"Help me sleep better\",\n                  \"Boost my energy\",\n                  \"Digestive support\",\n                  \"Stress relief\",\n                  \"Skin health\",\n                  \"Weight management\"\n                ].map((suggestion) => (\n                  <Button\n                    key={suggestion}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setUserInput(suggestion);\n                      setTimeout(() => handleSendMessage(), 100);\n                    }}\n                    className=\"text-xs\"\n                  >\n                    {suggestion}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":7812},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"drizzle.config.js":{"content":"import { defineConfig } from \"drizzle-kit\";\nif (!process.env.DATABASE_URL) {\n    throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\nexport default defineConfig({\n    out: \"./migrations\",\n    schema: \"./shared/schema.ts\",\n    dialect: \"postgresql\",\n    dbCredentials: {\n        url: process.env.DATABASE_URL,\n    },\n});\n","size_bytes":339},"tailwind.config.js":{"content":"export default {\n    darkMode: [\"class\"],\n    content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n    theme: {\n        extend: {\n            borderRadius: {\n                lg: \"var(--radius)\",\n                md: \"calc(var(--radius) - 2px)\",\n                sm: \"calc(var(--radius) - 4px)\",\n            },\n            colors: {\n                background: \"var(--background)\",\n                foreground: \"var(--foreground)\",\n                card: {\n                    DEFAULT: \"var(--card)\",\n                    foreground: \"var(--card-foreground)\",\n                },\n                popover: {\n                    DEFAULT: \"var(--popover)\",\n                    foreground: \"var(--popover-foreground)\",\n                },\n                primary: {\n                    DEFAULT: \"var(--primary)\",\n                    foreground: \"var(--primary-foreground)\",\n                },\n                secondary: {\n                    DEFAULT: \"var(--secondary)\",\n                    foreground: \"var(--secondary-foreground)\",\n                },\n                muted: {\n                    DEFAULT: \"var(--muted)\",\n                    foreground: \"var(--muted-foreground)\",\n                },\n                accent: {\n                    DEFAULT: \"var(--accent)\",\n                    foreground: \"var(--accent-foreground)\",\n                },\n                destructive: {\n                    DEFAULT: \"var(--destructive)\",\n                    foreground: \"var(--destructive-foreground)\",\n                },\n                border: \"var(--border)\",\n                input: \"var(--input)\",\n                ring: \"var(--ring)\",\n                chart: {\n                    \"1\": \"var(--chart-1)\",\n                    \"2\": \"var(--chart-2)\",\n                    \"3\": \"var(--chart-3)\",\n                    \"4\": \"var(--chart-4)\",\n                    \"5\": \"var(--chart-5)\",\n                },\n                sidebar: {\n                    DEFAULT: \"var(--sidebar)\",\n                    foreground: \"var(--sidebar-foreground)\",\n                    primary: \"var(--sidebar-primary)\",\n                    \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n                    accent: \"var(--sidebar-accent)\",\n                    \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n                    border: \"var(--sidebar-border)\",\n                    ring: \"var(--sidebar-ring)\",\n                },\n            },\n            fontFamily: {\n                sans: [\"var(--font-sans)\"],\n                serif: [\"var(--font-serif)\"],\n                mono: [\"var(--font-mono)\"],\n            },\n            keyframes: {\n                \"accordion-down\": {\n                    from: {\n                        height: \"0\",\n                    },\n                    to: {\n                        height: \"var(--radix-accordion-content-height)\",\n                    },\n                },\n                \"accordion-up\": {\n                    from: {\n                        height: \"var(--radix-accordion-content-height)\",\n                    },\n                    to: {\n                        height: \"0\",\n                    },\n                },\n            },\n            animation: {\n                \"accordion-down\": \"accordion-down 0.2s ease-out\",\n                \"accordion-up\": \"accordion-up 0.2s ease-out\",\n            },\n        },\n    },\n    plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n};\n","size_bytes":3450},"vite.config.js":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nexport default defineConfig({\n    plugins: [\n        react(),\n    ],\n    resolve: {\n        alias: {\n            \"@\": path.resolve(__dirname, \"client\", \"src\"),\n            \"@shared\": path.resolve(__dirname, \"shared\"),\n            \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n            \"@/shared\": path.resolve(__dirname, \"shared\"),\n        },\n        extensions: ['.tsx', '.ts', '.jsx', '.js', '.json'],\n    },\n    root: path.resolve(__dirname, \"client\"),\n    build: {\n        outDir: path.resolve(__dirname, \"dist/public\"),\n        emptyOutDir: true,\n    },\n    server: {\n        host: \"0.0.0.0\",\n        port: 5000,\n        fs: {\n            strict: false,\n            deny: [\"**/.*\"],\n        },\n        hmr: {\n            clientPort: undefined,\n        },\n    },\n    esbuild: {\n        loader: 'tsx',\n    },\n});\n","size_bytes":1033},"client/tailwind.config.js":{"content":"export default {\n    darkMode: [\"class\"],\n    content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n    theme: {\n        extend: {\n            borderRadius: {\n                lg: \"var(--radius)\",\n                md: \"calc(var(--radius) - 2px)\",\n                sm: \"calc(var(--radius) - 4px)\",\n            },\n            colors: {\n                background: \"var(--background)\",\n                foreground: \"var(--foreground)\",\n                card: {\n                    DEFAULT: \"var(--card)\",\n                    foreground: \"var(--card-foreground)\",\n                },\n                popover: {\n                    DEFAULT: \"var(--popover)\",\n                    foreground: \"var(--popover-foreground)\",\n                },\n                primary: {\n                    DEFAULT: \"var(--primary)\",\n                    foreground: \"var(--primary-foreground)\",\n                },\n                secondary: {\n                    DEFAULT: \"var(--secondary)\",\n                    foreground: \"var(--secondary-foreground)\",\n                },\n                muted: {\n                    DEFAULT: \"var(--muted)\",\n                    foreground: \"var(--muted-foreground)\",\n                },\n                accent: {\n                    DEFAULT: \"var(--accent)\",\n                    foreground: \"var(--accent-foreground)\",\n                },\n                destructive: {\n                    DEFAULT: \"var(--destructive)\",\n                    foreground: \"var(--destructive-foreground)\",\n                },\n                border: \"var(--border)\",\n                input: \"var(--input)\",\n                ring: \"var(--ring)\",\n                chart: {\n                    \"1\": \"var(--chart-1)\",\n                    \"2\": \"var(--chart-2)\",\n                    \"3\": \"var(--chart-3)\",\n                    \"4\": \"var(--chart-4)\",\n                    \"5\": \"var(--chart-5)\",\n                },\n                sidebar: {\n                    DEFAULT: \"var(--sidebar)\",\n                    foreground: \"var(--sidebar-foreground)\",\n                    primary: \"var(--sidebar-primary)\",\n                    \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n                    accent: \"var(--sidebar-accent)\",\n                    \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n                    border: \"var(--sidebar-border)\",\n                    ring: \"var(--sidebar-ring)\",\n                },\n            },\n            fontFamily: {\n                sans: [\"var(--font-sans)\"],\n                serif: [\"var(--font-serif)\"],\n                mono: [\"var(--font-mono)\"],\n            },\n            keyframes: {\n                \"accordion-down\": {\n                    from: {\n                        height: \"0\",\n                    },\n                    to: {\n                        height: \"var(--radix-accordion-content-height)\",\n                    },\n                },\n                \"accordion-up\": {\n                    from: {\n                        height: \"var(--radix-accordion-content-height)\",\n                    },\n                    to: {\n                        height: \"0\",\n                    },\n                },\n            },\n            animation: {\n                \"accordion-down\": \"accordion-down 0.2s ease-out\",\n                \"accordion-up\": \"accordion-up 0.2s ease-out\",\n            },\n        },\n    },\n    plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n};\n","size_bytes":3450},"client/vite.config.js":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nexport default defineConfig({\n    plugins: [react()],\n    resolve: {\n        alias: {\n            \"@\": path.resolve(__dirname, \"src\"),\n            \"@/shared\": path.resolve(__dirname, \"..\", \"shared\"),\n        },\n    },\n    server: {\n        port: 5173,\n        host: true,\n    },\n});\n","size_bytes":387},"server/index.js":{"content":"import express from \"express\";\nimport path from \"path\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n// Serve static assets\napp.use('/attached_assets', express.static(path.join(process.cwd(), 'attached_assets')));\napp.use((req, res, next) => {\n    const start = Date.now();\n    const path = req.path;\n    let capturedJsonResponse = undefined;\n    const originalResJson = res.json;\n    res.json = function (bodyJson, ...args) {\n        capturedJsonResponse = bodyJson;\n        return originalResJson.apply(res, [bodyJson, ...args]);\n    };\n    res.on(\"finish\", () => {\n        const duration = Date.now() - start;\n        if (path.startsWith(\"/api\")) {\n            let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n            if (capturedJsonResponse) {\n                logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n            }\n            if (logLine.length > 80) {\n                logLine = logLine.slice(0, 79) + \"…\";\n            }\n            log(logLine);\n        }\n    });\n    next();\n});\n(async () => {\n    const server = await registerRoutes(app);\n    app.use((err, _req, res, _next) => {\n        const status = err.status || err.statusCode || 500;\n        const message = err.message || \"Internal Server Error\";\n        res.status(status).json({ message });\n        throw err;\n    });\n    // importantly only setup vite in development and after\n    // setting up all the other routes so the catch-all route\n    // doesn't interfere with the other routes\n    if (app.get(\"env\") === \"development\") {\n        await setupVite(app, server);\n    }\n    else {\n        serveStatic(app);\n    }\n    // ALWAYS serve the app on the port specified in the environment variable PORT\n    // Other ports are firewalled. Default to 5000 if not specified.\n    // this serves both the API and the client.\n    // It is the only port that is not firewalled.\n    const port = parseInt(process.env.PORT || '5000', 10);\n    server.listen({\n        port,\n        host: \"0.0.0.0\",\n    }, () => {\n        log(`serving on port ${port}`);\n    });\n})();\n","size_bytes":2222},"server/routes.js":{"content":"import { createServer } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertContactMessageSchema, insertCommunityPostSchema, insertCommunityCommentSchema } from \"../shared/schema\";\nimport { z } from \"zod\";\nexport async function registerRoutes(app) {\n    // Get all herbs\n    app.get(\"/api/herbs\", async (req, res) => {\n        try {\n            const herbs = await storage.getAllHerbs();\n            res.json(herbs);\n        }\n        catch (error) {\n            res.status(500).json({ message: \"Failed to fetch herbs\" });\n        }\n    });\n    // Get herbs by category\n    app.get(\"/api/herbs/category/:category\", async (req, res) => {\n        try {\n            const { category } = req.params;\n            const herbs = await storage.getHerbsByCategory(category);\n            res.json(herbs);\n        }\n        catch (error) {\n            res.status(500).json({ message: \"Failed to fetch herbs by category\" });\n        }\n    });\n    // Search herbs\n    app.get(\"/api/herbs/search\", async (req, res) => {\n        try {\n            const { q } = req.query;\n            if (!q || typeof q !== 'string') {\n                return res.status(400).json({ message: \"Search query is required\" });\n            }\n            const herbs = await storage.searchHerbs(q);\n            res.json(herbs);\n        }\n        catch (error) {\n            res.status(500).json({ message: \"Failed to search herbs\" });\n        }\n    });\n    // Get single herb\n    app.get(\"/api/herbs/:id\", async (req, res) => {\n        try {\n            const { id } = req.params;\n            const herb = await storage.getHerb(id);\n            if (!herb) {\n                return res.status(404).json({ message: \"Herb not found\" });\n            }\n            res.json(herb);\n        }\n        catch (error) {\n            res.status(500).json({ message: \"Failed to fetch herb\" });\n        }\n    });\n    // Submit contact form\n    app.post(\"/api/contact\", async (req, res) => {\n        try {\n            const validatedData = insertContactMessageSchema.parse(req.body);\n            const message = await storage.createContactMessage(validatedData);\n            res.status(201).json(message);\n        }\n        catch (error) {\n            if (error instanceof z.ZodError) {\n                return res.status(400).json({\n                    message: \"Invalid form data\",\n                    errors: error.issues\n                });\n            }\n            res.status(500).json({ message: \"Failed to submit contact form\" });\n        }\n    });\n    // Community routes\n    // Get all community posts\n    app.get(\"/api/community/posts\", async (req, res) => {\n        try {\n            const posts = await storage.getAllCommunityPosts();\n            res.json(posts);\n        }\n        catch (error) {\n            res.status(500).json({ message: \"Failed to fetch community posts\" });\n        }\n    });\n    // Get single community post\n    app.get(\"/api/community/posts/:id\", async (req, res) => {\n        try {\n            const { id } = req.params;\n            const post = await storage.getCommunityPost(id);\n            if (!post) {\n                return res.status(404).json({ message: \"Post not found\" });\n            }\n            res.json(post);\n        }\n        catch (error) {\n            res.status(500).json({ message: \"Failed to fetch post\" });\n        }\n    });\n    // Create community post\n    app.post(\"/api/community/posts\", async (req, res) => {\n        try {\n            const validatedData = insertCommunityPostSchema.parse(req.body);\n            const post = await storage.createCommunityPost(validatedData);\n            res.status(201).json(post);\n        }\n        catch (error) {\n            if (error instanceof z.ZodError) {\n                return res.status(400).json({\n                    message: \"Invalid post data\",\n                    errors: error.issues\n                });\n            }\n            res.status(500).json({ message: \"Failed to create post\" });\n        }\n    });\n    // Get comments for a post\n    app.get(\"/api/community/posts/:id/comments\", async (req, res) => {\n        try {\n            const { id } = req.params;\n            const comments = await storage.getCommentsByPostId(id);\n            res.json(comments);\n        }\n        catch (error) {\n            res.status(500).json({ message: \"Failed to fetch comments\" });\n        }\n    });\n    // Create comment\n    app.post(\"/api/community/comments\", async (req, res) => {\n        try {\n            const validatedData = insertCommunityCommentSchema.parse(req.body);\n            const comment = await storage.createCommunityComment(validatedData);\n            res.status(201).json(comment);\n        }\n        catch (error) {\n            if (error instanceof z.ZodError) {\n                return res.status(400).json({\n                    message: \"Invalid comment data\",\n                    errors: error.issues\n                });\n            }\n            res.status(500).json({ message: \"Failed to create comment\" });\n        }\n    });\n    // Like/unlike post\n    app.post(\"/api/community/posts/:id/like\", async (req, res) => {\n        try {\n            const { id } = req.params;\n            const { userEmail } = req.body;\n            if (!userEmail) {\n                return res.status(400).json({ message: \"User email is required\" });\n            }\n            const hasLiked = await storage.hasUserLikedPost(id, userEmail);\n            if (hasLiked) {\n                await storage.unlikePost(id, userEmail);\n                res.json({ liked: false });\n            }\n            else {\n                await storage.likePost(id, userEmail);\n                res.json({ liked: true });\n            }\n        }\n        catch (error) {\n            res.status(500).json({ message: \"Failed to update like\" });\n        }\n    });\n    // Like/unlike comment\n    app.post(\"/api/community/comments/:id/like\", async (req, res) => {\n        try {\n            const { id } = req.params;\n            const { userEmail } = req.body;\n            if (!userEmail) {\n                return res.status(400).json({ message: \"User email is required\" });\n            }\n            const hasLiked = await storage.hasUserLikedComment(id, userEmail);\n            if (hasLiked) {\n                await storage.unlikeComment(id, userEmail);\n                res.json({ liked: false });\n            }\n            else {\n                await storage.likeComment(id, userEmail);\n                res.json({ liked: true });\n            }\n        }\n        catch (error) {\n            res.status(500).json({ message: \"Failed to update like\" });\n        }\n    });\n    // AI Wellness Assistant endpoint\n    app.post(\"/api/ai/wellness\", async (req, res) => {\n        try {\n            const { message } = req.body;\n            if (!message || typeof message !== 'string') {\n                return res.status(400).json({ message: \"Message is required\" });\n            }\n            const response = await storage.getAIWellnessResponse(message);\n            res.json(response);\n        }\n        catch (error) {\n            console.error(\"AI wellness endpoint error:\", error);\n            res.status(500).json({\n                response: \"I'm experiencing technical difficulties right now. Please try again later.\",\n                suggestions: [\n                    \"What specific symptoms are you experiencing?\",\n                    \"Are you currently taking any medications?\",\n                    \"What's your primary wellness goal?\"\n                ]\n            });\n        }\n    });\n    const httpServer = createServer(app);\n    return httpServer;\n}\n","size_bytes":7597},"server/storage.js":{"content":"import { randomUUID } from \"crypto\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n// Initialize Gemini AI\nconsole.log('GEMINI_API_KEY in storage:', process.env.GEMINI_API_KEY ? 'Present' : 'Missing');\nif (!process.env.GEMINI_API_KEY) {\n    throw new Error('GEMINI_API_KEY environment variable is required');\n}\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\nexport class MemStorage {\n    constructor() {\n        this.users = new Map();\n        this.herbs = new Map();\n        this.contactMessages = new Map();\n        this.communityPosts = new Map();\n        this.communityComments = new Map();\n        this.communityLikes = new Map();\n        this.initializeHerbs();\n        this.initializeSamplePosts();\n    }\n    initializeHerbs() {\n        const initialHerbs = [\n            // Global Herbs\n            {\n                name: \"Peppermint\",\n                localName: \"\",\n                emoji: \"🌿\",\n                description: \"Refreshing herb for digestion, headaches, and mental clarity. Perfect for teas and aromatherapy.\",\n                benefits: [\"Aids digestion\", \"Relieves headaches\", \"Improves mental clarity\", \"Natural decongestant\"],\n                categories: [\"Mental Health\", \"Energy\", \"General Wellness\"],\n                preparationMethods: [\"Tea\", \"Essential oil\", \"Fresh leaves\", \"Capsules\"],\n                safetyInfo: \"Generally safe for most people. Avoid if allergic to mint family plants.\",\n                imageUrl: \"/attached_assets/generated_images/Fresh_peppermint_leaves_0a300d3e.png\",\n                isIndigenous: \"false\",\n                region: \"Global\"\n            },\n            {\n                name: \"Ginger\",\n                localName: \"\",\n                emoji: \"🫚\",\n                description: \"Powerful anti-inflammatory root for nausea, digestion, and immune support.\",\n                benefits: [\"Reduces nausea\", \"Anti-inflammatory\", \"Boosts immunity\", \"Aids digestion\"],\n                categories: [\"Energy\", \"General Wellness\"],\n                preparationMethods: [\"Fresh tea\", \"Powder\", \"Capsules\", \"Decoction\"],\n                safetyInfo: \"May interact with blood thinners. Consult healthcare provider if pregnant.\",\n                imageUrl: \"/attached_assets/generated_images/Fresh_ginger_root_pieces_b404e3ce.png\",\n                isIndigenous: \"false\",\n                region: \"Global\"\n            },\n            {\n                name: \"Chamomile\",\n                localName: \"\",\n                emoji: \"🌼\",\n                description: \"Gentle, calming herb for sleep, anxiety, and digestive comfort.\",\n                benefits: [\"Promotes sleep\", \"Reduces anxiety\", \"Soothes digestion\", \"Anti-inflammatory\"],\n                categories: [\"Mental Health\", \"Sleep\", \"General Wellness\"],\n                preparationMethods: [\"Tea\", \"Tincture\", \"Capsules\", \"Poultice\"],\n                safetyInfo: \"Generally safe. May cause allergic reactions in people sensitive to ragweed family.\",\n                imageUrl: \"/attached_assets/generated_images/Chamomile_flowers_blooming_fcc5a2fb.png\",\n                isIndigenous: \"false\",\n                region: \"Global\"\n            },\n            {\n                name: \"Hibiscus\",\n                localName: \"\",\n                emoji: \"🌺\",\n                description: \"Tart, vitamin C-rich flower for blood pressure support and heart health.\",\n                benefits: [\"Supports heart health\", \"Rich in vitamin C\", \"May help blood pressure\", \"Antioxidant properties\"],\n                categories: [\"General Wellness\", \"Weight Balance\"],\n                preparationMethods: [\"Tea\", \"Cold brew\", \"Powder\", \"Extract\"],\n                safetyInfo: \"May lower blood pressure. Monitor if taking blood pressure medications.\",\n                imageUrl: \"/attached_assets/generated_images/Red_hibiscus_flowers_47e0eec6.png\",\n                isIndigenous: \"false\",\n                region: \"Global\"\n            },\n            {\n                name: \"Turmeric\",\n                localName: \"\",\n                emoji: \"🟡\",\n                description: \"Golden spice with powerful anti-inflammatory and antioxidant properties.\",\n                benefits: [\"Anti-inflammatory\", \"Antioxidant\", \"Supports joint health\", \"Immune support\"],\n                categories: [\"General Wellness\", \"Energy\"],\n                preparationMethods: [\"Powder\", \"Fresh root\", \"Golden milk\", \"Capsules\"],\n                safetyInfo: \"May interact with blood thinners. Use with black pepper for better absorption.\",\n                imageUrl: \"/attached_assets/generated_images/Fresh_turmeric_root_2357d6c4.png\",\n                isIndigenous: \"false\",\n                region: \"Global\"\n            },\n            // Indigenous African Herbs\n            {\n                name: \"Moringa\",\n                localName: \"Moringa oleifera\",\n                emoji: \"🌿\",\n                description: \"The miracle tree, boosts energy, immunity, and nutrition with incredible nutrient density.\",\n                benefits: [\"Complete nutrition\", \"Boosts energy\", \"Immune support\", \"Rich in vitamins\"],\n                categories: [\"Energy\", \"General Wellness\", \"Weight Balance\"],\n                preparationMethods: [\"Powder\", \"Fresh leaves\", \"Tea\", \"Capsules\"],\n                safetyInfo: \"Generally safe. Start with small amounts to assess tolerance.\",\n                imageUrl: \"/attached_assets/generated_images/Fresh_moringa_plant_leaves_f8771929.png\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Neem\",\n                localName: \"Muarubaini (Azadirachta indica)\",\n                emoji: \"🍃\",\n                description: \"Traditionally used for skin health, immunity, and blood sugar balance support.\",\n                benefits: [\"Skin health\", \"Immune support\", \"Blood sugar balance\", \"Natural antimicrobial\"],\n                categories: [\"General Wellness\", \"Weight Balance\"],\n                preparationMethods: [\"Tea\", \"Powder\", \"Paste\", \"Oil\"],\n                safetyInfo: \"Very bitter. Start with small amounts. Avoid during pregnancy.\",\n                imageUrl: \"/attached_assets/generated_images/Neem_tree_leaves_8f8d6bbc.png\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Aloe Vera\",\n                localName: \"Shubiri\",\n                emoji: \"🌱\",\n                description: \"For digestion, skin healing, and cooling the body naturally.\",\n                benefits: [\"Skin healing\", \"Digestive support\", \"Cooling properties\", \"Anti-inflammatory\"],\n                categories: [\"General Wellness\"],\n                preparationMethods: [\"Fresh gel\", \"Juice\", \"Topical application\", \"Powder\"],\n                safetyInfo: \"Use inner gel only. Avoid latex layer. May have laxative effects.\",\n                imageUrl: \"/attached_assets/generated_images/Aloe_vera_plant_gel_c15d2219.png\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Soursop\",\n                localName: \"Graviola / Mtopeto\",\n                emoji: \"🍈\",\n                description: \"For vitality, immunity, and digestive support with rich antioxidants.\",\n                benefits: [\"Rich in antioxidants\", \"Immune support\", \"Digestive health\", \"Vitality boost\"],\n                categories: [\"Energy\", \"General Wellness\"],\n                preparationMethods: [\"Tea\", \"Fresh fruit\", \"Powder\", \"Extract\"],\n                safetyInfo: \"Consume in moderation. May interact with certain medications.\",\n                imageUrl: \"/attached_assets/generated_images/Soursop_fruit_cut_open_e750000a.png\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"African Basil\",\n                localName: \"Ocimum gratissimum (Mutaa, Danduu)\",\n                emoji: \"🌿\",\n                description: \"For colds, flu, and mental clarity with aromatic healing properties.\",\n                benefits: [\"Cold and flu relief\", \"Mental clarity\", \"Respiratory support\", \"Antimicrobial\"],\n                categories: [\"Mental Health\", \"General Wellness\"],\n                preparationMethods: [\"Tea\", \"Steam inhalation\", \"Fresh leaves\", \"Essential oil\"],\n                safetyInfo: \"Generally safe. Use in moderation during pregnancy.\",\n                imageUrl: \"/attached_assets/generated_images/African_basil_leaves_21f0cb2b.png\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Baobab\",\n                localName: \"Adansonia digitata (Mbuyu)\",\n                emoji: \"🌳\",\n                description: \"Rich in vitamin C, supports immunity and energy with superfruit benefits.\",\n                benefits: [\"High vitamin C\", \"Immune support\", \"Energy boost\", \"Rich in fiber\"],\n                categories: [\"Energy\", \"General Wellness\"],\n                preparationMethods: [\"Powder\", \"Fresh fruit\", \"Smoothies\", \"Tea\"],\n                safetyInfo: \"Generally safe. High fiber content may cause digestive upset if consumed in large amounts.\",\n                imageUrl: \"/attached_assets/generated_images/Baobab_fruit_pods_1e748c22.png\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"African Sage\",\n                localName: \"Lippia javanica (Mshongi)\",\n                emoji: \"🍃\",\n                description: \"Used in steam therapy for coughs, colds, and relaxation.\",\n                benefits: [\"Respiratory support\", \"Relaxation\", \"Steam therapy\", \"Cold relief\"],\n                categories: [\"Mental Health\", \"Sleep\", \"General Wellness\"],\n                preparationMethods: [\"Steam inhalation\", \"Tea\", \"Dried leaves\", \"Aromatherapy\"],\n                safetyInfo: \"Generally safe for external use. Use caution with internal consumption.\",\n                imageUrl: \"/attached_assets/generated_images/African_sage_plant_11f1d049.png\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Chia Seeds\",\n                localName: \"Salvia hispanica\",\n                emoji: \"🌱\",\n                description: \"Nutrient-dense superfood seeds rich in omega-3 fatty acids, fiber, and protein.\",\n                benefits: [\"Rich in omega-3\", \"High fiber content\", \"Protein source\", \"Energy boost\", \"Heart health\"],\n                categories: [\"Energy\", \"Weight Balance\", \"General Wellness\"],\n                preparationMethods: [\"Raw consumption\", \"Soaked in water\", \"Smoothies\", \"Baking\", \"Pudding\"],\n                safetyInfo: \"Generally safe. Drink plenty of water when consuming. May cause digestive upset if not properly hydrated.\",\n                imageUrl: \"/attached_assets/generated_images/chia seeds.jpg\",\n                isIndigenous: \"false\",\n                region: \"Global\"\n            },\n            {\n                name: \"Rotheca myricoides\",\n                localName: \"Blue Butterfly Bush / Mubarika\",\n                emoji: \"🦋\",\n                description: \"Traditional African herb used for respiratory health and fever management.\",\n                benefits: [\"Respiratory support\", \"Fever reduction\", \"Anti-inflammatory\", \"Antimicrobial\"],\n                categories: [\"General Wellness\"],\n                preparationMethods: [\"Tea\", \"Decoction\", \"Fresh leaves\", \"Poultice\"],\n                safetyInfo: \"Traditional use suggests safety, but consult healthcare provider before use.\",\n                imageUrl: \"/attached_assets/generated_images/blue butterfly bush.jpg\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Bidens pilosa\",\n                localName: \"Black Jack / Mchunga\",\n                emoji: \"🌼\",\n                description: \"Widespread herb used for wound healing, diabetes management, and immune support.\",\n                benefits: [\"Wound healing\", \"Blood sugar support\", \"Immune boost\", \"Anti-inflammatory\"],\n                categories: [\"General Wellness\", \"Weight Balance\"],\n                preparationMethods: [\"Tea\", \"Fresh leaves\", \"Poultice\", \"Extract\"],\n                safetyInfo: \"Generally safe in traditional use. Monitor blood sugar if diabetic.\",\n                imageUrl: \"/attached_assets/generated_images/black jack.jpg\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Acacia nilotica\",\n                localName: \"Gum Arabic Tree / Mgunga\",\n                emoji: \"🌳\",\n                description: \"Traditional tree used for gum production, wound healing, and digestive health.\",\n                benefits: [\"Wound healing\", \"Digestive support\", \"Gum health\", \"Anti-inflammatory\"],\n                categories: [\"General Wellness\"],\n                preparationMethods: [\"Gum extract\", \"Bark decoction\", \"Poultice\", \"Powder\"],\n                safetyInfo: \"Gum arabic is generally safe. Avoid bark in large quantities.\",\n                imageUrl: \"/attached_assets/generated_images/acacia nilotica.jpg\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Dovyalis abyssinica\",\n                localName: \"Abyssinian Gooseberry / Mkomamanga\",\n                emoji: \"🫐\",\n                description: \"Fruit-bearing tree with medicinal properties for digestive and immune health.\",\n                benefits: [\"Digestive health\", \"Immune support\", \"Vitamin C source\", \"Antioxidant\"],\n                categories: [\"Energy\", \"General Wellness\"],\n                preparationMethods: [\"Fresh fruit\", \"Juice\", \"Tea\", \"Extract\"],\n                safetyInfo: \"Fruit is generally safe. Use in moderation.\",\n                imageUrl: \"/attached_assets/generated_images/abyssinian gooseberry.jpg\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Prunus africana\",\n                localName: \"African Cherry / Mueri\",\n                emoji: \"🍒\",\n                description: \"Traditional tree used for prostate health and anti-inflammatory properties.\",\n                benefits: [\"Prostate health\", \"Anti-inflammatory\", \"Urinary support\", \"Traditional medicine\"],\n                categories: [\"General Wellness\"],\n                preparationMethods: [\"Bark decoction\", \"Extract\", \"Capsules\", \"Tincture\"],\n                safetyInfo: \"Traditional use for prostate health. Consult healthcare provider before use.\",\n                imageUrl: \"/attached_assets/generated_images/African cherry.jpg\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Urtica massaica\",\n                localName: \"African Nettle / Mwiba\",\n                emoji: \"🌿\",\n                description: \"Stinging nettle variety used for joint health, allergies, and nutritional support.\",\n                benefits: [\"Joint health\", \"Allergy relief\", \"Rich in minerals\", \"Anti-inflammatory\"],\n                categories: [\"General Wellness\", \"Mental Health\"],\n                preparationMethods: [\"Cooked leaves\", \"Tea\", \"Soup\", \"Extract\"],\n                safetyInfo: \"Must be cooked to remove stinging properties. Rich in nutrients.\",\n                imageUrl: \"/attached_assets/generated_images/african nettle.jpg\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Warburgia ugandensis\",\n                localName: \"Uganda Greenheart / Muthiga\",\n                emoji: \"🌲\",\n                description: \"Aromatic tree used for respiratory health, fever, and traditional medicine.\",\n                benefits: [\"Respiratory support\", \"Fever reduction\", \"Antimicrobial\", \"Traditional medicine\"],\n                categories: [\"General Wellness\"],\n                preparationMethods: [\"Bark decoction\", \"Leaves tea\", \"Essential oil\", \"Powder\"],\n                safetyInfo: \"Traditional use suggests safety. Use in moderation.\",\n                imageUrl: \"/attached_assets/generated_images/Uganda greenheart 1.jpg\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Euphorbia hirta\",\n                localName: \"Asthma Plant / Mwiba wa pumu\",\n                emoji: \"🌱\",\n                description: \"Small herb traditionally used for respiratory conditions and skin ailments.\",\n                benefits: [\"Respiratory support\", \"Skin health\", \"Traditional medicine\", \"Anti-inflammatory\"],\n                categories: [\"General Wellness\"],\n                preparationMethods: [\"Tea\", \"Fresh plant\", \"Poultice\", \"Extract\"],\n                safetyInfo: \"Traditional use for respiratory conditions. Use with caution.\",\n                imageUrl: \"/attached_assets/generated_images/asthma plant.jpg\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Faurea saligna\",\n                localName: \"African Beech / Msewe\",\n                emoji: \"🌳\",\n                description: \"Tree species used in traditional medicine for various health conditions.\",\n                benefits: [\"Traditional medicine\", \"Anti-inflammatory\", \"Local healing\", \"Cultural significance\"],\n                categories: [\"General Wellness\"],\n                preparationMethods: [\"Bark decoction\", \"Traditional preparation\", \"Local methods\"],\n                safetyInfo: \"Traditional use varies by region. Consult local practitioners.\",\n                imageUrl: \"/attached_assets/generated_images/African beech.jpg\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Myrsine africana\",\n                localName: \"African Boxwood / Muthiga\",\n                emoji: \"🌿\",\n                description: \"Evergreen shrub used for traditional medicine and cultural practices.\",\n                benefits: [\"Traditional medicine\", \"Cultural significance\", \"Local healing\", \"Antimicrobial\"],\n                categories: [\"General Wellness\"],\n                preparationMethods: [\"Traditional methods\", \"Local preparation\", \"Cultural practices\"],\n                safetyInfo: \"Traditional use varies. Consult local practitioners for proper use.\",\n                imageUrl: \"/attached_assets/generated_images/African boxwood.jpg\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Persea americana\",\n                localName: \"Avocado / Mparachichi\",\n                emoji: \"🥑\",\n                description: \"Nutrient-rich fruit tree with leaves and fruit used for health benefits.\",\n                benefits: [\"Heart health\", \"Rich in healthy fats\", \"Skin health\", \"Nutrient dense\"],\n                categories: [\"General Wellness\", \"Weight Balance\"],\n                preparationMethods: [\"Fresh fruit\", \"Leaf tea\", \"Oil extraction\", \"Culinary use\"],\n                safetyInfo: \"Fruit is generally safe. Leaf tea should be used in moderation.\",\n                imageUrl: \"/attached_assets/generated_images/avocado.jpg\",\n                isIndigenous: \"false\",\n                region: \"Global\"\n            },\n            {\n                name: \"Rhamnus species\",\n                localName: \"Buckthorn / Muthiga\",\n                emoji: \"🌿\",\n                description: \"Various species used for digestive health and traditional medicine.\",\n                benefits: [\"Digestive support\", \"Traditional medicine\", \"Local healing\", \"Cultural use\"],\n                categories: [\"General Wellness\"],\n                preparationMethods: [\"Traditional methods\", \"Local preparation\", \"Cultural practices\"],\n                safetyInfo: \"Use varies by species and region. Consult local practitioners.\",\n                imageUrl: \"/attached_assets/generated_images/buckthorn.jpg\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Trimeria grandifolia\",\n                localName: \"Wild Hemp / Mwiba\",\n                emoji: \"🌿\",\n                description: \"Traditional plant used for various medicinal purposes in local communities.\",\n                benefits: [\"Traditional medicine\", \"Local healing\", \"Cultural significance\", \"Community health\"],\n                categories: [\"General Wellness\"],\n                preparationMethods: [\"Traditional methods\", \"Local preparation\", \"Cultural practices\"],\n                safetyInfo: \"Traditional use varies. Consult local practitioners for proper use.\",\n                imageUrl: \"/attached_assets/generated_images/wild hemp.jpg\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            },\n            {\n                name: \"Zanthoxylum usambarense\",\n                localName: \"African Pepper / Mpilipili\",\n                emoji: \"🌶️\",\n                description: \"Aromatic tree used for digestive health, pain relief, and traditional medicine.\",\n                benefits: [\"Digestive support\", \"Pain relief\", \"Antimicrobial\", \"Traditional medicine\"],\n                categories: [\"General Wellness\", \"Mental Health\"],\n                preparationMethods: [\"Bark decoction\", \"Fruit spice\", \"Traditional preparation\", \"Local methods\"],\n                safetyInfo: \"Traditional use suggests safety. Use in moderation.\",\n                imageUrl: \"/attached_assets/generated_images/african pepper.jpg\",\n                isIndigenous: \"true\",\n                region: \"Africa\"\n            }\n        ];\n        initialHerbs.forEach(herb => {\n            const id = randomUUID();\n            const herbWithId = {\n                ...herb,\n                id,\n                localName: herb.localName || null,\n                emoji: herb.emoji || null,\n                safetyInfo: herb.safetyInfo || null,\n                imageUrl: herb.imageUrl || null,\n                region: herb.region || null,\n                isIndigenous: herb.isIndigenous || \"false\"\n            };\n            this.herbs.set(id, herbWithId);\n        });\n    }\n    async getUser(id) {\n        return this.users.get(id);\n    }\n    async getUserByUsername(username) {\n        return Array.from(this.users.values()).find((user) => user.username === username);\n    }\n    async createUser(insertUser) {\n        const id = randomUUID();\n        const user = { ...insertUser, id };\n        this.users.set(id, user);\n        return user;\n    }\n    async getAllHerbs() {\n        return Array.from(this.herbs.values());\n    }\n    async getHerb(id) {\n        return this.herbs.get(id);\n    }\n    async searchHerbs(query) {\n        const lowerQuery = query.toLowerCase();\n        return Array.from(this.herbs.values()).filter(herb => herb.name.toLowerCase().includes(lowerQuery) ||\n            herb.description.toLowerCase().includes(lowerQuery) ||\n            herb.localName?.toLowerCase().includes(lowerQuery) ||\n            herb.benefits.some(benefit => benefit.toLowerCase().includes(lowerQuery)) ||\n            herb.categories.some(category => category.toLowerCase().includes(lowerQuery)));\n    }\n    async getHerbsByCategory(category) {\n        return Array.from(this.herbs.values()).filter(herb => herb.categories.includes(category));\n    }\n    async createHerb(insertHerb) {\n        const id = randomUUID();\n        const herb = {\n            ...insertHerb,\n            id,\n            localName: insertHerb.localName || null,\n            emoji: insertHerb.emoji || null,\n            safetyInfo: insertHerb.safetyInfo || null,\n            imageUrl: insertHerb.imageUrl || null,\n            region: insertHerb.region || null,\n            isIndigenous: insertHerb.isIndigenous || \"false\"\n        };\n        this.herbs.set(id, herb);\n        return herb;\n    }\n    async createContactMessage(insertMessage) {\n        const id = randomUUID();\n        const message = {\n            ...insertMessage,\n            id,\n            subject: insertMessage.subject || null,\n            createdAt: new Date().toISOString()\n        };\n        this.contactMessages.set(id, message);\n        return message;\n    }\n    async getAllContactMessages() {\n        return Array.from(this.contactMessages.values());\n    }\n    initializeSamplePosts() {\n        const samplePosts = [\n            {\n                authorName: \"Sarah Johnson\",\n                authorEmail: \"sarah@example.com\",\n                title: \"My Journey with Chamomile for Better Sleep\",\n                content: \"I've been struggling with insomnia for months, and chamomile tea has been a game-changer! I started drinking a cup 30 minutes before bed, and within a week, I noticed a significant improvement in my sleep quality. The gentle, calming effect is exactly what I needed. I also love how it helps with my evening anxiety. Highly recommend for anyone dealing with sleep issues!\",\n                category: \"success-story\",\n                tags: [\"sleep\", \"chamomile\", \"anxiety\", \"insomnia\"],\n                imageUrl: \"/attached_assets/generated_images/Chamomile_flowers_blooming_fcc5a2fb.png\",\n            },\n            {\n                authorName: \"Michael Chen\",\n                authorEmail: \"michael@example.com\",\n                title: \"Ginger Tea: My Natural Energy Boost\",\n                content: \"As someone who works long hours, I was always looking for natural ways to boost my energy without caffeine crashes. Ginger tea has been incredible! I make it fresh every morning with lemon and honey. It gives me sustained energy throughout the day and helps with digestion too. The anti-inflammatory benefits are a bonus - my joints feel better than ever!\",\n                category: \"success-story\",\n                tags: [\"energy\", \"ginger\", \"digestion\", \"anti-inflammatory\"],\n                imageUrl: \"/attached_assets/generated_images/Fresh_ginger_root_pieces_b404e3ce.png\",\n            },\n            {\n                authorName: \"Aisha Patel\",\n                authorEmail: \"aisha@example.com\",\n                title: \"Moringa Powder: My Daily Wellness Ritual\",\n                content: \"I've been taking moringa powder daily for 3 months now, and the results are amazing! My energy levels are consistent throughout the day, my skin looks healthier, and I feel more balanced overall. I mix it into my morning smoothie or just stir it into water. It's become an essential part of my wellness routine. The nutrient density is incredible!\",\n                category: \"journey\",\n                tags: [\"moringa\", \"energy\", \"nutrition\", \"wellness\"],\n                imageUrl: \"/attached_assets/generated_images/Fresh_moringa_plant_leaves_f8771929.png\",\n            },\n            {\n                authorName: \"David Thompson\",\n                authorEmail: \"david@example.com\",\n                title: \"Question: Best Herbs for Stress Management?\",\n                content: \"I'm going through a particularly stressful time at work and looking for natural ways to manage stress. I've heard good things about adaptogenic herbs. What would you recommend for someone new to herbal remedies? I'm interested in something I can easily incorporate into my daily routine.\",\n                category: \"question\",\n                tags: [\"stress\", \"adaptogens\", \"mental-health\", \"beginner\"],\n                imageUrl: null,\n            },\n            {\n                authorName: \"Lisa Rodriguez\",\n                authorEmail: \"lisa@example.com\",\n                title: \"Tip: Making the Perfect Herbal Tea\",\n                content: \"Here's my method for making the perfect cup of herbal tea: Use filtered water, bring to a gentle boil, then let it cool for 30 seconds before pouring over herbs. Steep for 5-7 minutes covered to preserve essential oils. Add honey after steeping to preserve its benefits. This method has made my herbal teas so much more effective!\",\n                category: \"tip\",\n                tags: [\"tea\", \"preparation\", \"tips\", \"honey\"],\n                imageUrl: \"/attached_assets/generated_images/Whisk_9cd0867522-min.jpg\",\n            }\n        ];\n        samplePosts.forEach(post => {\n            const id = randomUUID();\n            const postWithId = {\n                ...post,\n                id,\n                likes: \"0\",\n                views: \"0\",\n                isApproved: \"true\",\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString(),\n                tags: post.tags || [],\n                imageUrl: post.imageUrl || null,\n            };\n            this.communityPosts.set(id, postWithId);\n        });\n        // Add sample comments\n        const sampleComments = [\n            {\n                postId: Array.from(this.communityPosts.keys())[0], // First post\n                authorName: \"Emma Wilson\",\n                authorEmail: \"emma@example.com\",\n                content: \"This is so encouraging! I've been having trouble sleeping too. How long did it take before you noticed the full effects?\",\n            },\n            {\n                postId: Array.from(this.communityPosts.keys())[0],\n                authorName: \"Sarah Johnson\",\n                authorEmail: \"sarah@example.com\",\n                content: \"Thanks Emma! It took about 2 weeks for the full effects. I also found that creating a bedtime routine really helped - chamomile tea, reading, and no screens for the last hour before bed.\",\n            },\n            {\n                postId: Array.from(this.communityPosts.keys())[1], // Second post\n                authorName: \"James Brown\",\n                authorEmail: \"james@example.com\",\n                content: \"I love ginger tea too! Have you tried adding turmeric? The combination is amazing for inflammation.\",\n            }\n        ];\n        sampleComments.forEach(comment => {\n            const id = randomUUID();\n            const commentWithId = {\n                ...comment,\n                id,\n                likes: \"0\",\n                isApproved: \"true\",\n                createdAt: new Date().toISOString(),\n            };\n            this.communityComments.set(id, commentWithId);\n        });\n    }\n    // Community Post functions\n    async getAllCommunityPosts() {\n        return Array.from(this.communityPosts.values())\n            .filter(post => post.isApproved === \"true\")\n            .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    }\n    async getCommunityPost(id) {\n        return this.communityPosts.get(id);\n    }\n    async createCommunityPost(post) {\n        const id = randomUUID();\n        const newPost = {\n            ...post,\n            id,\n            likes: \"0\",\n            views: \"0\",\n            isApproved: \"false\", // Requires approval\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            tags: post.tags || [],\n            imageUrl: post.imageUrl || null,\n        };\n        this.communityPosts.set(id, newPost);\n        return newPost;\n    }\n    async updateCommunityPost(id, updates) {\n        const post = this.communityPosts.get(id);\n        if (!post)\n            return undefined;\n        const updatedPost = { ...post, ...updates, updatedAt: new Date().toISOString() };\n        this.communityPosts.set(id, updatedPost);\n        return updatedPost;\n    }\n    async deleteCommunityPost(id) {\n        return this.communityPosts.delete(id);\n    }\n    // Community Comment functions\n    async getCommentsByPostId(postId) {\n        return Array.from(this.communityComments.values())\n            .filter(comment => comment.postId === postId && comment.isApproved === \"true\")\n            .sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n    }\n    async createCommunityComment(comment) {\n        const id = randomUUID();\n        const newComment = {\n            ...comment,\n            id,\n            likes: \"0\",\n            isApproved: \"false\", // Requires approval\n            createdAt: new Date().toISOString(),\n        };\n        this.communityComments.set(id, newComment);\n        return newComment;\n    }\n    async updateCommunityComment(id, updates) {\n        const comment = this.communityComments.get(id);\n        if (!comment)\n            return undefined;\n        const updatedComment = { ...comment, ...updates };\n        this.communityComments.set(id, updatedComment);\n        return updatedComment;\n    }\n    async deleteCommunityComment(id) {\n        return this.communityComments.delete(id);\n    }\n    // Like/Unlike functions\n    async likePost(postId, userEmail) {\n        const likeId = `${postId}-${userEmail}`;\n        const existingLike = Array.from(this.communityLikes.values()).find(like => like.postId === postId && like.userEmail === userEmail);\n        if (existingLike)\n            return false; // Already liked\n        const like = {\n            id: randomUUID(),\n            postId,\n            commentId: null,\n            userEmail,\n            createdAt: new Date().toISOString(),\n        };\n        this.communityLikes.set(like.id, like);\n        // Update post like count\n        const post = this.communityPosts.get(postId);\n        if (post) {\n            const currentLikes = parseInt(post.likes) || 0;\n            post.likes = (currentLikes + 1).toString();\n            this.communityPosts.set(postId, post);\n        }\n        return true;\n    }\n    async unlikePost(postId, userEmail) {\n        const like = Array.from(this.communityLikes.values()).find(like => like.postId === postId && like.userEmail === userEmail);\n        if (!like)\n            return false;\n        this.communityLikes.delete(like.id);\n        // Update post like count\n        const post = this.communityPosts.get(postId);\n        if (post) {\n            const currentLikes = parseInt(post.likes) || 0;\n            post.likes = Math.max(0, currentLikes - 1).toString();\n            this.communityPosts.set(postId, post);\n        }\n        return true;\n    }\n    async likeComment(commentId, userEmail) {\n        const existingLike = Array.from(this.communityLikes.values()).find(like => like.commentId === commentId && like.userEmail === userEmail);\n        if (existingLike)\n            return false; // Already liked\n        const like = {\n            id: randomUUID(),\n            postId: null,\n            commentId,\n            userEmail,\n            createdAt: new Date().toISOString(),\n        };\n        this.communityLikes.set(like.id, like);\n        // Update comment like count\n        const comment = this.communityComments.get(commentId);\n        if (comment) {\n            const currentLikes = parseInt(comment.likes) || 0;\n            comment.likes = (currentLikes + 1).toString();\n            this.communityComments.set(commentId, comment);\n        }\n        return true;\n    }\n    async unlikeComment(commentId, userEmail) {\n        const like = Array.from(this.communityLikes.values()).find(like => like.commentId === commentId && like.userEmail === userEmail);\n        if (!like)\n            return false;\n        this.communityLikes.delete(like.id);\n        // Update comment like count\n        const comment = this.communityComments.get(commentId);\n        if (comment) {\n            const currentLikes = parseInt(comment.likes) || 0;\n            comment.likes = Math.max(0, currentLikes - 1).toString();\n            this.communityComments.set(commentId, comment);\n        }\n        return true;\n    }\n    async hasUserLikedPost(postId, userEmail) {\n        return Array.from(this.communityLikes.values()).some(like => like.postId === postId && like.userEmail === userEmail);\n    }\n    async hasUserLikedComment(commentId, userEmail) {\n        return Array.from(this.communityLikes.values()).some(like => like.commentId === commentId && like.userEmail === userEmail);\n    }\n    async getAIHerbInfo(query) {\n        try {\n            const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n            const prompt = `Provide comprehensive information about the herb \"${query}\" in the following JSON format:\n      {\n        \"name\": \"Herb Name\",\n        \"description\": \"Brief description of the herb\",\n        \"benefits\": [\"Benefit 1\", \"Benefit 2\", \"Benefit 3\"],\n        \"usage\": \"How to use this herb\",\n        \"dosage\": \"Recommended dosage information\",\n        \"preparation\": \"How to prepare this herb (tea, tincture, etc.)\",\n        \"interactions\": [\"Drug interaction 1\", \"Drug interaction 2\"],\n        \"warnings\": [\"Warning 1\", \"Warning 2\"],\n        \"category\": \"Wellness category (e.g., Digestive, Immune, Sleep)\"\n      }\n      \n      Focus on traditional uses, scientific evidence, safety, and practical applications. Be accurate and include important warnings.`;\n            const result = await model.generateContent(prompt);\n            const response = await result.response;\n            const text = response.text();\n            // Extract JSON from the response\n            const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n                return JSON.parse(jsonMatch[0]);\n            }\n            // Fallback response if JSON parsing fails\n            return {\n                name: query,\n                description: \"Information about this herb\",\n                benefits: [\"Traditional wellness support\"],\n                usage: \"Consult with a healthcare provider\",\n                dosage: \"Follow recommended guidelines\",\n                preparation: \"Various methods available\",\n                interactions: [\"May interact with medications\"],\n                warnings: [\"Consult healthcare provider before use\"],\n                category: \"Wellness\"\n            };\n        }\n        catch (error) {\n            console.error(\"Gemini API error:\", error);\n            // Return fallback response\n            return {\n                name: query,\n                description: \"Unable to fetch information at this time. Please try again later.\",\n                benefits: [\"Traditional wellness support\"],\n                usage: \"Consult with a healthcare provider\",\n                dosage: \"Follow recommended guidelines\",\n                preparation: \"Various methods available\",\n                interactions: [\"May interact with medications\"],\n                warnings: [\"Consult healthcare provider before use\"],\n                category: \"Wellness\"\n            };\n        }\n    }\n    async getAIWellnessResponse(message) {\n        try {\n            const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n            const prompt = `You are a herbal wellness assistant. Answer in BULLET POINTS ONLY.\n\nUser question: \"${message}\"\n\nSTRICT FORMAT REQUIRED:\n• Recommend 1-2 specific herbs\n• How to use (tea, capsules, etc.)\n• Main benefit\n• Safety warning if any\n\nKeep each bullet point to ONE sentence maximum. No paragraphs or long explanations.\n\nExample response:\n• Try chamomile tea for sleep\n• Drink 1 cup before bedtime\n• Helps calm nerves naturally\n• Avoid if allergic to daisies\n\nFormat as JSON:\n{\n  \"response\": \"• Bullet point 1\\n• Bullet point 2\\n• Bullet point 3\\n• Bullet point 4\",\n  \"suggestions\": [\"Quick question 1?\", \"Quick question 2?\", \"Quick question 3?\"]\n}`;\n            const result = await model.generateContent(prompt);\n            const response = await result.response;\n            const text = response.text();\n            // Extract JSON from the response\n            const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n            if (jsonMatch) {\n                return JSON.parse(jsonMatch[0]);\n            }\n            // Fallback response if JSON parsing fails\n            return {\n                response: \"I'm here to help with your wellness questions. Please consult with a healthcare provider for personalized advice.\",\n                suggestions: [\n                    \"What specific symptoms are you experiencing?\",\n                    \"Are you currently taking any medications?\",\n                    \"What's your primary wellness goal?\"\n                ]\n            };\n        }\n        catch (error) {\n            console.error(\"Gemini API error:\", error);\n            // Return fallback response\n            return {\n                response: \"I'm experiencing technical difficulties right now. Please try again later or consult with a healthcare provider for immediate concerns.\",\n                suggestions: [\n                    \"What specific symptoms are you experiencing?\",\n                    \"Are you currently taking any medications?\",\n                    \"What's your primary wellness goal?\"\n                ]\n            };\n        }\n    }\n}\nexport const storage = new MemStorage();\n","size_bytes":40895},"server/vite.js":{"content":"import express from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\nimport { fileURLToPath } from \"url\";\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst viteLogger = createLogger();\nexport function log(message, source = \"express\") {\n    const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n        hour: \"numeric\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        hour12: true,\n    });\n    console.log(`${formattedTime} [${source}] ${message}`);\n}\nexport async function setupVite(app, server) {\n    const serverOptions = {\n        middlewareMode: true,\n        hmr: {\n            port: undefined,\n            clientPort: undefined,\n        },\n        allowedHosts: true,\n    };\n    const vite = await createViteServer({\n        ...viteConfig,\n        configFile: false,\n        customLogger: {\n            ...viteLogger,\n            error: (msg, options) => {\n                viteLogger.error(msg, options);\n                process.exit(1);\n            },\n        },\n        server: serverOptions,\n        appType: \"custom\",\n    });\n    app.use(vite.middlewares);\n    app.use(\"*\", async (req, res, next) => {\n        const url = req.originalUrl;\n        try {\n            const clientTemplate = path.resolve(__dirname, \"..\", \"client\", \"index.html\");\n            // always reload the index.html file from disk incase it changes\n            let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n            template = template.replace(`src=\"/src/main.tsx\"`, `src=\"/src/main.tsx?v=${nanoid()}\"`);\n            const page = await vite.transformIndexHtml(url, template);\n            res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n        }\n        catch (e) {\n            vite.ssrFixStacktrace(e);\n            next(e);\n        }\n    });\n}\nexport function serveStatic(app) {\n    const distPath = path.resolve(__dirname, \"public\");\n    if (!fs.existsSync(distPath)) {\n        throw new Error(`Could not find the build directory: ${distPath}, make sure to build the client first`);\n    }\n    app.use(express.static(distPath));\n    // fall through to index.html if the file doesn't exist\n    app.use(\"*\", (_req, res) => {\n        res.sendFile(path.resolve(distPath, \"index.html\"));\n    });\n}\n","size_bytes":2412},"shared/schema.js":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nexport const users = pgTable(\"users\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    username: text(\"username\").notNull().unique(),\n    password: text(\"password\").notNull(),\n});\nexport const herbs = pgTable(\"herbs\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    name: text(\"name\").notNull(),\n    localName: text(\"local_name\"),\n    emoji: text(\"emoji\"),\n    description: text(\"description\").notNull(),\n    benefits: jsonb(\"benefits\").$type().notNull(),\n    categories: jsonb(\"categories\").$type().notNull(),\n    preparationMethods: jsonb(\"preparation_methods\").$type().notNull(),\n    safetyInfo: text(\"safety_info\"),\n    imageUrl: text(\"image_url\"),\n    isIndigenous: text(\"is_indigenous\").notNull().default(\"false\"),\n    region: text(\"region\"),\n});\nexport const contactMessages = pgTable(\"contact_messages\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    name: text(\"name\").notNull(),\n    email: text(\"email\").notNull(),\n    subject: text(\"subject\"),\n    message: text(\"message\").notNull(),\n    createdAt: text(\"created_at\").notNull().default(sql `CURRENT_TIMESTAMP`),\n});\nexport const communityPosts = pgTable(\"community_posts\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    authorName: text(\"author_name\").notNull(),\n    authorEmail: text(\"author_email\").notNull(),\n    title: text(\"title\").notNull(),\n    content: text(\"content\").notNull(),\n    category: text(\"category\").notNull(), // 'success-story', 'journey', 'question', 'tip'\n    tags: jsonb(\"tags\").$type().notNull().default([]),\n    imageUrl: text(\"image_url\"),\n    likes: text(\"likes\").notNull().default(\"0\"),\n    views: text(\"views\").notNull().default(\"0\"),\n    isApproved: text(\"is_approved\").notNull().default(\"false\"),\n    createdAt: text(\"created_at\").notNull().default(sql `CURRENT_TIMESTAMP`),\n    updatedAt: text(\"updated_at\").notNull().default(sql `CURRENT_TIMESTAMP`),\n});\nexport const communityComments = pgTable(\"community_comments\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    postId: varchar(\"post_id\").references(() => communityPosts.id).notNull(),\n    authorName: text(\"author_name\").notNull(),\n    authorEmail: text(\"author_email\").notNull(),\n    content: text(\"content\").notNull(),\n    likes: text(\"likes\").notNull().default(\"0\"),\n    isApproved: text(\"is_approved\").notNull().default(\"false\"),\n    createdAt: text(\"created_at\").notNull().default(sql `CURRENT_TIMESTAMP`),\n});\nexport const communityLikes = pgTable(\"community_likes\", {\n    id: varchar(\"id\").primaryKey().default(sql `gen_random_uuid()`),\n    postId: varchar(\"post_id\").references(() => communityPosts.id),\n    commentId: varchar(\"comment_id\").references(() => communityComments.id),\n    userEmail: text(\"user_email\").notNull(),\n    createdAt: text(\"created_at\").notNull().default(sql `CURRENT_TIMESTAMP`),\n});\nexport const insertUserSchema = createInsertSchema(users).pick({\n    username: true,\n    password: true,\n});\nexport const insertHerbSchema = createInsertSchema(herbs).omit({\n    id: true,\n});\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n    id: true,\n    createdAt: true,\n});\nexport const insertCommunityPostSchema = createInsertSchema(communityPosts).omit({\n    id: true,\n    likes: true,\n    views: true,\n    isApproved: true,\n    createdAt: true,\n    updatedAt: true,\n});\nexport const insertCommunityCommentSchema = createInsertSchema(communityComments).omit({\n    id: true,\n    likes: true,\n    isApproved: true,\n    createdAt: true,\n});\nexport const insertCommunityLikeSchema = createInsertSchema(communityLikes).omit({\n    id: true,\n    createdAt: true,\n});\n","size_bytes":3860},"client/src/App.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Navigation from \"@/components/layout/navigation\";\nimport Footer from \"@/components/layout/footer\";\nimport FloatingAIAssistant from \"@/components/ui/floating-ai-assistant\";\nimport Home from \"@/pages/home\";\nimport Herbs from \"@/pages/herbs\";\nimport Wellbeing from \"@/pages/wellbeing\";\nimport MentalHealth from \"@/pages/mental-health\";\nimport Energy from \"@/pages/energy\";\nimport Sleep from \"@/pages/sleep\";\nimport WeightBalance from \"@/pages/weight-balance\";\nimport GeneralWellness from \"@/pages/general-wellness\";\nimport Ailments from \"@/pages/ailments\";\nimport Videos from \"@/pages/videos\";\nimport Community from \"@/pages/community\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\nimport SafetyGuidelines from \"@/pages/safety-guidelines\";\nimport PrivacyPolicy from \"@/pages/privacy-policy\";\nimport NotFound from \"@/pages/not-found\";\nfunction Router() {\n    return (_jsxs(\"div\", { className: \"min-h-screen flex flex-col\", children: [_jsx(Navigation, {}), _jsx(\"main\", { className: \"flex-1\", children: _jsxs(Switch, { children: [_jsx(Route, { path: \"/\", component: Home }), _jsx(Route, { path: \"/herbs\", component: Herbs }), _jsx(Route, { path: \"/wellbeing\", component: Wellbeing }), _jsx(Route, { path: \"/mental-health\", component: MentalHealth }), _jsx(Route, { path: \"/energy\", component: Energy }), _jsx(Route, { path: \"/sleep\", component: Sleep }), _jsx(Route, { path: \"/weight-balance\", component: WeightBalance }), _jsx(Route, { path: \"/general-wellness\", component: GeneralWellness }), _jsx(Route, { path: \"/ailments\", component: Ailments }), _jsx(Route, { path: \"/videos\", component: Videos }), _jsx(Route, { path: \"/community\", component: Community }), _jsx(Route, { path: \"/about\", component: About }), _jsx(Route, { path: \"/contact\", component: Contact }), _jsx(Route, { path: \"/safety-guidelines\", component: SafetyGuidelines }), _jsx(Route, { path: \"/privacy-policy\", component: PrivacyPolicy }), _jsx(Route, { component: NotFound })] }) }), _jsx(Footer, {}), _jsx(FloatingAIAssistant, {})] }));\n}\nfunction App() {\n    return (_jsx(QueryClientProvider, { client: queryClient, children: _jsxs(TooltipProvider, { children: [_jsx(Toaster, {}), _jsx(Router, {})] }) }));\n}\nexport default App;\n","size_bytes":2559},"client/src/main.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\ncreateRoot(document.getElementById(\"root\")).render(_jsx(App, {}));\n","size_bytes":210},"client/src/data/herbs.js":{"content":"// This file contains herb data used for featured herb rotation and other components\n// The actual data is served from the backend via API\nexport const featuredHerbNames = [\n    \"Ginger\",\n    \"Chamomile\",\n    \"Peppermint\",\n    \"Hibiscus\",\n    \"Neem\",\n    \"Moringa\"\n];\nexport const herbCategories = [\n    \"Mental Health\",\n    \"Energy\",\n    \"Sleep\",\n    \"Weight Balance\",\n    \"General Wellness\"\n];\nexport const preparationMethods = [\n    \"Tea\",\n    \"Infusion\",\n    \"Decoction\",\n    \"Poultice\",\n    \"Capsules\",\n    \"Powder\",\n    \"Fresh leaves\",\n    \"Essential oil\",\n    \"Tincture\",\n    \"Extract\"\n];\n","size_bytes":596},"client/src/hooks/use-mobile.js":{"content":"import * as React from \"react\";\nconst MOBILE_BREAKPOINT = 768;\nexport function useIsMobile() {\n    const [isMobile, setIsMobile] = React.useState(undefined);\n    React.useEffect(() => {\n        const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);\n        const onChange = () => {\n            setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n        };\n        mql.addEventListener(\"change\", onChange);\n        setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);\n        return () => mql.removeEventListener(\"change\", onChange);\n    }, []);\n    return !!isMobile;\n}\n","size_bytes":589},"client/src/hooks/use-toast.js":{"content":"import * as React from \"react\";\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\nconst actionTypes = {\n    ADD_TOAST: \"ADD_TOAST\",\n    UPDATE_TOAST: \"UPDATE_TOAST\",\n    DISMISS_TOAST: \"DISMISS_TOAST\",\n    REMOVE_TOAST: \"REMOVE_TOAST\",\n};\nlet count = 0;\nfunction genId() {\n    count = (count + 1) % Number.MAX_SAFE_INTEGER;\n    return count.toString();\n}\nconst toastTimeouts = new Map();\nconst addToRemoveQueue = (toastId) => {\n    if (toastTimeouts.has(toastId)) {\n        return;\n    }\n    const timeout = setTimeout(() => {\n        toastTimeouts.delete(toastId);\n        dispatch({\n            type: \"REMOVE_TOAST\",\n            toastId: toastId,\n        });\n    }, TOAST_REMOVE_DELAY);\n    toastTimeouts.set(toastId, timeout);\n};\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case \"ADD_TOAST\":\n            return {\n                ...state,\n                toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n            };\n        case \"UPDATE_TOAST\":\n            return {\n                ...state,\n                toasts: state.toasts.map((t) => t.id === action.toast.id ? { ...t, ...action.toast } : t),\n            };\n        case \"DISMISS_TOAST\": {\n            const { toastId } = action;\n            // ! Side effects ! - This could be extracted into a dismissToast() action,\n            // but I'll keep it here for simplicity\n            if (toastId) {\n                addToRemoveQueue(toastId);\n            }\n            else {\n                state.toasts.forEach((toast) => {\n                    addToRemoveQueue(toast.id);\n                });\n            }\n            return {\n                ...state,\n                toasts: state.toasts.map((t) => t.id === toastId || toastId === undefined\n                    ? {\n                        ...t,\n                        open: false,\n                    }\n                    : t),\n            };\n        }\n        case \"REMOVE_TOAST\":\n            if (action.toastId === undefined) {\n                return {\n                    ...state,\n                    toasts: [],\n                };\n            }\n            return {\n                ...state,\n                toasts: state.toasts.filter((t) => t.id !== action.toastId),\n            };\n    }\n};\nconst listeners = [];\nlet memoryState = { toasts: [] };\nfunction dispatch(action) {\n    memoryState = reducer(memoryState, action);\n    listeners.forEach((listener) => {\n        listener(memoryState);\n    });\n}\nfunction toast({ ...props }) {\n    const id = genId();\n    const update = (props) => dispatch({\n        type: \"UPDATE_TOAST\",\n        toast: { ...props, id },\n    });\n    const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n    dispatch({\n        type: \"ADD_TOAST\",\n        toast: {\n            ...props,\n            id,\n            open: true,\n            onOpenChange: (open) => {\n                if (!open)\n                    dismiss();\n            },\n        },\n    });\n    return {\n        id: id,\n        dismiss,\n        update,\n    };\n}\nfunction useToast() {\n    const [state, setState] = React.useState(memoryState);\n    React.useEffect(() => {\n        listeners.push(setState);\n        return () => {\n            const index = listeners.indexOf(setState);\n            if (index > -1) {\n                listeners.splice(index, 1);\n            }\n        };\n    }, [state]);\n    return {\n        ...state,\n        toast,\n        dismiss: (toastId) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n    };\n}\nexport { useToast, toast };\n","size_bytes":3543},"client/src/lib/queryClient.js":{"content":"import { QueryClient } from \"@tanstack/react-query\";\nasync function throwIfResNotOk(res) {\n    if (!res.ok) {\n        const text = (await res.text()) || res.statusText;\n        throw new Error(`${res.status}: ${text}`);\n    }\n}\nexport async function apiRequest(method, url, data) {\n    const res = await fetch(url, {\n        method,\n        headers: data ? { \"Content-Type\": \"application/json\" } : {},\n        body: data ? JSON.stringify(data) : undefined,\n        credentials: \"include\",\n    });\n    await throwIfResNotOk(res);\n    return res;\n}\nexport const getQueryFn = ({ on401: unauthorizedBehavior }) => async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\"), {\n        credentials: \"include\",\n    });\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n        return null;\n    }\n    await throwIfResNotOk(res);\n    return await res.json();\n};\nexport const queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            queryFn: getQueryFn({ on401: \"throw\" }),\n            refetchInterval: false,\n            refetchOnWindowFocus: false,\n            staleTime: Infinity,\n            retry: false,\n        },\n        mutations: {\n            retry: false,\n        },\n    },\n});\n","size_bytes":1243},"client/src/lib/utils.js":{"content":"import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nexport function cn(...inputs) {\n    return twMerge(clsx(inputs));\n}\n","size_bytes":139},"client/src/pages/about.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Leaf, GraduationCap, Shield } from \"lucide-react\";\nexport default function About() {\n    const values = [\n        {\n            icon: Leaf,\n            title: \"Natural Approach\",\n            description: \"We focus on gentle, natural solutions that work with your body's healing processes.\",\n            color: \"text-primary bg-primary/10\"\n        },\n        {\n            icon: GraduationCap,\n            title: \"Education First\",\n            description: \"We provide comprehensive education so you can make informed decisions about your wellness.\",\n            color: \"text-accent bg-accent/10\"\n        },\n        {\n            icon: Shield,\n            title: \"Safety Priority\",\n            description: \"Safety information and proper guidance are included with every recommendation.\",\n            color: \"text-secondary bg-secondary/10\"\n        }\n    ];\n    return (_jsx(\"div\", { className: \"py-16 px-4\", children: _jsxs(\"div\", { className: \"max-w-4xl mx-auto\", children: [_jsx(\"h1\", { className: \"text-4xl font-bold text-center mb-12\", \"data-testid\": \"text-page-title\", children: \"About Herbal Care Hub\" }), _jsxs(\"div\", { className: \"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center mb-16\", children: [_jsxs(\"div\", { children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-6 text-primary\", \"data-testid\": \"text-mission-title\", children: \"Our Mission\" }), _jsx(\"p\", { className: \"text-lg text-muted-foreground mb-6\", children: \"To make herbal knowledge simple, safe, and accessible for everyone. We believe that nature has provided us with incredible healing resources, and our goal is to help you discover and use them safely.\" }), _jsx(\"p\", { className: \"text-muted-foreground\", children: \"At Herbal Care Hub, we bridge the gap between traditional wisdom and modern wellness needs, providing education and guidance for natural health solutions.\" })] }), _jsx(\"div\", { children: _jsx(\"img\", { src: \"/attached_assets/generated_images/Family_enjoying_herbal_tea_747c1dae.png\", alt: \"Family enjoying herbal tea together\", className: \"rounded-xl w-full h-64 object-cover\" }) })] }), _jsx(Card, { className: \"p-8 shadow-lg border border-border mb-16\", children: _jsxs(CardContent, { className: \"p-0\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-6 text-center text-accent\", \"data-testid\": \"text-story-title\", children: \"Our Story\" }), _jsx(\"p\", { className: \"text-lg text-muted-foreground text-center mb-6 italic\", children: \"\\\"We believe herbs are a gift for health, balance, and vitality.\\\"\" }), _jsxs(\"div\", { className: \"space-y-4 text-muted-foreground\", children: [_jsx(\"p\", { children: \"Herbal Care Hub was born from a deep appreciation for the wisdom of traditional healers and the growing need for accessible, reliable information about natural wellness. We recognize that many people are seeking alternatives to support their health journey, but often lack reliable guidance.\" }), _jsx(\"p\", { children: \"Our team combines respect for traditional knowledge with modern research to provide you with safe, practical information about herbs and natural wellness. We focus particularly on African indigenous herbs, which have been used for generations but are often overlooked in modern wellness conversations.\" }), _jsx(\"p\", { children: \"Every herb we feature has been carefully researched for safety and traditional uses. We believe that when used responsibly and with proper knowledge, herbs can be powerful allies in maintaining health and vitality.\" })] })] }) }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\", children: values.map((value, index) => {\n                        const IconComponent = value.icon;\n                        return (_jsxs(\"div\", { className: \"text-center\", \"data-testid\": `value-${index}`, children: [_jsx(\"div\", { className: `w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4 ${value.color}`, children: _jsx(IconComponent, { className: \"h-8 w-8\" }) }), _jsx(\"h3\", { className: \"text-xl font-semibold mb-2\", children: value.title }), _jsx(\"p\", { className: \"text-muted-foreground text-sm\", children: value.description })] }, index));\n                    }) }), _jsxs(\"div\", { className: \"bg-yellow-50 border border-yellow-200 p-6 rounded-lg text-center\", children: [_jsx(\"h3\", { className: \"text-lg font-semibold mb-2\", \"data-testid\": \"text-disclaimer-title\", children: \"Important Disclaimer\" }), _jsx(\"p\", { className: \"text-sm text-yellow-800\", children: \"The information provided on Herbal Care Hub is for educational purposes only and is not intended to replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare providers before making changes to your health routine, especially if you have existing health conditions or take medications.\" })] })] }) }));\n}\n","size_bytes":4936},"client/src/pages/ailments.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AlertTriangle, Info, Heart, Droplet, Leaf, BookOpen, Lightbulb, Utensils } from \"lucide-react\";\nexport default function Ailments() {\n    const [selectedAilment, setSelectedAilment] = useState(null);\n    const detailsRef = useRef(null);\n    const ailments = [\n        {\n            id: \"diabetes\",\n            icon: Droplet,\n            title: \"Diabetes\",\n            subtitle: \"Blood Sugar Management\",\n            color: \"text-blue-600\",\n            bgColor: \"bg-blue-50\",\n            borderColor: \"border-blue-200\",\n            definition: \"Diabetes is a chronic health condition where the body either doesn't produce enough insulin or can't effectively use the insulin it produces, leading to elevated blood sugar levels.\",\n            types: [\n                {\n                    name: \"Type 1 Diabetes\",\n                    description: \"Autoimmune condition where the body attacks insulin-producing cells in the pancreas\"\n                },\n                {\n                    name: \"Type 2 Diabetes\",\n                    description: \"Most common type where the body becomes resistant to insulin or doesn't produce enough\"\n                },\n                {\n                    name: \"Gestational Diabetes\",\n                    description: \"Develops during pregnancy and usually resolves after childbirth\"\n                }\n            ],\n            symptoms: [\n                \"Increased thirst and frequent urination\",\n                \"Unexplained weight loss\",\n                \"Fatigue and irritability\",\n                \"Blurred vision\",\n                \"Slow-healing wounds\",\n                \"Tingling or numbness in hands/feet\"\n            ],\n            riskFactors: [\n                \"Family history of diabetes\",\n                \"Obesity or overweight\",\n                \"Physical inactivity\",\n                \"Poor diet high in processed foods\",\n                \"Age (risk increases with age)\",\n                \"Ethnic background (higher risk in certain populations)\"\n            ],\n            herbs: [\n                {\n                    name: \"Neem (Muarubaini)\",\n                    scientificName: \"Azadirachta indica\",\n                    description: \"Traditional herb used for blood sugar management. Contains compounds that may help improve insulin sensitivity.\",\n                    preparation: \"Tea, powder, or capsules\",\n                    dosage: \"Start with 1/4 tsp powder or 1 cup tea daily\",\n                    research: \"Studies suggest neem may help lower blood sugar levels and improve glucose tolerance.\"\n                },\n                {\n                    name: \"Moringa\",\n                    scientificName: \"Moringa oleifera\",\n                    description: \"Nutrient-dense leaves rich in antioxidants and compounds that may support healthy blood sugar levels.\",\n                    preparation: \"Fresh leaves, powder, or tea\",\n                    dosage: \"1/2 to 1 tsp powder daily in smoothies or water\",\n                    research: \"Contains chlorogenic acid which may help regulate blood sugar absorption.\"\n                },\n                {\n                    name: \"Hibiscus\",\n                    scientificName: \"Hibiscus sabdariffa\",\n                    description: \"Antioxidant-rich flower that may help with glucose metabolism and overall metabolic health.\",\n                    preparation: \"Tea, cold brew, or extract\",\n                    dosage: \"1-2 cups of tea daily\",\n                    research: \"Rich in polyphenols that may help improve insulin sensitivity.\"\n                }\n            ],\n            lifestyleTips: [\n                \"Monitor blood sugar levels regularly\",\n                \"Follow a balanced, low-glycemic diet\",\n                \"Exercise regularly (150 minutes/week)\",\n                \"Maintain a healthy weight\",\n                \"Get adequate sleep (7-9 hours)\",\n                \"Manage stress through meditation or yoga\"\n            ],\n            warning: {\n                type: \"yellow\",\n                text: \"Monitor blood sugar levels closely and consult your healthcare provider before using herbs alongside diabetes medications. Herbs may interact with prescription drugs.\"\n            }\n        },\n        {\n            id: \"hypertension\",\n            icon: Heart,\n            title: \"High Blood Pressure\",\n            subtitle: \"Hypertension Management\",\n            color: \"text-red-600\",\n            bgColor: \"bg-red-50\",\n            borderColor: \"border-red-200\",\n            definition: \"Hypertension is a condition where the force of blood against artery walls is consistently too high, putting extra strain on the heart and blood vessels.\",\n            types: [\n                {\n                    name: \"Primary Hypertension\",\n                    description: \"Most common type with no identifiable cause, develops gradually over years\"\n                },\n                {\n                    name: \"Secondary Hypertension\",\n                    description: \"Caused by an underlying condition like kidney disease or hormonal disorders\"\n                }\n            ],\n            symptoms: [\n                \"Often called the 'silent killer' - may have no symptoms\",\n                \"Headaches (especially in the morning)\",\n                \"Shortness of breath\",\n                \"Nosebleeds\",\n                \"Chest pain\",\n                \"Dizziness or lightheadedness\",\n                \"Vision problems\"\n            ],\n            riskFactors: [\n                \"Age (risk increases with age)\",\n                \"Family history\",\n                \"Obesity or overweight\",\n                \"Physical inactivity\",\n                \"High salt intake\",\n                \"Excessive alcohol consumption\",\n                \"Stress and anxiety\",\n                \"Smoking\"\n            ],\n            herbs: [\n                {\n                    name: \"Hibiscus\",\n                    scientificName: \"Hibiscus sabdariffa\",\n                    description: \"Studies suggest hibiscus tea may help lower blood pressure through its diuretic and vasodilating properties.\",\n                    preparation: \"Tea, cold brew, or extract\",\n                    dosage: \"2-3 cups of tea daily\",\n                    research: \"Clinical studies show hibiscus may reduce systolic and diastolic blood pressure.\"\n                },\n                {\n                    name: \"Garlic\",\n                    scientificName: \"Allium sativum\",\n                    description: \"Traditional cardiovascular herb that may help relax blood vessels and improve circulation.\",\n                    preparation: \"Fresh cloves, powder, or aged extract\",\n                    dosage: \"1-2 cloves daily or 600-1200mg extract\",\n                    research: \"Contains allicin which may help lower blood pressure and improve arterial health.\"\n                },\n                {\n                    name: \"African Basil\",\n                    scientificName: \"Ocimum gratissimum\",\n                    description: \"Stress-reducing herb that may help lower blood pressure through its calming effects.\",\n                    preparation: \"Tea, fresh leaves, or essential oil\",\n                    dosage: \"1-2 cups of tea daily\",\n                    research: \"May help reduce stress hormones that contribute to elevated blood pressure.\"\n                }\n            ],\n            lifestyleTips: [\n                \"Reduce sodium intake (aim for <2,300mg daily)\",\n                \"Follow the DASH diet (Dietary Approaches to Stop Hypertension)\",\n                \"Exercise regularly (30 minutes most days)\",\n                \"Limit alcohol consumption\",\n                \"Quit smoking\",\n                \"Practice stress management techniques\",\n                \"Maintain a healthy weight\"\n            ],\n            warning: {\n                type: \"red\",\n                text: \"Do not discontinue prescribed blood pressure medications. Work with your doctor when adding herbs to your routine. Monitor blood pressure regularly.\"\n            }\n        },\n        {\n            id: \"arthritis\",\n            icon: Heart,\n            title: \"Arthritis\",\n            subtitle: \"Joint Health Support\",\n            color: \"text-green-600\",\n            bgColor: \"bg-green-50\",\n            borderColor: \"border-green-200\",\n            definition: \"Arthritis is inflammation of one or more joints, causing pain, stiffness, and reduced range of motion. There are over 100 different types of arthritis.\",\n            types: [\n                {\n                    name: \"Osteoarthritis\",\n                    description: \"Most common type, caused by wear and tear of joint cartilage\"\n                },\n                {\n                    name: \"Rheumatoid Arthritis\",\n                    description: \"Autoimmune condition where the immune system attacks joint tissues\"\n                },\n                {\n                    name: \"Gout\",\n                    description: \"Caused by uric acid crystal buildup in joints\"\n                }\n            ],\n            symptoms: [\n                \"Joint pain and stiffness\",\n                \"Swelling and tenderness\",\n                \"Reduced range of motion\",\n                \"Warmth and redness around joints\",\n                \"Fatigue and weakness\",\n                \"Morning stiffness lasting >30 minutes\"\n            ],\n            riskFactors: [\n                \"Age (risk increases with age)\",\n                \"Family history\",\n                \"Previous joint injury\",\n                \"Obesity (puts extra stress on joints)\",\n                \"Repetitive joint movements\",\n                \"Autoimmune conditions\"\n            ],\n            herbs: [\n                {\n                    name: \"Ginger\",\n                    scientificName: \"Zingiber officinale\",\n                    description: \"Powerful anti-inflammatory herb that may help reduce joint pain and inflammation.\",\n                    preparation: \"Fresh root, tea, powder, or extract\",\n                    dosage: \"1-2 inches fresh ginger daily or 1-2 cups tea\",\n                    research: \"Contains gingerols and shogaols with potent anti-inflammatory properties.\"\n                },\n                {\n                    name: \"Turmeric\",\n                    scientificName: \"Curcuma longa\",\n                    description: \"Golden spice containing curcumin, a powerful anti-inflammatory compound.\",\n                    preparation: \"Fresh root, powder, or extract\",\n                    dosage: \"1/2-1 tsp powder daily with black pepper\",\n                    research: \"Curcumin may help reduce inflammation and joint pain comparable to some medications.\"\n                },\n                {\n                    name: \"Moringa\",\n                    scientificName: \"Moringa oleifera\",\n                    description: \"Nutrient-rich herb that supports overall joint and bone health.\",\n                    preparation: \"Fresh leaves, powder, or tea\",\n                    dosage: \"1/2-1 tsp powder daily\",\n                    research: \"Rich in calcium, magnesium, and anti-inflammatory compounds.\"\n                }\n            ],\n            lifestyleTips: [\n                \"Low-impact exercise (swimming, walking, yoga)\",\n                \"Maintain a healthy weight\",\n                \"Use hot/cold therapy for pain relief\",\n                \"Practice gentle stretching daily\",\n                \"Eat anti-inflammatory foods\",\n                \"Get adequate rest and sleep\",\n                \"Consider physical therapy\"\n            ],\n            warning: {\n                type: \"blue\",\n                text: \"Combine herbs with gentle exercise, heat therapy, and a balanced diet for best results. Consult healthcare provider for severe or worsening symptoms.\"\n            }\n        },\n        {\n            id: \"digestive\",\n            icon: Utensils,\n            title: \"Digestive Health\",\n            subtitle: \"Gut Wellness Support\",\n            color: \"text-orange-600\",\n            bgColor: \"bg-orange-50\",\n            borderColor: \"border-orange-200\",\n            definition: \"Digestive health encompasses the proper functioning of the gastrointestinal system, including digestion, absorption, and elimination of food.\",\n            types: [\n                {\n                    name: \"Irritable Bowel Syndrome (IBS)\",\n                    description: \"Functional disorder affecting the large intestine\"\n                },\n                {\n                    name: \"Acid Reflux/GERD\",\n                    description: \"Stomach acid flows back into the esophagus\"\n                },\n                {\n                    name: \"Constipation\",\n                    description: \"Infrequent or difficult bowel movements\"\n                }\n            ],\n            symptoms: [\n                \"Abdominal pain and cramping\",\n                \"Bloating and gas\",\n                \"Nausea and vomiting\",\n                \"Heartburn and acid reflux\",\n                \"Diarrhea or constipation\",\n                \"Loss of appetite\",\n                \"Fatigue\"\n            ],\n            riskFactors: [\n                \"Poor diet (high in processed foods)\",\n                \"Stress and anxiety\",\n                \"Lack of physical activity\",\n                \"Dehydration\",\n                \"Food intolerances\",\n                \"Medication side effects\"\n            ],\n            herbs: [\n                {\n                    name: \"Peppermint\",\n                    scientificName: \"Mentha piperita\",\n                    description: \"Soothing herb that may help relax digestive muscles and reduce bloating.\",\n                    preparation: \"Tea, essential oil, or capsules\",\n                    dosage: \"1-2 cups of tea daily\",\n                    research: \"May help relieve IBS symptoms and reduce abdominal pain.\"\n                },\n                {\n                    name: \"Ginger\",\n                    scientificName: \"Zingiber officinale\",\n                    description: \"Traditional digestive aid that may help with nausea and improve digestion.\",\n                    preparation: \"Fresh root, tea, or powder\",\n                    dosage: \"1-2 inches fresh ginger daily\",\n                    research: \"May help reduce nausea, improve gastric emptying, and reduce inflammation.\"\n                },\n                {\n                    name: \"Chamomile\",\n                    scientificName: \"Matricaria chamomilla\",\n                    description: \"Gentle herb that may help soothe digestive discomfort and reduce inflammation.\",\n                    preparation: \"Tea or extract\",\n                    dosage: \"1-2 cups of tea daily\",\n                    research: \"May help reduce stomach acid and soothe irritated digestive tissues.\"\n                }\n            ],\n            lifestyleTips: [\n                \"Eat slowly and chew thoroughly\",\n                \"Stay hydrated (8-10 glasses water daily)\",\n                \"Include fiber-rich foods\",\n                \"Manage stress through relaxation techniques\",\n                \"Exercise regularly\",\n                \"Avoid trigger foods\",\n                \"Eat smaller, more frequent meals\"\n            ],\n            warning: {\n                type: \"green\",\n                text: \"Start with small amounts of herbs and gradually increase. Keep a food diary to identify triggers.\"\n            }\n        }\n    ];\n    const getWarningColor = (type) => {\n        switch (type) {\n            case \"yellow\": return \"bg-yellow-50 border-yellow-200 text-yellow-800\";\n            case \"red\": return \"bg-red-50 border-red-200 text-red-800\";\n            case \"blue\": return \"bg-blue-50 border-blue-200 text-blue-800\";\n            case \"green\": return \"bg-green-50 border-green-200 text-green-800\";\n            default: return \"bg-gray-50 border-gray-200 text-gray-800\";\n        }\n    };\n    // Handle scrolling when an ailment is selected\n    useEffect(() => {\n        if (selectedAilment && detailsRef.current) {\n            // Use requestAnimationFrame to ensure DOM has updated\n            const scrollToDetails = () => {\n                if (detailsRef.current) {\n                    const yOffset = -20; // Small offset from top\n                    const y = detailsRef.current.getBoundingClientRect().top + window.pageYOffset + yOffset;\n                    window.scrollTo({\n                        top: y,\n                        behavior: 'smooth'\n                    });\n                }\n            };\n            // Use multiple timing strategies to ensure it works\n            requestAnimationFrame(() => {\n                requestAnimationFrame(scrollToDetails);\n            });\n            // Fallback timeout\n            setTimeout(scrollToDetails, 100);\n        }\n    }, [selectedAilment]);\n    const handleAilmentClick = (ailmentId) => {\n        const newSelectedAilment = selectedAilment === ailmentId ? null : ailmentId;\n        setSelectedAilment(newSelectedAilment);\n    };\n    return (_jsx(\"div\", { className: \"py-16 px-4\", children: _jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsxs(\"div\", { className: \"text-center mb-12\", children: [_jsx(\"h1\", { className: \"text-4xl font-bold mb-4\", \"data-testid\": \"text-page-title\", children: \"Common Health Conditions\" }), _jsx(\"p\", { className: \"text-lg text-muted-foreground max-w-3xl mx-auto\", children: \"Educational information about common health conditions and natural herbal support. Always consult healthcare providers for proper diagnosis and treatment.\" })] }), _jsx(\"div\", { className: \"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12\", children: ailments.map((ailment) => {\n                        const IconComponent = ailment.icon;\n                        return (_jsxs(Card, { className: `p-6 shadow-lg border-2 cursor-pointer transition-all hover:shadow-xl ${ailment.borderColor} ${selectedAilment === ailment.id ? 'ring-2 ring-primary' : ''}`, onClick: () => handleAilmentClick(ailment.id), \"data-testid\": `card-ailment-${ailment.id}`, children: [_jsx(CardHeader, { className: \"pb-4\", children: _jsxs(\"div\", { className: \"flex items-center gap-3\", children: [_jsx(\"div\", { className: `p-3 rounded-full ${ailment.bgColor}`, children: _jsx(IconComponent, { className: `h-6 w-6 ${ailment.color}` }) }), _jsxs(\"div\", { children: [_jsx(CardTitle, { className: `text-xl font-bold ${ailment.color}`, children: ailment.title }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: ailment.subtitle })] })] }) }), _jsxs(CardContent, { className: \"pt-0\", children: [_jsx(\"p\", { className: \"text-muted-foreground text-sm mb-4\", children: ailment.definition }), _jsxs(\"div\", { className: \"flex items-center gap-2\", children: [_jsxs(Badge, { variant: \"outline\", className: \"text-xs\", children: [ailment.herbs.length, \" Herbs\"] }), _jsx(Badge, { variant: \"outline\", className: \"text-xs\", children: \"Natural Support\" })] })] })] }, ailment.id));\n                    }) }), selectedAilment && (_jsx(\"div\", { ref: detailsRef, \"data-details-section\": \"true\", className: \"mt-12\", children: ailments.filter(ailment => ailment.id === selectedAilment).map((ailment) => {\n                        const IconComponent = ailment.icon;\n                        return (_jsxs(Card, { className: `p-8 shadow-lg border-2 ${ailment.borderColor}`, children: [_jsx(CardHeader, { className: \"pb-6\", children: _jsxs(\"div\", { className: \"flex items-center gap-4 mb-4\", children: [_jsx(\"div\", { className: `p-4 rounded-full ${ailment.bgColor}`, children: _jsx(IconComponent, { className: `h-8 w-8 ${ailment.color}` }) }), _jsxs(\"div\", { children: [_jsx(\"h2\", { className: `text-3xl font-bold ${ailment.color}`, children: ailment.title }), _jsx(\"p\", { className: \"text-lg text-muted-foreground\", children: ailment.subtitle })] })] }) }), _jsx(CardContent, { className: \"space-y-8\", children: _jsxs(Tabs, { defaultValue: \"overview\", className: \"w-full\", children: [_jsxs(TabsList, { className: \"grid w-full grid-cols-5\", children: [_jsx(TabsTrigger, { value: \"overview\", children: \"Overview\" }), _jsx(TabsTrigger, { value: \"symptoms\", children: \"Symptoms\" }), _jsx(TabsTrigger, { value: \"herbs\", children: \"Herbal Support\" }), _jsx(TabsTrigger, { value: \"lifestyle\", children: \"Lifestyle\" }), _jsx(TabsTrigger, { value: \"safety\", children: \"Safety\" })] }), _jsxs(TabsContent, { value: \"overview\", className: \"space-y-6\", children: [_jsxs(\"div\", { children: [_jsxs(\"h3\", { className: \"text-xl font-semibold mb-3 flex items-center gap-2\", children: [_jsx(BookOpen, { className: \"h-5 w-5\" }), \"Definition & Types\"] }), _jsx(\"p\", { className: \"text-muted-foreground mb-4\", children: ailment.definition }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: ailment.types.map((type, index) => (_jsxs(\"div\", { className: \"bg-muted p-4 rounded-lg\", children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: type.name }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: type.description })] }, index))) })] }), _jsxs(\"div\", { children: [_jsxs(\"h3\", { className: \"text-xl font-semibold mb-3 flex items-center gap-2\", children: [_jsx(AlertTriangle, { className: \"h-5 w-5\" }), \"Risk Factors\"] }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-2\", children: ailment.riskFactors.map((factor, index) => (_jsxs(\"div\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-red-500 rounded-full\" }), _jsx(\"span\", { className: \"text-sm\", children: factor })] }, index))) })] })] }), _jsx(TabsContent, { value: \"symptoms\", className: \"space-y-6\", children: _jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"text-xl font-semibold mb-4\", children: \"Common Symptoms\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-3\", children: ailment.symptoms.map((symptom, index) => (_jsxs(\"div\", { className: \"flex items-center gap-3 p-3 bg-muted rounded-lg\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-orange-500 rounded-full\" }), _jsx(\"span\", { className: \"text-sm\", children: symptom })] }, index))) })] }) }), _jsx(TabsContent, { value: \"herbs\", className: \"space-y-6\", children: _jsxs(\"div\", { children: [_jsxs(\"h3\", { className: \"text-xl font-semibold mb-4 flex items-center gap-2\", children: [_jsx(Leaf, { className: \"h-5 w-5\" }), \"Herbal Support\"] }), _jsx(\"div\", { className: \"space-y-6\", children: ailment.herbs.map((herb, index) => (_jsxs(Card, { className: \"p-6\", children: [_jsx(CardHeader, { className: \"pb-4\", children: _jsxs(\"div\", { className: \"flex items-center justify-between\", children: [_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"text-lg font-semibold\", children: herb.name }), _jsx(\"p\", { className: \"text-sm text-muted-foreground italic\", children: herb.scientificName })] }), _jsx(Badge, { variant: \"outline\", children: \"Herbal Support\" })] }) }), _jsxs(CardContent, { className: \"space-y-4\", children: [_jsx(\"p\", { className: \"text-muted-foreground\", children: herb.description }), _jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h5\", { className: \"font-semibold mb-2\", children: \"Preparation & Dosage\" }), _jsxs(\"p\", { className: \"text-sm text-muted-foreground mb-2\", children: [_jsx(\"strong\", { children: \"How to use:\" }), \" \", herb.preparation] }), _jsxs(\"p\", { className: \"text-sm text-muted-foreground\", children: [_jsx(\"strong\", { children: \"Dosage:\" }), \" \", herb.dosage] })] }), _jsxs(\"div\", { children: [_jsx(\"h5\", { className: \"font-semibold mb-2\", children: \"Research Notes\" }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: herb.research })] })] })] })] }, index))) })] }) }), _jsx(TabsContent, { value: \"lifestyle\", className: \"space-y-6\", children: _jsxs(\"div\", { children: [_jsxs(\"h3\", { className: \"text-xl font-semibold mb-4 flex items-center gap-2\", children: [_jsx(Lightbulb, { className: \"h-5 w-5\" }), \"Lifestyle Recommendations\"] }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-3\", children: ailment.lifestyleTips.map((tip, index) => (_jsxs(\"div\", { className: \"flex items-start gap-3 p-4 bg-muted rounded-lg\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-green-500 rounded-full mt-2\" }), _jsx(\"span\", { className: \"text-sm\", children: tip })] }, index))) })] }) }), _jsx(TabsContent, { value: \"safety\", className: \"space-y-6\", children: _jsxs(\"div\", { children: [_jsxs(\"h3\", { className: \"text-xl font-semibold mb-4 flex items-center gap-2\", children: [_jsx(Info, { className: \"h-5 w-5\" }), \"Important Safety Information\"] }), _jsxs(\"div\", { className: `p-6 rounded-lg border ${getWarningColor(ailment.warning.type)}`, children: [_jsxs(\"p\", { className: \"font-semibold mb-2\", children: [ailment.warning.type === \"yellow\" && \"⚠️ Important:\", ailment.warning.type === \"red\" && \"🚨 Caution:\", ailment.warning.type === \"blue\" && \"💡 Tip:\", ailment.warning.type === \"green\" && \"✅ Note:\"] }), _jsx(\"p\", { children: ailment.warning.text })] }), _jsxs(\"div\", { className: \"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\", children: [_jsx(\"h4\", { className: \"font-semibold text-blue-800 mb-2\", children: \"When to Seek Medical Attention\" }), _jsxs(\"ul\", { className: \"text-sm text-blue-700 space-y-1\", children: [_jsx(\"li\", { children: \"\\u2022 Severe or worsening symptoms\" }), _jsx(\"li\", { children: \"\\u2022 New or unusual symptoms\" }), _jsx(\"li\", { children: \"\\u2022 Symptoms that interfere with daily activities\" }), _jsx(\"li\", { children: \"\\u2022 Concerns about medication interactions\" }), _jsx(\"li\", { children: \"\\u2022 Emergency symptoms (chest pain, severe shortness of breath, etc.)\" })] })] })] }) })] }) })] }, ailment.id));\n                    }) })), _jsx(\"div\", { className: \"mt-12 text-center\", children: _jsx(Card, { className: \"p-6 bg-muted/30\", children: _jsxs(CardContent, { children: [_jsx(\"h3\", { className: \"text-lg font-semibold mb-2\", children: \"Disclaimer\" }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: \"This information is for educational purposes only and is not intended as medical advice. Always consult with qualified healthcare professionals for proper diagnosis and treatment. Herbs may interact with medications and should be used under medical supervision.\" })] }) }) })] }) }));\n}\n","size_bytes":26537},"client/src/pages/community.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Heart, MessageCircle, Eye, Plus, Users, TrendingUp, Award, Tag, User, ThumbsUp } from \"lucide-react\";\nexport default function Community() {\n    const [selectedCategory, setSelectedCategory] = useState(\"all\");\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [isCreatePostOpen, setIsCreatePostOpen] = useState(false);\n    const [selectedPost, setSelectedPost] = useState(null);\n    const [isCommentDialogOpen, setIsCommentDialogOpen] = useState(false);\n    const [currentUserEmail, setCurrentUserEmail] = useState(\"\"); // User will input their email\n    const [currentUserName, setCurrentUserName] = useState(\"\"); // User will input their name\n    const queryClient = useQueryClient();\n    // Form states\n    const [postForm, setPostForm] = useState({\n        authorName: \"\",\n        authorEmail: \"\",\n        title: \"\",\n        content: \"\",\n        category: \"success-story\",\n        tags: [],\n        imageUrl: \"\"\n    });\n    const [commentForm, setCommentForm] = useState({\n        authorName: \"\",\n        authorEmail: \"\",\n        content: \"\"\n    });\n    // Fetch community posts\n    const { data: posts = [], isLoading, error } = useQuery({\n        queryKey: [\"/api/community/posts\"],\n        refetchOnWindowFocus: false,\n        retry: 3,\n        staleTime: 5 * 60 * 1000, // 5 minutes\n    });\n    // Fallback sample posts if API fails\n    const fallbackPosts = [\n        {\n            id: \"1\",\n            authorName: \"Sarah Johnson\",\n            authorEmail: \"sarah@example.com\",\n            title: \"My Journey with Chamomile for Better Sleep\",\n            content: \"I've been struggling with insomnia for months, and chamomile tea has been a game-changer! I started drinking a cup 30 minutes before bed, and within a week, I noticed a significant improvement in my sleep quality.\",\n            category: \"success-story\",\n            tags: [\"sleep\", \"chamomile\", \"anxiety\", \"insomnia\"],\n            imageUrl: \"/attached_assets/generated_images/Chamomile_flowers_blooming_fcc5a2fb.png\",\n            likes: \"5\",\n            views: \"12\",\n            isApproved: \"true\",\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n        },\n        {\n            id: \"2\",\n            authorName: \"Michael Chen\",\n            authorEmail: \"michael@example.com\",\n            title: \"Ginger Tea: My Natural Energy Boost\",\n            content: \"As someone who works long hours, I was always looking for natural ways to boost my energy without caffeine crashes. Ginger tea has been incredible!\",\n            category: \"success-story\",\n            tags: [\"energy\", \"ginger\", \"digestion\", \"anti-inflammatory\"],\n            imageUrl: \"/attached_assets/generated_images/Fresh_ginger_root_pieces_b404e3ce.png\",\n            likes: \"3\",\n            views: \"8\",\n            isApproved: \"true\",\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n        },\n        {\n            id: \"3\",\n            authorName: \"David Thompson\",\n            authorEmail: \"david@example.com\",\n            title: \"Question: Best Herbs for Stress Management?\",\n            content: \"I'm going through a particularly stressful time at work and looking for natural ways to manage stress. What would you recommend?\",\n            category: \"question\",\n            tags: [\"stress\", \"adaptogens\", \"mental-health\", \"beginner\"],\n            imageUrl: null,\n            likes: \"2\",\n            views: \"15\",\n            isApproved: \"true\",\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n        }\n    ];\n    const displayPosts = posts.length > 0 ? posts : fallbackPosts;\n    // Fetch comments for selected post\n    const { data: comments = [] } = useQuery({\n        queryKey: [\"/api/community/posts\", selectedPost?.id, \"comments\"],\n        enabled: !!selectedPost,\n        refetchOnWindowFocus: false,\n    });\n    // Create post mutation\n    const createPostMutation = useMutation({\n        mutationFn: async (postData) => {\n            const response = await fetch(\"/api/community/posts\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(postData),\n            });\n            if (!response.ok)\n                throw new Error(\"Failed to create post\");\n            return response.json();\n        },\n        onSuccess: () => {\n            queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\"] });\n            setIsCreatePostOpen(false);\n            setPostForm({\n                authorName: \"\",\n                authorEmail: \"\",\n                title: \"\",\n                content: \"\",\n                category: \"success-story\",\n                tags: [],\n                imageUrl: \"\"\n            });\n        },\n    });\n    // Create comment mutation\n    const createCommentMutation = useMutation({\n        mutationFn: async (commentData) => {\n            const response = await fetch(\"/api/community/comments\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(commentData),\n            });\n            if (!response.ok)\n                throw new Error(\"Failed to create comment\");\n            return response.json();\n        },\n        onSuccess: () => {\n            queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\", selectedPost?.id, \"comments\"] });\n            setIsCommentDialogOpen(false);\n            setCommentForm({\n                authorName: \"\",\n                authorEmail: \"\",\n                content: \"\"\n            });\n        },\n    });\n    // Like post mutation\n    const likePostMutation = useMutation({\n        mutationFn: async ({ postId, userEmail }) => {\n            const response = await fetch(`/api/community/posts/${postId}/like`, {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({ userEmail }),\n            });\n            if (!response.ok)\n                throw new Error(\"Failed to like post\");\n            return response.json();\n        },\n        onSuccess: () => {\n            queryClient.invalidateQueries({ queryKey: [\"/api/community/posts\"] });\n        },\n    });\n    // Filter posts based on category and search\n    const filteredPosts = displayPosts.filter(post => {\n        const matchesCategory = selectedCategory === \"all\" || post.category === selectedCategory;\n        const matchesSearch = searchQuery === \"\" ||\n            post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n            post.content.toLowerCase().includes(searchQuery.toLowerCase()) ||\n            (post.tags && post.tags.some((tag) => tag.toLowerCase().includes(searchQuery.toLowerCase())));\n        return matchesCategory && matchesSearch;\n    });\n    // Debug logging\n    console.log('All posts:', displayPosts);\n    console.log('Selected category:', selectedCategory);\n    console.log('Filtered posts:', filteredPosts);\n    const categories = [\n        { value: \"all\", label: \"All Posts\", icon: Users },\n        { value: \"success-story\", label: \"Success Stories\", icon: Award },\n        { value: \"journey\", label: \"Wellness Journeys\", icon: TrendingUp },\n        { value: \"question\", label: \"Questions\", icon: MessageCircle },\n        { value: \"tip\", label: \"Tips & Advice\", icon: Heart },\n    ];\n    const handleCreatePost = () => {\n        if (!postForm.authorName.trim() || !postForm.authorEmail.trim()) {\n            alert(\"Please provide your name and email to share your story.\");\n            return;\n        }\n        createPostMutation.mutate(postForm);\n    };\n    const handleCreateComment = () => {\n        if (!commentForm.authorName.trim() || !commentForm.authorEmail.trim()) {\n            alert(\"Please provide your name and email to comment.\");\n            return;\n        }\n        if (selectedPost) {\n            createCommentMutation.mutate({\n                ...commentForm,\n                postId: selectedPost.id\n            });\n        }\n    };\n    const handleLikePost = (postId) => {\n        if (!currentUserEmail.trim()) {\n            const email = prompt(\"Please enter your email to like this post:\");\n            if (!email || !email.trim()) {\n                return;\n            }\n            setCurrentUserEmail(email.trim());\n            likePostMutation.mutate({ postId, userEmail: email.trim() });\n            return;\n        }\n        likePostMutation.mutate({ postId, userEmail: currentUserEmail });\n    };\n    const formatDate = (dateString) => {\n        return new Date(dateString).toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric'\n        });\n    };\n    const getCategoryIcon = (category) => {\n        const cat = categories.find(c => c.value === category);\n        return cat ? cat.icon : Users;\n    };\n    const getCategoryColor = (category) => {\n        switch (category) {\n            case \"success-story\": return \"bg-green-100 text-green-800\";\n            case \"journey\": return \"bg-blue-100 text-blue-800\";\n            case \"question\": return \"bg-purple-100 text-purple-800\";\n            case \"tip\": return \"bg-orange-100 text-orange-800\";\n            default: return \"bg-gray-100 text-gray-800\";\n        }\n    };\n    if (isLoading) {\n        return (_jsx(\"div\", { className: \"flex items-center justify-center min-h-screen\", children: _jsxs(\"div\", { className: \"text-center\", children: [_jsx(\"div\", { className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\" }), _jsx(\"p\", { className: \"text-muted-foreground\", children: \"Loading community posts...\" })] }) }));\n    }\n    if (error) {\n        return (_jsx(\"div\", { className: \"flex items-center justify-center min-h-screen\", children: _jsxs(\"div\", { className: \"text-center\", children: [_jsx(\"div\", { className: \"text-red-500 text-2xl mb-4\", children: \"\\u26A0\\uFE0F\" }), _jsx(\"h3\", { className: \"text-lg font-semibold mb-2\", children: \"Error Loading Community\" }), _jsx(\"p\", { className: \"text-muted-foreground mb-4\", children: \"Unable to load community posts. Please try again later.\" }), _jsx(Button, { onClick: () => window.location.reload(), children: \"Retry\" })] }) }));\n    }\n    return (_jsx(\"div\", { className: \"py-16 px-4\", children: _jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsxs(\"div\", { className: \"text-center mb-12\", children: [_jsx(\"h1\", { className: \"text-4xl font-bold mb-4\", \"data-testid\": \"text-community-title\", children: \"Wellness Community Center\" }), _jsx(\"p\", { className: \"text-lg text-muted-foreground max-w-2xl mx-auto\", children: \"Share your wellness journey, celebrate successes, ask questions, and support others on their path to natural health.\" })] }), process.env.NODE_ENV === 'development' && (_jsxs(\"div\", { className: \"mb-8 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\", children: [_jsx(\"h3\", { className: \"font-semibold mb-2\", children: \"Debug Info:\" }), _jsxs(\"p\", { children: [\"Total posts: \", displayPosts.length] }), _jsxs(\"p\", { children: [\"Selected category: \", selectedCategory] }), _jsxs(\"p\", { children: [\"Filtered posts: \", filteredPosts.length] }), _jsx(\"p\", { children: \"Posts by category:\" }), _jsx(\"ul\", { className: \"text-sm\", children: categories.map(cat => (_jsxs(\"li\", { children: [cat.label, \": \", displayPosts.filter(p => p.category === cat.value).length] }, cat.value))) })] })), _jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\", children: [_jsx(Card, { children: _jsxs(CardContent, { className: \"p-6 text-center\", children: [_jsx(Users, { className: \"h-8 w-8 text-primary mx-auto mb-2\" }), _jsx(\"div\", { className: \"text-2xl font-bold\", children: displayPosts.length }), _jsx(\"div\", { className: \"text-sm text-muted-foreground\", children: \"Community Posts\" })] }) }), _jsx(Card, { children: _jsxs(CardContent, { className: \"p-6 text-center\", children: [_jsx(Award, { className: \"h-8 w-8 text-green-600 mx-auto mb-2\" }), _jsx(\"div\", { className: \"text-2xl font-bold\", children: displayPosts.filter(p => p.category === \"success-story\").length }), _jsx(\"div\", { className: \"text-sm text-muted-foreground\", children: \"Success Stories\" })] }) }), _jsx(Card, { children: _jsxs(CardContent, { className: \"p-6 text-center\", children: [_jsx(MessageCircle, { className: \"h-8 w-8 text-blue-600 mx-auto mb-2\" }), _jsx(\"div\", { className: \"text-2xl font-bold\", children: displayPosts.filter(p => p.category === \"question\").length }), _jsx(\"div\", { className: \"text-sm text-muted-foreground\", children: \"Questions Asked\" })] }) }), _jsx(Card, { children: _jsxs(CardContent, { className: \"p-6 text-center\", children: [_jsx(Heart, { className: \"h-8 w-8 text-red-600 mx-auto mb-2\" }), _jsx(\"div\", { className: \"text-2xl font-bold\", children: displayPosts.reduce((sum, post) => sum + parseInt(post.likes), 0) }), _jsx(\"div\", { className: \"text-sm text-muted-foreground\", children: \"Total Likes\" })] }) })] }), _jsxs(\"div\", { className: \"flex flex-col md:flex-row gap-4 mb-8\", children: [_jsx(\"div\", { className: \"flex-1\", children: _jsx(Input, { placeholder: \"Search posts, tags, or content...\", value: searchQuery, onChange: (e) => setSearchQuery(e.target.value), className: \"max-w-md\" }) }), _jsxs(Dialog, { open: isCreatePostOpen, onOpenChange: setIsCreatePostOpen, children: [_jsx(DialogTrigger, { asChild: true, children: _jsxs(Button, { className: \"flex items-center gap-2\", children: [_jsx(Plus, { className: \"h-4 w-4\" }), \"Share Your Story\"] }) }), _jsxs(DialogContent, { className: \"max-w-2xl max-h-[80vh] overflow-y-auto\", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: \"Share Your Wellness Journey\" }) }), _jsxs(\"div\", { className: \"space-y-4\", children: [_jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: [_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium\", children: \"Your Name *\" }), _jsx(Input, { placeholder: \"Enter your name...\", value: postForm.authorName, onChange: (e) => setPostForm({ ...postForm, authorName: e.target.value }), required: true })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium\", children: \"Your Email *\" }), _jsx(Input, { type: \"email\", placeholder: \"Enter your email...\", value: postForm.authorEmail, onChange: (e) => setPostForm({ ...postForm, authorEmail: e.target.value }), required: true }), _jsx(\"p\", { className: \"text-xs text-muted-foreground mt-1\", children: \"Your email will only be used for community features and won't be shared publicly.\" })] })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium\", children: \"Title\" }), _jsx(Input, { placeholder: \"Give your post a descriptive title...\", value: postForm.title, onChange: (e) => setPostForm({ ...postForm, title: e.target.value }) })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium\", children: \"Category\" }), _jsxs(Select, { value: postForm.category, onValueChange: (value) => setPostForm({ ...postForm, category: value }), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: \"success-story\", children: \"Success Story\" }), _jsx(SelectItem, { value: \"journey\", children: \"Wellness Journey\" }), _jsx(SelectItem, { value: \"question\", children: \"Question\" }), _jsx(SelectItem, { value: \"tip\", children: \"Tip & Advice\" })] })] })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium\", children: \"Content\" }), _jsx(Textarea, { placeholder: \"Share your experience, ask questions, or provide helpful tips...\", value: postForm.content, onChange: (e) => setPostForm({ ...postForm, content: e.target.value }), rows: 6 })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium\", children: \"Tags (comma-separated)\" }), _jsx(Input, { placeholder: \"herbs, sleep, energy, etc.\", value: postForm.tags.join(\", \"), onChange: (e) => setPostForm({ ...postForm, tags: e.target.value.split(\",\").map(t => t.trim()).filter(t => t) }) })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium\", children: \"Image URL (optional)\" }), _jsx(Input, { placeholder: \"https://example.com/image.jpg\", value: postForm.imageUrl, onChange: (e) => setPostForm({ ...postForm, imageUrl: e.target.value }) })] }), _jsx(Button, { onClick: handleCreatePost, disabled: createPostMutation.isPending || !postForm.title || !postForm.content || !postForm.authorName || !postForm.authorEmail, className: \"w-full\", children: createPostMutation.isPending ? \"Creating...\" : \"Share Post\" })] })] })] })] }), _jsx(Tabs, { value: selectedCategory, onValueChange: setSelectedCategory, className: \"mb-8\", children: _jsx(TabsList, { className: \"grid w-full grid-cols-5\", children: categories.map((category) => {\n                            const IconComponent = category.icon;\n                            return (_jsxs(TabsTrigger, { value: category.value, className: \"flex items-center gap-2\", children: [_jsx(IconComponent, { className: \"h-4 w-4\" }), _jsx(\"span\", { className: \"hidden sm:inline\", children: category.label })] }, category.value));\n                        }) }) }), _jsx(\"div\", { className: \"grid grid-cols-1 lg:grid-cols-2 gap-6\", children: filteredPosts.map((post) => {\n                        const CategoryIcon = getCategoryIcon(post.category);\n                        return (_jsxs(Card, { className: \"hover:shadow-lg transition-shadow cursor-pointer\", children: [_jsx(CardHeader, { children: _jsx(\"div\", { className: \"flex items-start justify-between\", children: _jsxs(\"div\", { className: \"flex-1\", children: [_jsxs(\"div\", { className: \"flex items-center gap-2 mb-2\", children: [_jsxs(Badge, { className: getCategoryColor(post.category), children: [_jsx(CategoryIcon, { className: \"h-3 w-3 mr-1\" }), categories.find(c => c.value === post.category)?.label] }), _jsx(\"span\", { className: \"text-sm text-muted-foreground\", children: formatDate(post.createdAt) })] }), _jsx(CardTitle, { className: \"text-lg mb-2\", children: post.title }), _jsxs(\"div\", { className: \"flex items-center gap-4 text-sm text-muted-foreground\", children: [_jsxs(\"div\", { className: \"flex items-center gap-1\", children: [_jsx(User, { className: \"h-4 w-4\" }), post.authorName] }), _jsxs(\"div\", { className: \"flex items-center gap-1\", children: [_jsx(Eye, { className: \"h-4 w-4\" }), post.views] }), _jsxs(\"div\", { className: \"flex items-center gap-1\", children: [_jsx(Heart, { className: \"h-4 w-4\" }), post.likes] })] })] }) }) }), _jsxs(CardContent, { children: [_jsx(\"p\", { className: \"text-muted-foreground mb-4 line-clamp-3\", children: post.content }), post.imageUrl && (_jsx(\"img\", { src: post.imageUrl, alt: post.title, className: \"w-full h-48 object-cover rounded-lg mb-4\" })), post.tags.length > 0 && (_jsx(\"div\", { className: \"flex flex-wrap gap-2 mb-4\", children: post.tags.map((tag, index) => (_jsxs(Badge, { variant: \"outline\", className: \"text-xs\", children: [_jsx(Tag, { className: \"h-3 w-3 mr-1\" }), tag] }, index))) })), _jsxs(\"div\", { className: \"flex gap-2\", children: [_jsxs(Button, { variant: \"outline\", size: \"sm\", onClick: () => handleLikePost(post.id), className: \"flex items-center gap-2\", children: [_jsx(ThumbsUp, { className: \"h-4 w-4\" }), \"Like\"] }), _jsxs(Button, { variant: \"outline\", size: \"sm\", onClick: () => {\n                                                        setSelectedPost(post);\n                                                        setIsCommentDialogOpen(true);\n                                                    }, className: \"flex items-center gap-2\", children: [_jsx(MessageCircle, { className: \"h-4 w-4\" }), post.category === \"question\" ? \"Answer\" : \"Comment\"] })] })] })] }, post.id));\n                    }) }), filteredPosts.length === 0 && (_jsxs(\"div\", { className: \"text-center py-12\", children: [_jsx(MessageCircle, { className: \"h-12 w-12 text-muted-foreground mx-auto mb-4\" }), _jsx(\"h3\", { className: \"text-lg font-semibold mb-2\", children: \"No posts found\" }), _jsx(\"p\", { className: \"text-muted-foreground mb-4\", children: searchQuery ? \"Try adjusting your search terms\" : \"Be the first to share your wellness journey!\" }), _jsxs(Button, { onClick: () => setIsCreatePostOpen(true), children: [_jsx(Plus, { className: \"h-4 w-4 mr-2\" }), \"Share Your Story\"] })] })), _jsx(Dialog, { open: isCommentDialogOpen, onOpenChange: setIsCommentDialogOpen, children: _jsxs(DialogContent, { className: \"max-w-2xl max-h-[80vh] overflow-y-auto\", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { children: selectedPost?.category === \"question\"\n                                        ? `Answers to \"${selectedPost?.title}\"`\n                                        : `Comments on \"${selectedPost?.title}\"` }) }), selectedPost && (_jsxs(\"div\", { className: \"space-y-4\", children: [_jsx(Card, { children: _jsxs(CardContent, { className: \"p-4\", children: [_jsxs(\"div\", { className: \"flex items-center gap-2 mb-2\", children: [_jsx(Badge, { className: getCategoryColor(selectedPost.category), children: categories.find(c => c.value === selectedPost.category)?.label }), _jsx(\"span\", { className: \"text-sm text-muted-foreground\", children: formatDate(selectedPost.createdAt) })] }), _jsx(\"h3\", { className: \"font-semibold mb-2\", children: selectedPost.title }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: selectedPost.content })] }) }), _jsxs(\"div\", { className: \"space-y-4\", children: [_jsx(\"h4\", { className: \"font-semibold\", children: selectedPost.category === \"question\"\n                                                    ? `Answers (${comments.length})`\n                                                    : `Comments (${comments.length})` }), comments.map((comment) => (_jsx(Card, { children: _jsxs(CardContent, { className: \"p-4\", children: [_jsxs(\"div\", { className: \"flex items-center justify-between mb-2\", children: [_jsxs(\"div\", { className: \"flex items-center gap-2\", children: [_jsx(User, { className: \"h-4 w-4 text-muted-foreground\" }), _jsx(\"span\", { className: \"font-medium text-sm\", children: comment.authorName }), _jsx(\"span\", { className: \"text-xs text-muted-foreground\", children: formatDate(comment.createdAt) })] }), _jsxs(\"div\", { className: \"flex items-center gap-1 text-sm text-muted-foreground\", children: [_jsx(Heart, { className: \"h-3 w-3\" }), comment.likes] })] }), _jsx(\"p\", { className: \"text-sm\", children: comment.content })] }) }, comment.id)))] }), _jsxs(\"div\", { className: \"space-y-4\", children: [_jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: [_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium\", children: \"Your Name *\" }), _jsx(Input, { placeholder: \"Enter your name...\", value: commentForm.authorName, onChange: (e) => setCommentForm({ ...commentForm, authorName: e.target.value }), required: true })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium\", children: \"Your Email *\" }), _jsx(Input, { type: \"email\", placeholder: \"Enter your email...\", value: commentForm.authorEmail, onChange: (e) => {\n                                                                    setCommentForm({ ...commentForm, authorEmail: e.target.value });\n                                                                    setCurrentUserEmail(e.target.value); // Store for likes\n                                                                }, required: true }), _jsx(\"p\", { className: \"text-xs text-muted-foreground mt-1\", children: \"Your email will only be used for community features and won't be shared publicly.\" })] })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium\", children: selectedPost.category === \"question\" ? \"Your Answer\" : \"Your Comment\" }), _jsx(Textarea, { placeholder: selectedPost.category === \"question\"\n                                                            ? \"Share your experience and advice to help answer this question...\"\n                                                            : \"Share your thoughts, ask questions, or offer support...\", value: commentForm.content, onChange: (e) => setCommentForm({ ...commentForm, content: e.target.value }), rows: 3 })] }), _jsx(Button, { onClick: handleCreateComment, disabled: createCommentMutation.isPending || !commentForm.content || !commentForm.authorName || !commentForm.authorEmail, className: \"w-full\", children: createCommentMutation.isPending ? \"Posting...\" : (selectedPost.category === \"question\" ? \"Post Answer\" : \"Post Comment\") })] })] }))] }) })] }) }));\n}\n","size_bytes":25351},"client/src/pages/contact.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MessageCircle, Clock, Heart } from \"lucide-react\";\nexport default function Contact() {\n    const { toast } = useToast();\n    const [formData, setFormData] = useState({\n        name: \"\",\n        email: \"\",\n        subject: \"\",\n        message: \"\"\n    });\n    const contactMutation = useMutation({\n        mutationFn: async (data) => {\n            return await apiRequest(\"POST\", \"/api/contact\", data);\n        },\n        onSuccess: () => {\n            toast({\n                title: \"Message sent successfully!\",\n                description: \"We'll respond within 24-48 hours.\",\n            });\n            setFormData({ name: \"\", email: \"\", subject: \"\", message: \"\" });\n        },\n        onError: () => {\n            toast({\n                title: \"Failed to send message\",\n                description: \"Please try again later.\",\n                variant: \"destructive\",\n            });\n        },\n    });\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!formData.name || !formData.email || !formData.message) {\n            toast({\n                title: \"Please fill in required fields\",\n                description: \"Name, email, and message are required.\",\n                variant: \"destructive\",\n            });\n            return;\n        }\n        contactMutation.mutate(formData);\n    };\n    const handleInputChange = (field, value) => {\n        setFormData(prev => ({ ...prev, [field]: value }));\n    };\n    const socialLinks = [\n        { name: \"Facebook\", icon: \"fab fa-facebook\", color: \"text-blue-600\", bgColor: \"bg-blue-50 hover:bg-blue-100\" },\n        { name: \"Instagram\", icon: \"fab fa-instagram\", color: \"text-pink-600\", bgColor: \"bg-pink-50 hover:bg-pink-100\" },\n        { name: \"YouTube\", icon: \"fab fa-youtube\", color: \"text-red-600\", bgColor: \"bg-red-50 hover:bg-red-100\" },\n        { name: \"Twitter\", icon: \"fab fa-twitter\", color: \"text-blue-400\", bgColor: \"bg-blue-50 hover:bg-blue-100\" }\n    ];\n    return (_jsx(\"div\", { className: \"py-16 px-4\", children: _jsxs(\"div\", { className: \"max-w-4xl mx-auto\", children: [_jsx(\"h1\", { className: \"text-4xl font-bold text-center mb-8\", \"data-testid\": \"text-page-title\", children: \"Contact Us\" }), _jsx(\"p\", { className: \"text-lg text-muted-foreground text-center mb-12 max-w-2xl mx-auto\", children: \"Have questions about herbs or natural wellness? We'd love to hear from you!\" }), _jsxs(\"div\", { className: \"grid grid-cols-1 lg:grid-cols-2 gap-12\", children: [_jsx(Card, { className: \"p-8 shadow-lg border border-border\", children: _jsxs(CardContent, { className: \"p-0\", children: [_jsx(\"h2\", { className: \"text-2xl font-bold mb-6\", \"data-testid\": \"text-form-title\", children: \"Send us a Message\" }), _jsxs(\"form\", { onSubmit: handleSubmit, className: \"space-y-6\", children: [_jsxs(\"div\", { children: [_jsx(\"label\", { htmlFor: \"name\", className: \"block text-sm font-medium mb-2\", children: \"Your Name *\" }), _jsx(Input, { id: \"name\", type: \"text\", placeholder: \"Enter your full name\", value: formData.name, onChange: (e) => handleInputChange(\"name\", e.target.value), required: true, \"data-testid\": \"input-name\" })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { htmlFor: \"email\", className: \"block text-sm font-medium mb-2\", children: \"Email Address *\" }), _jsx(Input, { id: \"email\", type: \"email\", placeholder: \"your.email@example.com\", value: formData.email, onChange: (e) => handleInputChange(\"email\", e.target.value), required: true, \"data-testid\": \"input-email\" })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { htmlFor: \"subject\", className: \"block text-sm font-medium mb-2\", children: \"Subject\" }), _jsxs(Select, { onValueChange: (value) => handleInputChange(\"subject\", value), children: [_jsx(SelectTrigger, { \"data-testid\": \"select-subject\", children: _jsx(SelectValue, { placeholder: \"Select a topic\" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: \"general\", children: \"General Question\" }), _jsx(SelectItem, { value: \"herbs\", children: \"Herb Information\" }), _jsx(SelectItem, { value: \"safety\", children: \"Safety Concerns\" }), _jsx(SelectItem, { value: \"collaboration\", children: \"Collaboration\" }), _jsx(SelectItem, { value: \"feedback\", children: \"Feedback\" })] })] })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { htmlFor: \"message\", className: \"block text-sm font-medium mb-2\", children: \"Message *\" }), _jsx(Textarea, { id: \"message\", rows: 5, placeholder: \"Tell us how we can help you...\", value: formData.message, onChange: (e) => handleInputChange(\"message\", e.target.value), required: true, \"data-testid\": \"textarea-message\" })] }), _jsx(Button, { type: \"submit\", className: \"w-full\", disabled: contactMutation.isPending, \"data-testid\": \"button-send-message\", children: contactMutation.isPending ? \"Sending...\" : \"Send Message\" })] })] }) }), _jsxs(\"div\", { className: \"space-y-8\", children: [_jsx(Card, { className: \"p-8 shadow-lg border border-border\", children: _jsxs(CardContent, { className: \"p-0\", children: [_jsxs(\"h3\", { className: \"text-xl font-bold mb-4 flex items-center\", children: [_jsx(MessageCircle, { className: \"text-primary mr-3\" }), \"Quick Connect\"] }), _jsx(\"p\", { className: \"text-muted-foreground mb-6\", children: \"For immediate questions or consultations, reach out through our messaging platforms:\" }), _jsxs(\"div\", { className: \"space-y-4\", children: [_jsxs(\"a\", { href: \"#\", className: \"flex items-center space-x-3 p-3 bg-green-50 hover:bg-green-100 rounded-lg transition-colors\", \"data-testid\": \"link-whatsapp\", children: [_jsx(\"i\", { className: \"fab fa-whatsapp text-2xl text-green-600\" }), _jsx(\"span\", { className: \"font-medium\", children: \"WhatsApp\" }), _jsx(\"span\", { className: \"text-sm text-muted-foreground ml-auto\", children: \"Coming Soon\" })] }), _jsxs(\"a\", { href: \"#\", className: \"flex items-center space-x-3 p-3 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors\", \"data-testid\": \"link-telegram\", children: [_jsx(\"i\", { className: \"fab fa-telegram text-2xl text-blue-600\" }), _jsx(\"span\", { className: \"font-medium\", children: \"Telegram\" }), _jsx(\"span\", { className: \"text-sm text-muted-foreground ml-auto\", children: \"Coming Soon\" })] })] })] }) }), _jsx(Card, { className: \"p-8 shadow-lg border border-border\", children: _jsxs(CardContent, { className: \"p-0\", children: [_jsxs(\"h3\", { className: \"text-xl font-bold mb-4 flex items-center\", children: [_jsx(Clock, { className: \"text-accent mr-3\" }), \"Response Time\"] }), _jsx(\"p\", { className: \"text-muted-foreground mb-4\", children: \"We typically respond to messages within 24-48 hours. For urgent health concerns, please consult with a healthcare professional immediately.\" }), _jsx(\"div\", { className: \"bg-yellow-50 border border-yellow-200 p-4 rounded-lg\", children: _jsxs(\"p\", { className: \"text-sm text-yellow-800\", children: [_jsx(\"strong\", { children: \"Remember:\" }), \" We provide educational information only. For medical emergencies or serious health issues, please contact your healthcare provider or emergency services.\"] }) })] }) }), _jsx(Card, { className: \"p-8 shadow-lg border border-border\", children: _jsxs(CardContent, { className: \"p-0\", children: [_jsxs(\"h3\", { className: \"text-xl font-bold mb-4 flex items-center\", children: [_jsx(Heart, { className: \"text-secondary mr-3\" }), \"Connect with Us\"] }), _jsx(\"p\", { className: \"text-muted-foreground mb-4\", children: \"Join our community of natural wellness enthusiasts:\" }), _jsx(\"div\", { className: \"grid grid-cols-2 gap-4\", children: socialLinks.map((social) => (_jsxs(\"a\", { href: \"#\", className: `flex items-center justify-center space-x-2 p-3 rounded-lg transition-colors ${social.bgColor}`, \"data-testid\": `link-social-${social.name.toLowerCase()}`, children: [_jsx(\"i\", { className: `${social.icon} ${social.color}` }), _jsx(\"span\", { className: \"text-sm\", children: social.name })] }, social.name))) })] }) })] })] })] }) }));\n}\n","size_bytes":8401},"client/src/pages/energy.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Zap, Sun, Battery, TrendingUp, Clock, Lightbulb } from \"lucide-react\";\nimport HerbCard from \"@/components/herbs/herb-card\";\nimport HerbDetailModal from \"@/components/herbs/herb-detail-modal\";\nexport default function Energy() {\n    const [selectedHerb, setSelectedHerb] = useState(null);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const { data: allHerbs = [] } = useQuery({\n        queryKey: [\"/api/herbs\"],\n    });\n    // Filter herbs for energy\n    const energyHerbs = allHerbs.filter(herb => herb.categories.includes(\"Energy\"));\n    const handleHerbClick = (herb) => {\n        setSelectedHerb(herb);\n        setIsModalOpen(true);\n    };\n    const energyTips = [\n        {\n            icon: Zap,\n            title: \"Natural Boost\",\n            description: \"Use herbs like ginger and moringa for sustained energy without crashes.\",\n            color: \"text-yellow-600\"\n        },\n        {\n            icon: Sun,\n            title: \"Morning Ritual\",\n            description: \"Start your day with energizing herbal teas to boost vitality naturally.\",\n            color: \"text-orange-600\"\n        },\n        {\n            icon: Battery,\n            title: \"Endurance Support\",\n            description: \"Support your body's energy systems with nutrient-rich herbs.\",\n            color: \"text-green-600\"\n        }\n    ];\n    const energyRituals = [\n        \"Morning ginger tea for natural energy boost\",\n        \"Moringa powder in smoothies for sustained vitality\",\n        \"Baobab fruit for vitamin C and energy support\",\n        \"Regular hydration with herbal infusions\",\n        \"Balanced meals with energy-supporting herbs\",\n        \"Adequate rest to complement herbal energy support\"\n    ];\n    const energyTiming = [\n        { time: \"6-8 AM\", activity: \"Ginger tea or moringa smoothie\", herb: \"Ginger, Moringa\" },\n        { time: \"10-11 AM\", activity: \"Mid-morning energy boost\", herb: \"Baobab, Turmeric\" },\n        { time: \"2-3 PM\", activity: \"Afternoon vitality support\", herb: \"Peppermint, Hibiscus\" },\n        { time: \"6-7 PM\", activity: \"Evening wind-down\", herb: \"Chamomile, African Sage\" }\n    ];\n    return (_jsx(\"div\", { className: \"py-16 px-4\", children: _jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsxs(\"div\", { className: \"text-center mb-16\", children: [_jsx(\"div\", { className: \"flex justify-center mb-6\", children: _jsx(\"div\", { className: \"w-20 h-20 bg-yellow-100 rounded-full flex items-center justify-center\", children: _jsx(Zap, { className: \"h-10 w-10 text-yellow-600\" }) }) }), _jsx(\"h1\", { className: \"text-4xl font-bold mb-6 text-yellow-600\", \"data-testid\": \"text-page-title\", children: \"Natural Energy & Vitality\" }), _jsx(\"p\", { className: \"text-xl text-muted-foreground max-w-3xl mx-auto\", children: \"Discover herbs that provide sustained energy, boost vitality, and support your body's natural energy systems.\" })] }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\", children: energyTips.map((tip, index) => {\n                        const IconComponent = tip.icon;\n                        return (_jsx(Card, { className: \"text-center\", children: _jsxs(CardContent, { className: \"pt-6\", children: [_jsx(IconComponent, { className: `h-12 w-12 mx-auto mb-4 ${tip.color}` }), _jsx(\"h3\", { className: \"text-xl font-semibold mb-2\", children: tip.title }), _jsx(\"p\", { className: \"text-muted-foreground\", children: tip.description })] }) }, index));\n                    }) }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Herbs for Energy & Vitality\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\", children: energyHerbs.map((herb) => (_jsx(\"div\", { onClick: () => handleHerbClick(herb), children: _jsx(HerbCard, { herb: herb }) }, herb.id))) })] }), _jsxs(Card, { className: \"mb-16\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(TrendingUp, { className: \"h-6 w-6\" }), \"Daily Energy Rituals\"] }) }), _jsx(CardContent, { children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: energyRituals.map((ritual, index) => (_jsxs(\"div\", { className: \"flex items-center gap-3 p-3 bg-muted rounded-lg\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-yellow-600 rounded-full\" }), _jsx(\"span\", { className: \"text-sm\", children: ritual })] }, index))) }) })] }), _jsxs(Card, { className: \"mb-16\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(Clock, { className: \"h-6 w-6\" }), \"Optimal Energy Timing\"] }) }), _jsx(CardContent, { children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\", children: energyTiming.map((timing, index) => (_jsxs(\"div\", { className: \"p-4 border rounded-lg\", children: [_jsx(\"div\", { className: \"font-semibold text-yellow-600 mb-2\", children: timing.time }), _jsx(\"div\", { className: \"text-sm text-muted-foreground mb-2\", children: timing.activity }), _jsx(Badge, { variant: \"outline\", className: \"text-xs\", children: timing.herb })] }, index))) }) })] }), _jsxs(Card, { className: \"bg-yellow-50 border-yellow-200\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2 text-yellow-800\", children: [_jsx(Lightbulb, { className: \"h-6 w-6\" }), \"Energy Enhancement Tips\"] }) }), _jsx(CardContent, { children: _jsxs(\"div\", { className: \"space-y-4 text-yellow-800\", children: [_jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Start Slow:\" }), \" Begin with small amounts of energizing herbs and gradually increase as your body adapts.\"] }), _jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Stay Hydrated:\" }), \" Energy herbs work best when you're well-hydrated. Drink plenty of water throughout the day.\"] }), _jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Listen to Your Body:\" }), \" Pay attention to how different herbs affect your energy levels and adjust accordingly.\"] }), _jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Combine with Lifestyle:\" }), \" Herbs work best when combined with good sleep, nutrition, and regular movement.\"] })] }) })] }), _jsx(HerbDetailModal, { herb: selectedHerb, isOpen: isModalOpen, onClose: () => {\n                        setIsModalOpen(false);\n                        setSelectedHerb(null);\n                    } })] }) }));\n}\n","size_bytes":6705},"client/src/pages/general-wellness.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Shield, Heart, Brain, Leaf, Activity, Moon, Globe, TrendingUp } from \"lucide-react\";\nimport HerbCard from \"@/components/herbs/herb-card\";\nimport HerbDetailModal from \"@/components/herbs/herb-detail-modal\";\nexport default function GeneralWellness() {\n    const [selectedHerb, setSelectedHerb] = useState(null);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const { data: allHerbs = [] } = useQuery({\n        queryKey: [\"/api/herbs\"],\n    });\n    // Filter herbs for general wellness\n    const wellnessHerbs = allHerbs.filter(herb => herb.categories.includes(\"General Wellness\") ||\n        herb.categories.includes(\"Energy\") ||\n        herb.categories.includes(\"Mental Health\"));\n    const handleHerbClick = (herb) => {\n        setSelectedHerb(herb);\n        setIsModalOpen(true);\n    };\n    const globalHealthPillars = [\n        {\n            id: \"nutrition\",\n            icon: Leaf,\n            title: \"Nutrition & Diet\",\n            color: \"text-green-600\",\n            bgColor: \"bg-green-50\",\n            borderColor: \"border-green-200\",\n            definition: \"The foundation of health - what we eat directly impacts every system in our body.\",\n            keyPrinciples: [\n                \"Whole, unprocessed foods\",\n                \"Plant-based foundation\",\n                \"Adequate protein and healthy fats\",\n                \"Fiber-rich carbohydrates\",\n                \"Hydration with clean water\"\n            ],\n            globalImpact: [\n                \"Poor nutrition causes 11 million deaths annually\",\n                \"2 billion people lack essential micronutrients\",\n                \"Diet-related diseases cost $2 trillion globally\",\n                \"Food choices impact climate change\"\n            ],\n            preventionStrategies: [\n                \"Eat a rainbow of vegetables daily\",\n                \"Choose whole grains over refined\",\n                \"Include healthy fats (nuts, seeds, avocados)\",\n                \"Limit processed foods and added sugars\",\n                \"Stay hydrated with water and herbal teas\"\n            ]\n        },\n        {\n            id: \"movement\",\n            icon: Activity,\n            title: \"Physical Activity\",\n            color: \"text-blue-600\",\n            bgColor: \"bg-blue-50\",\n            borderColor: \"border-blue-200\",\n            definition: \"Regular movement is essential for maintaining health, preventing disease, and supporting mental wellbeing.\",\n            keyPrinciples: [\n                \"150 minutes moderate activity weekly\",\n                \"Strength training 2-3 times per week\",\n                \"Flexibility and balance exercises\",\n                \"Daily movement throughout the day\",\n                \"Activities you enjoy and can sustain\"\n            ],\n            globalImpact: [\n                \"Physical inactivity causes 3.2 million deaths annually\",\n                \"60-85% of people worldwide lead sedentary lives\",\n                \"Exercise reduces risk of chronic diseases by 30%\",\n                \"Active communities have better mental health\"\n            ],\n            preventionStrategies: [\n                \"Start with 10-minute walks daily\",\n                \"Use stairs instead of elevators\",\n                \"Walk or bike for short trips\",\n                \"Join group activities or sports\",\n                \"Make movement a social activity\"\n            ]\n        },\n        {\n            id: \"sleep\",\n            icon: Moon,\n            title: \"Sleep & Recovery\",\n            color: \"text-purple-600\",\n            bgColor: \"bg-purple-50\",\n            borderColor: \"border-purple-200\",\n            definition: \"Quality sleep is essential for immune function, mental health, and overall wellbeing.\",\n            keyPrinciples: [\n                \"7-9 hours of quality sleep nightly\",\n                \"Consistent sleep schedule\",\n                \"Dark, cool, quiet sleep environment\",\n                \"Relaxing bedtime routine\",\n                \"Limit screen time before bed\"\n            ],\n            globalImpact: [\n                \"1 in 3 adults don't get enough sleep\",\n                \"Sleep deprivation costs $411 billion annually\",\n                \"Poor sleep linked to 7 of 15 leading causes of death\",\n                \"Sleep quality affects immune function\"\n            ],\n            preventionStrategies: [\n                \"Establish consistent sleep schedule\",\n                \"Create relaxing bedtime routine\",\n                \"Keep bedroom cool and dark\",\n                \"Avoid caffeine after 2 PM\",\n                \"Use calming herbs like chamomile\"\n            ]\n        },\n        {\n            id: \"stress\",\n            icon: Brain,\n            title: \"Stress Management\",\n            color: \"text-orange-600\",\n            bgColor: \"bg-orange-50\",\n            borderColor: \"border-orange-200\",\n            definition: \"Chronic stress affects every system in the body and is a major contributor to modern health issues.\",\n            keyPrinciples: [\n                \"Regular stress reduction practices\",\n                \"Mindfulness and meditation\",\n                \"Social connections and support\",\n                \"Time in nature\",\n                \"Healthy boundaries and self-care\"\n            ],\n            globalImpact: [\n                \"75% of doctor visits are stress-related\",\n                \"Chronic stress affects 80% of adults\",\n                \"Stress costs $300 billion annually in lost productivity\",\n                \"Stress weakens immune system function\"\n            ],\n            preventionStrategies: [\n                \"Practice daily meditation or deep breathing\",\n                \"Spend time in nature regularly\",\n                \"Maintain strong social connections\",\n                \"Set healthy boundaries\",\n                \"Use adaptogenic herbs for support\"\n            ]\n        }\n    ];\n    const preventiveHealthStrategies = {\n        title: \"Preventive Health Strategies for Global Wellness\",\n        categories: [\n            {\n                name: \"Immune System Support\",\n                description: \"Strengthening the body's natural defense system\",\n                strategies: [\n                    \"Eat immune-boosting foods (garlic, ginger, citrus)\",\n                    \"Get adequate vitamin D from sun exposure\",\n                    \"Practice good hygiene and hand washing\",\n                    \"Manage stress levels\",\n                    \"Get quality sleep\",\n                    \"Stay physically active\"\n                ],\n                herbs: [\"Echinacea\", \"Elderberry\", \"Ginger\", \"Turmeric\", \"Garlic\"]\n            },\n            {\n                name: \"Gut Health Optimization\",\n                description: \"Supporting the microbiome for overall health\",\n                strategies: [\n                    \"Eat fiber-rich foods daily\",\n                    \"Include fermented foods (yogurt, sauerkraut)\",\n                    \"Stay hydrated with clean water\",\n                    \"Limit processed foods and antibiotics\",\n                    \"Manage stress levels\",\n                    \"Get adequate sleep\"\n                ],\n                herbs: [\"Ginger\", \"Peppermint\", \"Chamomile\", \"Fennel\", \"Probiotics\"]\n            },\n            {\n                name: \"Detoxification Support\",\n                description: \"Helping the body eliminate toxins naturally\",\n                strategies: [\n                    \"Stay hydrated with clean water\",\n                    \"Eat cruciferous vegetables\",\n                    \"Support liver function with herbs\",\n                    \"Sweat through exercise or sauna\",\n                    \"Get adequate fiber for elimination\",\n                    \"Reduce exposure to environmental toxins\"\n                ],\n                herbs: [\"Dandelion root\", \"Milk thistle\", \"Burdock root\", \"Nettle\", \"Cilantro\"]\n            },\n            {\n                name: \"Energy & Vitality\",\n                description: \"Maintaining optimal energy levels throughout life\",\n                strategies: [\n                    \"Eat nutrient-dense whole foods\",\n                    \"Stay hydrated throughout the day\",\n                    \"Get regular physical activity\",\n                    \"Manage stress and get adequate sleep\",\n                    \"Use energizing herbs and adaptogens\",\n                    \"Practice mindful eating\"\n                ],\n                herbs: [\"Ginseng\", \"Rhodiola\", \"Ashwagandha\", \"Moringa\", \"Green tea\"]\n            }\n        ]\n    };\n    const lifestyleOptimization = [\n        {\n            category: \"Daily Routines\",\n            practices: [\n                \"Morning hydration with lemon water\",\n                \"10-15 minutes of stretching or yoga\",\n                \"Mindful breakfast with protein and fiber\",\n                \"Regular meal timing\",\n                \"Evening wind-down routine\",\n                \"Gratitude practice\"\n            ]\n        },\n        {\n            category: \"Environmental Health\",\n            practices: [\n                \"Use natural cleaning products\",\n                \"Improve indoor air quality with plants\",\n                \"Filter drinking water\",\n                \"Reduce plastic use\",\n                \"Choose organic foods when possible\",\n                \"Spend time in nature regularly\"\n            ]\n        },\n        {\n            category: \"Social Wellness\",\n            practices: [\n                \"Maintain strong relationships\",\n                \"Join community groups or activities\",\n                \"Practice active listening\",\n                \"Give and receive support\",\n                \"Volunteer or help others\",\n                \"Stay connected with family and friends\"\n            ]\n        },\n        {\n            category: \"Mental Wellness\",\n            practices: [\n                \"Practice mindfulness or meditation\",\n                \"Learn new skills or hobbies\",\n                \"Read regularly\",\n                \"Limit social media use\",\n                \"Seek professional help when needed\",\n                \"Practice self-compassion\"\n            ]\n        }\n    ];\n    const herbalWellnessSupport = {\n        adaptogens: [\n            {\n                name: \"Ashwagandha\",\n                benefits: [\"Reduces stress and cortisol\", \"Improves energy and focus\", \"Supports immune function\"],\n                usage: \"300-600mg daily, best in morning\"\n            },\n            {\n                name: \"Rhodiola\",\n                benefits: [\"Enhances mental performance\", \"Reduces fatigue\", \"Supports stress adaptation\"],\n                usage: \"200-400mg daily, avoid evening\"\n            },\n            {\n                name: \"Holy Basil\",\n                benefits: [\"Reduces stress and anxiety\", \"Supports respiratory health\", \"Anti-inflammatory\"],\n                usage: \"300-600mg daily or as tea\"\n            }\n        ],\n        immune: [\n            {\n                name: \"Echinacea\",\n                benefits: [\"Stimulates immune system\", \"Reduces cold duration\", \"Anti-inflammatory\"],\n                usage: \"At first sign of illness, 3-5 days\"\n            },\n            {\n                name: \"Elderberry\",\n                benefits: [\"Antiviral properties\", \"Rich in antioxidants\", \"Supports respiratory health\"],\n                usage: \"During cold/flu season, 1-2 weeks\"\n            },\n            {\n                name: \"Garlic\",\n                benefits: [\"Antimicrobial properties\", \"Supports cardiovascular health\", \"Immune boosting\"],\n                usage: \"1-2 cloves daily or aged extract\"\n            }\n        ],\n        digestive: [\n            {\n                name: \"Ginger\",\n                benefits: [\"Improves digestion\", \"Reduces nausea\", \"Anti-inflammatory\"],\n                usage: \"Fresh tea or 1-2 inches daily\"\n            },\n            {\n                name: \"Peppermint\",\n                benefits: [\"Soothes digestive discomfort\", \"Reduces bloating\", \"Calming effect\"],\n                usage: \"1-2 cups tea daily after meals\"\n            },\n            {\n                name: \"Chamomile\",\n                benefits: [\"Gentle digestive support\", \"Promotes relaxation\", \"Anti-inflammatory\"],\n                usage: \"1-2 cups tea daily, especially evening\"\n            }\n        ]\n    };\n    return (_jsx(\"div\", { className: \"py-16 px-4\", children: _jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsxs(\"div\", { className: \"text-center mb-16\", children: [_jsx(\"div\", { className: \"flex justify-center mb-6\", children: _jsx(\"div\", { className: \"w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center\", children: _jsx(Shield, { className: \"h-10 w-10 text-blue-600\" }) }) }), _jsx(\"h1\", { className: \"text-4xl font-bold mb-6 text-blue-600\", \"data-testid\": \"text-page-title\", children: \"Global Wellness & Preventive Health\" }), _jsx(\"p\", { className: \"text-xl text-muted-foreground max-w-3xl mx-auto\", children: \"Discover how lifestyle choices impact global health outcomes and learn preventive strategies for optimal wellbeing using natural approaches and herbal support.\" })] }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Four Pillars of Global Wellness\" }), _jsx(\"div\", { className: \"grid grid-cols-1 lg:grid-cols-2 gap-8\", children: globalHealthPillars.map((pillar) => {\n                                const IconComponent = pillar.icon;\n                                return (_jsxs(Card, { className: `p-6 shadow-lg border-2 ${pillar.borderColor}`, children: [_jsxs(CardHeader, { className: \"pb-4\", children: [_jsxs(\"div\", { className: \"flex items-center gap-3 mb-4\", children: [_jsx(\"div\", { className: `p-3 rounded-full ${pillar.bgColor}`, children: _jsx(IconComponent, { className: `h-6 w-6 ${pillar.color}` }) }), _jsx(\"h3\", { className: `text-xl font-bold ${pillar.color}`, children: pillar.title })] }), _jsx(\"p\", { className: \"text-muted-foreground text-sm\", children: pillar.definition })] }), _jsxs(CardContent, { className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Key Principles:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: pillar.keyPrinciples.map((principle, index) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-green-500 rounded-full\" }), principle] }, index))) })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Global Impact:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: pillar.globalImpact.map((impact, index) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-red-500 rounded-full\" }), impact] }, index))) })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Prevention Strategies:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: pillar.preventionStrategies.map((strategy, index) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-blue-500 rounded-full\" }), strategy] }, index))) })] })] })] }, pillar.id));\n                            }) })] }), _jsx(\"div\", { className: \"mb-16\", children: _jsxs(Card, { className: \"p-8 shadow-lg\", children: [_jsx(CardHeader, { className: \"text-center pb-6\", children: _jsxs(\"h2\", { className: \"text-3xl font-bold mb-4 flex items-center justify-center gap-3\", children: [_jsx(Globe, { className: \"h-8 w-8 text-blue-600\" }), preventiveHealthStrategies.title] }) }), _jsx(CardContent, { children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-8\", children: preventiveHealthStrategies.categories.map((category, index) => (_jsxs(\"div\", { className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"text-xl font-semibold text-blue-600 mb-2\", children: category.name }), _jsx(\"p\", { className: \"text-muted-foreground mb-3\", children: category.description })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Strategies:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1 mb-3\", children: category.strategies.map((strategy, idx) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-green-500 rounded-full\" }), strategy] }, idx))) })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Supporting Herbs:\" }), _jsx(\"div\", { className: \"flex flex-wrap gap-2\", children: category.herbs.map((herb, idx) => (_jsx(Badge, { variant: \"outline\", className: \"text-xs\", children: herb }, idx))) })] })] }, index))) }) })] }) }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Lifestyle Optimization for Wellness\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\", children: lifestyleOptimization.map((category, index) => (_jsxs(Card, { className: \"p-6 shadow-lg\", children: [_jsx(CardHeader, { className: \"pb-4\", children: _jsx(\"h3\", { className: \"text-lg font-semibold text-center\", children: category.category }) }), _jsx(CardContent, { children: _jsx(\"ul\", { className: \"space-y-2\", children: category.practices.map((practice, idx) => (_jsxs(\"li\", { className: \"flex items-start gap-2 text-sm text-muted-foreground\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-blue-500 rounded-full mt-2\" }), _jsx(\"span\", { children: practice })] }, idx))) }) })] }, index))) })] }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Herbal Support for Wellness\" }), _jsxs(Tabs, { defaultValue: \"adaptogens\", className: \"w-full\", children: [_jsxs(TabsList, { className: \"grid w-full grid-cols-3\", children: [_jsx(TabsTrigger, { value: \"adaptogens\", children: \"Adaptogens\" }), _jsx(TabsTrigger, { value: \"immune\", children: \"Immune Support\" }), _jsx(TabsTrigger, { value: \"digestive\", children: \"Digestive Health\" })] }), _jsx(TabsContent, { value: \"adaptogens\", className: \"space-y-6\", children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-6\", children: herbalWellnessSupport.adaptogens.map((herb, index) => (_jsxs(Card, { className: \"p-6\", children: [_jsx(CardHeader, { children: _jsx(\"h3\", { className: \"text-lg font-semibold\", children: herb.name }) }), _jsxs(CardContent, { className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Benefits:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: herb.benefits.map((benefit, idx) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-green-500 rounded-full\" }), benefit] }, idx))) })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Usage:\" }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: herb.usage })] })] })] }, index))) }) }), _jsx(TabsContent, { value: \"immune\", className: \"space-y-6\", children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-6\", children: herbalWellnessSupport.immune.map((herb, index) => (_jsxs(Card, { className: \"p-6\", children: [_jsx(CardHeader, { children: _jsx(\"h3\", { className: \"text-lg font-semibold\", children: herb.name }) }), _jsxs(CardContent, { className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Benefits:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: herb.benefits.map((benefit, idx) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-blue-500 rounded-full\" }), benefit] }, idx))) })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Usage:\" }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: herb.usage })] })] })] }, index))) }) }), _jsx(TabsContent, { value: \"digestive\", className: \"space-y-6\", children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-6\", children: herbalWellnessSupport.digestive.map((herb, index) => (_jsxs(Card, { className: \"p-6\", children: [_jsx(CardHeader, { children: _jsx(\"h3\", { className: \"text-lg font-semibold\", children: herb.name }) }), _jsxs(CardContent, { className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Benefits:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: herb.benefits.map((benefit, idx) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-orange-500 rounded-full\" }), benefit] }, idx))) })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Usage:\" }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: herb.usage })] })] })] }, index))) }) })] })] }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Herbs for General Wellness\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\", children: wellnessHerbs.map((herb) => (_jsx(\"div\", { onClick: () => handleHerbClick(herb), children: _jsx(HerbCard, { herb: herb }) }, herb.id))) })] }), _jsx(\"div\", { className: \"text-center\", children: _jsx(Card, { className: \"p-8 bg-blue-50 border-blue-200\", children: _jsxs(CardContent, { children: [_jsx(\"h3\", { className: \"text-2xl font-bold text-blue-800 mb-4\", children: \"Commit to Your Wellness Journey\" }), _jsx(\"p\", { className: \"text-blue-700 mb-6\", children: \"Remember, optimal health is achieved through consistent, sustainable lifestyle choices. Start with small changes, build healthy habits, and use natural support to enhance your wellbeing.\" }), _jsxs(\"div\", { className: \"flex flex-wrap justify-center gap-4\", children: [_jsxs(Badge, { variant: \"outline\", className: \"text-blue-700 border-blue-300\", children: [_jsx(Shield, { className: \"h-4 w-4 mr-1\" }), \"Prevention First\"] }), _jsxs(Badge, { variant: \"outline\", className: \"text-blue-700 border-blue-300\", children: [_jsx(Heart, { className: \"h-4 w-4 mr-1\" }), \"Holistic Approach\"] }), _jsxs(Badge, { variant: \"outline\", className: \"text-blue-700 border-blue-300\", children: [_jsx(TrendingUp, { className: \"h-4 w-4 mr-1\" }), \"Sustainable Habits\"] }), _jsxs(Badge, { variant: \"outline\", className: \"text-blue-700 border-blue-300\", children: [_jsx(Leaf, { className: \"h-4 w-4 mr-1\" }), \"Natural Support\"] })] })] }) }) }), _jsx(HerbDetailModal, { herb: selectedHerb, isOpen: isModalOpen, onClose: () => {\n                        setIsModalOpen(false);\n                        setSelectedHerb(null);\n                    } })] }) }));\n}\n","size_bytes":23204},"client/src/pages/herbs.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport HerbCard from \"@/components/herbs/herb-card\";\nimport HerbSearch from \"@/components/herbs/herb-search\";\nimport HerbDetailModal from \"@/components/herbs/herb-detail-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nexport default function Herbs() {\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [selectedCategory, setSelectedCategory] = useState(\"\");\n    const [selectedHerb, setSelectedHerb] = useState(null);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const { data: allHerbs = [], isLoading } = useQuery({\n        queryKey: [\"/api/herbs\"],\n    });\n    const { data: searchResults = [], isLoading: isSearching } = useQuery({\n        queryKey: [\"/api/herbs/search\", searchQuery],\n        queryFn: async () => {\n            const response = await fetch(`/api/herbs/search?q=${encodeURIComponent(searchQuery)}`);\n            if (!response.ok) {\n                throw new Error('Failed to search herbs');\n            }\n            return response.json();\n        },\n        enabled: searchQuery.length >= 2,\n    });\n    const displayedHerbs = searchQuery.length >= 2 ? searchResults : allHerbs;\n    const globalHerbs = displayedHerbs.filter(herb => herb.isIndigenous === \"false\");\n    const indigenousHerbs = displayedHerbs.filter(herb => herb.isIndigenous === \"true\");\n    const allCategories = Array.from(new Set(allHerbs.flatMap(herb => herb.categories))).sort();\n    const handleHerbClick = (herb) => {\n        setSelectedHerb(herb);\n        setIsModalOpen(true);\n    };\n    if (isLoading) {\n        return (_jsx(\"div\", { className: \"flex items-center justify-center min-h-screen\", children: _jsxs(\"div\", { className: \"text-center\", children: [_jsx(\"div\", { className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\" }), _jsx(\"p\", { className: \"text-muted-foreground\", children: \"Loading herbs library...\" })] }) }));\n    }\n    return (_jsxs(\"div\", { className: \"py-16 px-4\", children: [_jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsx(\"h1\", { className: \"text-4xl font-bold text-center mb-8\", \"data-testid\": \"text-page-title\", children: \"Herbs Library\" }), _jsx(\"p\", { className: \"text-lg text-muted-foreground text-center mb-12 max-w-2xl mx-auto\", children: \"Discover nature's pharmacy with our comprehensive collection of healing herbs from around the world.\" }), _jsx(\"div\", { className: \"mb-12\", children: _jsx(HerbSearch, { onSearch: setSearchQuery }) }), !searchQuery && (_jsx(\"div\", { className: \"mb-8\", children: _jsxs(\"div\", { className: \"flex flex-wrap gap-2 justify-center\", children: [_jsx(Button, { variant: selectedCategory === \"\" ? \"default\" : \"outline\", size: \"sm\", onClick: () => setSelectedCategory(\"\"), \"data-testid\": \"button-category-all\", children: \"All Categories\" }), allCategories.map((category) => (_jsx(Button, { variant: selectedCategory === category ? \"default\" : \"outline\", size: \"sm\", onClick: () => setSelectedCategory(category), \"data-testid\": `button-category-${category.toLowerCase().replace(' ', '-')}`, children: category }, category)))] }) })), searchQuery && (_jsxs(\"div\", { className: \"mb-8\", children: [_jsxs(\"h2\", { className: \"text-2xl font-bold mb-6\", children: [\"Search Results for \\\"\", searchQuery, \"\\\"\", !isSearching && (_jsxs(Badge, { variant: \"secondary\", className: \"ml-2\", children: [searchResults.length, \" found\"] }))] }), isSearching ? (_jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\", children: [1, 2, 3].map((i) => (_jsxs(\"div\", { className: \"bg-card rounded-lg p-6 animate-pulse\", children: [_jsx(\"div\", { className: \"bg-muted h-48 rounded mb-4\" }), _jsx(\"div\", { className: \"bg-muted h-6 rounded mb-2\" }), _jsx(\"div\", { className: \"bg-muted h-4 rounded\" })] }, i))) })) : searchResults.length > 0 ? (_jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\", children: searchResults.map((herb) => (_jsx(HerbCard, { herb: herb, onClick: () => handleHerbClick(herb) }, herb.id))) })) : (_jsx(\"div\", { className: \"text-center py-12\", children: _jsx(\"p\", { className: \"text-muted-foreground\", children: \"No herbs found matching your search.\" }) }))] })), !searchQuery && (_jsxs(\"div\", { className: \"mb-12\", children: [_jsx(\"h2\", { className: \"text-2xl font-bold mb-6\", \"data-testid\": \"text-global-herbs-title\", children: \"Global Herbs\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\", children: globalHerbs\n                                    .filter(herb => !selectedCategory || herb.categories.includes(selectedCategory))\n                                    .map((herb) => (_jsx(HerbCard, { herb: herb, onClick: () => handleHerbClick(herb) }, herb.id))) })] })), !searchQuery && (_jsxs(\"div\", { children: [_jsx(\"h2\", { className: \"text-2xl font-bold mb-6\", \"data-testid\": \"text-indigenous-herbs-title\", children: \"Indigenous African Herbs\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\", children: indigenousHerbs\n                                    .filter(herb => !selectedCategory || herb.categories.includes(selectedCategory))\n                                    .map((herb) => (_jsx(HerbCard, { herb: herb, onClick: () => handleHerbClick(herb) }, herb.id))) })] })), !searchQuery && selectedCategory && (displayedHerbs.filter(herb => herb.categories.includes(selectedCategory)).length === 0 && (_jsx(\"div\", { className: \"text-center py-12\", children: _jsxs(\"p\", { className: \"text-muted-foreground\", children: [\"No herbs found in the \\\"\", selectedCategory, \"\\\" category.\"] }) })))] }), _jsx(HerbDetailModal, { herb: selectedHerb, isOpen: isModalOpen, onClose: () => {\n                    setIsModalOpen(false);\n                    setSelectedHerb(null);\n                } })] }));\n}\n","size_bytes":5962},"client/src/pages/home.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Brain, Zap, Moon, Scale, Heart, Search, Play, Bot, Send } from \"lucide-react\";\nconst familyImage = \"/attached_assets/generated_images/Family_enjoying_herbal_tea_747c1dae.png\";\nexport default function Home() {\n    const [featuredHerbIndex, setFeaturedHerbIndex] = useState(0);\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [isAIOpen, setIsAIOpen] = useState(false);\n    const [chatMessages, setChatMessages] = useState([\n        {\n            id: '1',\n            type: 'assistant',\n            content: \"Hello! I'm your herbal wellness help assistant. I can help you find herbs for specific health concerns, suggest preparation methods, or answer questions about natural remedies. What would you like to know?\",\n            timestamp: new Date()\n        }\n    ]);\n    const [userInput, setUserInput] = useState(\"\");\n    const [isTyping, setIsTyping] = useState(false);\n    const latestResponseRef = useRef(null);\n    const scrollContainerRef = useRef(null);\n    // Scroll to top of latest AI response for better reading experience\n    useEffect(() => {\n        if (!isTyping && latestResponseRef.current && scrollContainerRef.current && chatMessages.length > 1) {\n            const latestMessage = chatMessages[chatMessages.length - 1];\n            if (latestMessage.type === 'assistant') {\n                setTimeout(() => {\n                    if (scrollContainerRef.current && latestResponseRef.current) {\n                        // Scroll to the AI response position\n                        const responseTop = latestResponseRef.current.offsetTop - 20;\n                        scrollContainerRef.current.scrollTo({\n                            top: responseTop,\n                            behavior: 'smooth'\n                        });\n                    }\n                }, 300);\n            }\n        }\n    }, [chatMessages, isTyping]);\n    const { data: herbs, isLoading } = useQuery({\n        queryKey: [\"/api/herbs\"],\n    });\n    // Featured herbs rotation\n    const featuredHerbs = herbs?.filter(herb => [\"Ginger\", \"Chamomile\", \"Peppermint\", \"Hibiscus\", \"Neem\", \"Moringa\"].includes(herb.name)) || [];\n    // Search functionality\n    const filteredHerbs = herbs?.filter(herb => herb.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        herb.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        herb.benefits.some(benefit => benefit.toLowerCase().includes(searchQuery.toLowerCase()))) || [];\n    useEffect(() => {\n        if (featuredHerbs.length > 0) {\n            const interval = setInterval(() => {\n                setFeaturedHerbIndex((prev) => (prev + 1) % featuredHerbs.length);\n            }, 10000); // Rotate every 10 seconds\n            return () => clearInterval(interval);\n        }\n    }, [featuredHerbs.length]);\n    const currentFeaturedHerb = featuredHerbs[featuredHerbIndex];\n    // AI Assistant functionality\n    const handleSendMessage = async () => {\n        if (!userInput.trim())\n            return;\n        const userMessage = {\n            id: Date.now().toString(),\n            type: 'user',\n            content: userInput,\n            timestamp: new Date()\n        };\n        setChatMessages(prev => [...prev, userMessage]);\n        const currentInput = userInput;\n        setUserInput(\"\");\n        setIsTyping(true);\n        try {\n            // Call the real Gemini API\n            const response = await fetch('/api/ai/wellness', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ message: currentInput })\n            });\n            const data = await response.json();\n            const assistantMessage = {\n                id: (Date.now() + 1).toString(),\n                type: 'assistant',\n                content: data.response || \"I'm sorry, I couldn't process your request right now. Please try again.\",\n                timestamp: new Date()\n            };\n            setChatMessages(prev => [...prev, assistantMessage]);\n        }\n        catch (error) {\n            console.error('Error calling AI API:', error);\n            const errorMessage = {\n                id: (Date.now() + 2).toString(),\n                type: 'assistant',\n                content: \"I'm experiencing technical difficulties. Please try again in a moment.\",\n                timestamp: new Date()\n            };\n            setChatMessages(prev => [...prev, errorMessage]);\n        }\n        finally {\n            setIsTyping(false);\n        }\n    };\n    const wellnessCategories = [\n        {\n            icon: Brain,\n            title: \"Mental Health\",\n            description: \"Find calm and clarity with natural herbs\",\n            color: \"text-primary\",\n            href: \"/mental-health\"\n        },\n        {\n            icon: Zap,\n            title: \"Energy\",\n            description: \"Boost vitality and stamina naturally\",\n            color: \"text-accent\",\n            href: \"/energy\"\n        },\n        {\n            icon: Moon,\n            title: \"Sleep\",\n            description: \"Rest better with soothing herbs\",\n            color: \"text-secondary\",\n            href: \"/sleep\"\n        },\n        {\n            icon: Scale,\n            title: \"Weight Balance\",\n            description: \"Support healthy weight management\",\n            color: \"text-primary\",\n            href: \"/weight-balance\"\n        },\n        {\n            icon: Heart,\n            title: \"General Wellness\",\n            description: \"Overall health and vitality support\",\n            color: \"text-accent\",\n            href: \"/general-wellness\"\n        }\n    ];\n    if (isLoading) {\n        return (_jsx(\"div\", { className: \"flex items-center justify-center min-h-screen\", children: _jsxs(\"div\", { className: \"text-center\", children: [_jsx(\"div\", { className: \"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\" }), _jsx(\"p\", { className: \"text-muted-foreground\", children: \"Loading natural wellness...\" })] }) }));\n    }\n    return (_jsxs(\"div\", { children: [_jsx(\"section\", { className: \"relative\", children: _jsx(\"div\", { className: \"bg-gradient-to-br from-accent/20 to-secondary/30 py-16 px-4 pl-[16px] pr-[16px] pt-[10px] pb-[10px]\", children: _jsx(\"div\", { className: \"max-w-7xl mx-auto\", children: _jsxs(\"div\", { className: \"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\", children: [_jsxs(\"div\", { className: \"order-2 lg:order-1\", children: [_jsx(\"h1\", { className: \"text-4xl md:text-5xl font-bold text-foreground mb-6\", \"data-testid\": \"text-hero-title\", children: \"Feel stronger, calmer, and more alive\\u2014naturally\" }), _jsxs(\"div\", { className: \"mb-6\", children: [_jsxs(\"div\", { className: \"relative\", children: [_jsx(Search, { className: \"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-5 w-5\" }), _jsx(Input, { type: \"text\", placeholder: \"Search herbs by name, benefits, or health concern...\", value: searchQuery, onChange: (e) => setSearchQuery(e.target.value), className: \"pl-10 pr-4 py-3 text-lg border-2 border-primary/20 focus:border-primary\" })] }), searchQuery && filteredHerbs.length > 0 && (_jsxs(\"div\", { className: \"mt-4 bg-card rounded-lg shadow-lg border border-border max-h-64 overflow-y-auto\", children: [filteredHerbs.slice(0, 5).map((herb) => (_jsx(Link, { href: `/herbs#${herb.id}`, children: _jsx(\"div\", { className: \"p-4 hover:bg-accent/10 cursor-pointer border-b border-border last:border-b-0\", children: _jsxs(\"div\", { className: \"flex items-center gap-3\", children: [_jsx(\"span\", { className: \"text-2xl\", children: herb.emoji }), _jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"font-semibold text-foreground\", children: herb.name }), _jsx(\"p\", { className: \"text-sm text-muted-foreground line-clamp-2\", children: herb.description }), _jsx(\"div\", { className: \"flex flex-wrap gap-1 mt-1\", children: herb.benefits.slice(0, 2).map((benefit, index) => (_jsx(Badge, { variant: \"secondary\", className: \"text-xs\", children: benefit }, index))) })] })] }) }) }, herb.id))), filteredHerbs.length > 5 && (_jsxs(\"div\", { className: \"p-4 text-center text-sm text-muted-foreground\", children: [\"And \", filteredHerbs.length - 5, \" more herbs...\"] }))] })), searchQuery && filteredHerbs.length === 0 && (_jsx(\"div\", { className: \"mt-4 bg-card rounded-lg shadow-lg border border-border p-4\", children: _jsxs(\"p\", { className: \"text-muted-foreground text-center\", children: [\"No herbs found matching \\\"\", searchQuery, \"\\\"\"] }) }))] }), _jsxs(\"div\", { className: \"bg-primary/90 text-primary-foreground p-6 rounded-xl mb-6\", children: [_jsx(\"p\", { className: \"text-lg italic mb-2 text-[#b58700]\", children: \"\\\"I have given you all these trees for you to eat...\\\"\" }), _jsx(\"p\", { className: \"text-base text-[#b58700]\", children: \"At Herbal Care Hub, we help you discover natural ways to boost energy, improve mental health, sleep better, and support wellbeing.\" })] }), _jsxs(\"div\", { className: \"flex gap-4\", children: [_jsx(Link, { href: \"/herbs\", children: _jsx(Button, { size: \"lg\", className: \"text-lg font-semibold px-8 py-3\", \"data-testid\": \"button-explore-herbs\", children: \"Explore Herbs\" }) }), _jsxs(Dialog, { open: isAIOpen, onOpenChange: setIsAIOpen, children: [_jsx(DialogTrigger, { asChild: true, children: _jsxs(Button, { size: \"lg\", variant: \"outline\", className: \"text-lg font-semibold px-8 py-3\", children: [_jsx(Bot, { className: \"h-5 w-5 mr-2\" }), \"AI Assistant\"] }) }), _jsxs(DialogContent, { className: \"max-w-2xl max-h-[80vh] flex flex-col border-2 border-primary/20 shadow-xl\", children: [_jsx(DialogHeader, { children: _jsxs(DialogTitle, { className: \"flex items-center gap-2\", children: [_jsx(Bot, { className: \"h-5 w-5\" }), \"Herbal Wellness Help Assistant\"] }) }), _jsxs(\"div\", { className: \"flex-1 flex flex-col min-h-0\", children: [_jsxs(\"div\", { ref: scrollContainerRef, className: \"flex-1 overflow-y-auto space-y-4 mb-4 p-4 bg-muted/20 rounded-lg\", children: [chatMessages.map((message, index) => (_jsx(\"div\", { ref: message.type === 'assistant' && index === chatMessages.length - 1 ? latestResponseRef : null, className: `flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`, children: _jsxs(\"div\", { className: `max-w-[80%] p-3 rounded-lg ${message.type === 'user'\n                                                                                            ? 'bg-primary text-primary-foreground'\n                                                                                            : 'bg-card border border-border'}`, children: [_jsx(\"p\", { className: \"text-sm\", children: message.content }), _jsx(\"p\", { className: \"text-xs opacity-70 mt-1\", children: message.timestamp.toLocaleTimeString() })] }) }, message.id))), isTyping && (_jsx(\"div\", { className: \"flex justify-start\", children: _jsx(\"div\", { className: \"bg-card border border-border p-3 rounded-lg\", children: _jsxs(\"div\", { className: \"flex space-x-1\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" }), _jsx(\"div\", { className: \"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\", style: { animationDelay: '0.1s' } }), _jsx(\"div\", { className: \"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\", style: { animationDelay: '0.2s' } })] }) }) }))] }), _jsxs(\"div\", { className: \"flex gap-2\", children: [_jsx(Textarea, { placeholder: \"Ask about herbs, health concerns, or preparation methods...\", value: userInput, onChange: (e) => setUserInput(e.target.value), onKeyPress: (e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage(), className: \"flex-1 resize-none\", rows: 2 }), _jsx(Button, { onClick: handleSendMessage, disabled: !userInput.trim() || isTyping, className: \"px-4\", children: _jsx(Send, { className: \"h-4 w-4\" }) })] }), _jsxs(\"div\", { className: \"mt-3\", children: [_jsx(\"p\", { className: \"text-xs text-muted-foreground mb-2\", children: \"Quick suggestions:\" }), _jsx(\"div\", { className: \"flex flex-wrap gap-2\", children: [\n                                                                                        \"Help me sleep better\",\n                                                                                        \"Boost my energy\",\n                                                                                        \"Digestive support\",\n                                                                                        \"Stress relief\"\n                                                                                    ].map((suggestion) => (_jsx(Button, { variant: \"outline\", size: \"sm\", onClick: () => {\n                                                                                            setUserInput(suggestion);\n                                                                                            setTimeout(() => handleSendMessage(), 100);\n                                                                                        }, className: \"text-xs\", children: suggestion }, suggestion))) })] })] })] })] })] })] }), _jsx(\"div\", { className: \"order-1 lg:order-2\", children: _jsxs(\"div\", { className: \"relative\", children: [_jsx(\"img\", { src: familyImage, alt: \"Family enjoying herbal tea together\", className: \"rounded-2xl w-full h-80 lg:h-96 object-cover shadow-lg\" }), _jsx(\"div\", { className: \"absolute inset-0 bg-gradient-to-t from-primary/20 to-transparent rounded-2xl\" })] }) })] }) }) }) }), _jsx(\"section\", { className: \"py-16 px-4 bg-muted/30 pt-[10px] pb-[10px]\", children: _jsx(\"div\", { className: \"max-w-5xl mx-auto\", children: _jsx(\"div\", { className: \"grid grid-cols-2 md:grid-cols-5 gap-4 md:gap-6\", children: wellnessCategories.map((category) => {\n                            const IconComponent = category.icon;\n                            return (_jsx(Link, { href: category.href, children: _jsxs(\"div\", { className: \"bg-card hover:bg-accent/10 transition-all duration-200 rounded-2xl p-6 text-center shadow-sm hover:shadow-md cursor-pointer\", \"data-testid\": `card-category-${category.title.toLowerCase().replace(' ', '-')}`, children: [_jsx(\"div\", { className: \"bg-secondary/40 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3\", children: _jsx(IconComponent, { className: \"h-8 w-8 text-foreground\" }) }), _jsx(\"h3\", { className: \"font-semibold text-sm text-foreground\", children: category.title })] }) }, category.title));\n                        }) }) }) }), _jsx(\"section\", { className: \"py-16 px-4 pt-[10px] pb-[10px]\", children: _jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsx(\"h2\", { className: \"text-2xl font-bold mb-2\", \"data-testid\": \"text-featured-herb-title\", children: \"Featured Herb\" }), currentFeaturedHerb ? (_jsx(\"div\", { className: \"bg-card rounded-2xl p-8 shadow-lg border border-border\", children: _jsxs(\"div\", { className: \"grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\", children: [_jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"text-4xl font-bold mb-4 text-foreground\", \"data-testid\": \"text-featured-herb-name\", children: currentFeaturedHerb.name }), _jsx(\"p\", { className: \"text-muted-foreground text-lg mb-6\", \"data-testid\": \"text-featured-herb-description\", children: currentFeaturedHerb.description }), _jsx(Button, { className: \"bg-primary text-primary-foreground px-6 py-3 rounded-xl font-semibold\", onClick: () => window.location.href = `/herbs#${currentFeaturedHerb.id}`, \"data-testid\": \"button-learn-more-featured\", children: \"Learn More\" })] }), _jsx(\"div\", { className: \"flex justify-center\", children: _jsx(\"img\", { src: currentFeaturedHerb.imageUrl || \"/attached_assets/generated_images/Family_enjoying_herbal_tea_747c1dae.png\", alt: currentFeaturedHerb.name, className: \"rounded-2xl w-full max-w-sm h-64 object-cover shadow-md\" }) })] }) })) : (_jsx(\"div\", { className: \"bg-card rounded-2xl p-8 shadow-lg border border-border text-center\", children: _jsx(\"p\", { className: \"text-muted-foreground\", children: \"Loading featured herb...\" }) }))] }) }), _jsx(\"section\", { className: \"py-16 px-4 bg-muted/30 pt-[10px] pb-[10px]\", children: _jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsx(\"h2\", { className: \"text-2xl font-bold mb-8\", \"data-testid\": \"text-video-title\", children: \"Watch simple herb preparations\" }), _jsx(\"div\", { className: \"bg-card rounded-2xl p-8 shadow-lg border border-border\", children: _jsxs(\"div\", { className: \"aspect-video rounded-xl overflow-hidden relative\", \"data-testid\": \"video-placeholder-ginger-tea\", children: [_jsx(\"img\", { src: \"/attached_assets/generated_images/Herbal_preparation_workspace_scene_4088b9aa.png\", alt: \"Traditional herbal preparation workspace with fresh herbs, mortar and pestle, and natural remedies\", className: \"w-full h-full object-cover\" }), _jsx(\"div\", { className: \"absolute inset-0 bg-black/20 flex items-center justify-center\", children: _jsxs(\"div\", { className: \"text-center\", children: [_jsx(\"div\", { className: \"bg-primary/90 rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-4\", children: _jsx(Play, { className: \"h-10 w-10 text-primary-foreground\" }) }), _jsx(\"p\", { className: \"text-white text-lg font-semibold mb-2 drop-shadow-lg\", children: \"Herbal Preparation Guides\" }), _jsx(\"p\", { className: \"text-white/90 drop-shadow-md\", children: \"Learn traditional methods for natural remedies\" })] }) })] }) })] }) })] }));\n}\n","size_bytes":17818},"client/src/pages/mental-health.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Brain, Heart, Leaf, BookOpen, Lightbulb } from \"lucide-react\";\nimport HerbCard from \"@/components/herbs/herb-card\";\nimport HerbDetailModal from \"@/components/herbs/herb-detail-modal\";\nexport default function MentalHealth() {\n    const [selectedHerb, setSelectedHerb] = useState(null);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const { data: allHerbs = [] } = useQuery({\n        queryKey: [\"/api/herbs\"],\n    });\n    // Filter herbs for mental health\n    const mentalHealthHerbs = allHerbs.filter(herb => herb.categories.includes(\"Mental Health\"));\n    const handleHerbClick = (herb) => {\n        setSelectedHerb(herb);\n        setIsModalOpen(true);\n    };\n    const mentalHealthTips = [\n        {\n            icon: Brain,\n            title: \"Mindful Breathing\",\n            description: \"Practice deep breathing exercises with chamomile or lavender tea to calm your mind.\",\n            color: \"text-blue-600\"\n        },\n        {\n            icon: Heart,\n            title: \"Emotional Balance\",\n            description: \"Use herbs like African sage and peppermint to support emotional stability and clarity.\",\n            color: \"text-pink-600\"\n        },\n        {\n            icon: Leaf,\n            title: \"Natural Calming\",\n            description: \"Incorporate calming herbs into your daily routine for sustained mental wellness.\",\n            color: \"text-green-600\"\n        }\n    ];\n    const dailyPractices = [\n        \"Start your day with a calming herbal tea\",\n        \"Practice 10 minutes of mindful meditation\",\n        \"Take short breaks to breathe deeply\",\n        \"Create a peaceful evening routine\",\n        \"Limit screen time before bed\",\n        \"Connect with nature regularly\"\n    ];\n    return (_jsx(\"div\", { className: \"py-16 px-4\", children: _jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsxs(\"div\", { className: \"text-center mb-16\", children: [_jsx(\"div\", { className: \"flex justify-center mb-6\", children: _jsx(\"div\", { className: \"w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center\", children: _jsx(Brain, { className: \"h-10 w-10 text-blue-600\" }) }) }), _jsx(\"h1\", { className: \"text-4xl font-bold mb-6 text-blue-600\", \"data-testid\": \"text-page-title\", children: \"Mental Health & Wellness\" }), _jsx(\"p\", { className: \"text-xl text-muted-foreground max-w-3xl mx-auto\", children: \"Discover natural herbs and practices that support mental clarity, emotional balance, and inner peace.\" })] }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\", children: mentalHealthTips.map((tip, index) => {\n                        const IconComponent = tip.icon;\n                        return (_jsx(Card, { className: \"text-center\", children: _jsxs(CardContent, { className: \"pt-6\", children: [_jsx(IconComponent, { className: `h-12 w-12 mx-auto mb-4 ${tip.color}` }), _jsx(\"h3\", { className: \"text-xl font-semibold mb-2\", children: tip.title }), _jsx(\"p\", { className: \"text-muted-foreground\", children: tip.description })] }) }, index));\n                    }) }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Herbs for Mental Wellness\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\", children: mentalHealthHerbs.map((herb) => (_jsx(\"div\", { onClick: () => handleHerbClick(herb), children: _jsx(HerbCard, { herb: herb }) }, herb.id))) })] }), _jsxs(Card, { className: \"mb-16\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(BookOpen, { className: \"h-6 w-6\" }), \"Daily Mental Wellness Practices\"] }) }), _jsx(CardContent, { children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: dailyPractices.map((practice, index) => (_jsxs(\"div\", { className: \"flex items-center gap-3 p-3 bg-muted rounded-lg\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-blue-600 rounded-full\" }), _jsx(\"span\", { className: \"text-sm\", children: practice })] }, index))) }) })] }), _jsxs(Card, { className: \"bg-blue-50 border-blue-200\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2 text-blue-800\", children: [_jsx(Lightbulb, { className: \"h-6 w-6\" }), \"Important Guidance\"] }) }), _jsx(CardContent, { children: _jsxs(\"div\", { className: \"space-y-4 text-blue-800\", children: [_jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Professional Support:\" }), \" These herbs complement but don't replace professional mental health care. If you're experiencing persistent mental health challenges, please seek support from qualified professionals.\"] }), _jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Individual Response:\" }), \" Everyone responds differently to herbs. Start with small amounts and observe how your body and mind respond.\"] }), _jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Consistency:\" }), \" Mental wellness is a journey. Regular, gentle practices often work better than occasional intensive use.\"] })] }) })] }), _jsx(HerbDetailModal, { herb: selectedHerb, isOpen: isModalOpen, onClose: () => {\n                        setIsModalOpen(false);\n                        setSelectedHerb(null);\n                    } })] }) }));\n}\n","size_bytes":5500},"client/src/pages/not-found.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\nexport default function NotFound() {\n    return (_jsx(\"div\", { className: \"min-h-screen w-full flex items-center justify-center bg-gray-50\", children: _jsx(Card, { className: \"w-full max-w-md mx-4\", children: _jsxs(CardContent, { className: \"pt-6\", children: [_jsxs(\"div\", { className: \"flex mb-4 gap-2\", children: [_jsx(AlertCircle, { className: \"h-8 w-8 text-red-500\" }), _jsx(\"h1\", { className: \"text-2xl font-bold text-gray-900\", children: \"404 Page Not Found\" })] }), _jsx(\"p\", { className: \"mt-4 text-sm text-gray-600\", children: \"Did you forget to add the page to the router?\" })] }) }) }));\n}\n","size_bytes":767},"client/src/pages/privacy-policy.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Shield, Eye, Lock, Users, Mail, FileText } from \"lucide-react\";\nexport default function PrivacyPolicy() {\n    const lastUpdated = \"December 2024\";\n    const dataTypes = [\n        {\n            icon: Users,\n            title: \"Personal Information\",\n            description: \"Name, email address, and any information you voluntarily provide when using our community features.\",\n            examples: [\"Name\", \"Email address\", \"Community posts\", \"Comments\"]\n        },\n        {\n            icon: Eye,\n            title: \"Usage Information\",\n            description: \"Information about how you interact with our website and services.\",\n            examples: [\"Pages visited\", \"Time spent on site\", \"Search queries\", \"Herb preferences\"]\n        },\n        {\n            icon: FileText,\n            title: \"Content Information\",\n            description: \"Information you share through our community features and wellness tracking.\",\n            examples: [\"Wellness posts\", \"Herb reviews\", \"Health goals\", \"Progress updates\"]\n        }\n    ];\n    const dataUsage = [\n        {\n            purpose: \"Service Provision\",\n            description: \"To provide and maintain our herbal wellness platform and community features.\"\n        },\n        {\n            purpose: \"Personalization\",\n            description: \"To customize your experience and provide relevant herbal recommendations.\"\n        },\n        {\n            purpose: \"Communication\",\n            description: \"To respond to your inquiries and send important updates about our services.\"\n        },\n        {\n            purpose: \"Community Features\",\n            description: \"To enable community interactions, wellness sharing, and peer support.\"\n        },\n        {\n            purpose: \"Analytics\",\n            description: \"To understand how our services are used and improve user experience.\"\n        }\n    ];\n    const dataProtection = [\n        {\n            icon: Lock,\n            title: \"Encryption\",\n            description: \"All data is encrypted in transit and at rest using industry-standard protocols.\"\n        },\n        {\n            icon: Shield,\n            title: \"Access Controls\",\n            description: \"Strict access controls ensure only authorized personnel can access your data.\"\n        },\n        {\n            icon: Eye,\n            title: \"Monitoring\",\n            description: \"Continuous monitoring and security audits to protect against unauthorized access.\"\n        }\n    ];\n    const userRights = [\n        {\n            right: \"Access\",\n            description: \"Request a copy of the personal data we hold about you.\"\n        },\n        {\n            right: \"Correction\",\n            description: \"Request correction of inaccurate or incomplete personal data.\"\n        },\n        {\n            right: \"Deletion\",\n            description: \"Request deletion of your personal data under certain circumstances.\"\n        },\n        {\n            right: \"Portability\",\n            description: \"Request transfer of your data to another service provider.\"\n        },\n        {\n            right: \"Objection\",\n            description: \"Object to processing of your personal data for certain purposes.\"\n        },\n        {\n            right: \"Restriction\",\n            description: \"Request restriction of processing under certain circumstances.\"\n        }\n    ];\n    return (_jsx(\"div\", { className: \"py-16 px-4\", children: _jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsxs(\"div\", { className: \"text-center mb-16\", children: [_jsx(\"div\", { className: \"flex justify-center mb-6\", children: _jsx(\"div\", { className: \"w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center\", children: _jsx(Shield, { className: \"h-10 w-10 text-blue-600\" }) }) }), _jsx(\"h1\", { className: \"text-4xl font-bold mb-6 text-blue-600\", \"data-testid\": \"text-page-title\", children: \"Privacy Policy\" }), _jsx(\"p\", { className: \"text-xl text-muted-foreground max-w-3xl mx-auto\", children: \"Your privacy is important to us. This policy explains how we collect, use, and protect your information.\" }), _jsxs(\"p\", { className: \"text-sm text-muted-foreground mt-4\", children: [\"Last updated: \", lastUpdated] })] }), _jsxs(Card, { className: \"mb-16\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(FileText, { className: \"h-6 w-6\" }), \"Introduction\"] }) }), _jsx(CardContent, { children: _jsxs(\"div\", { className: \"space-y-4 text-muted-foreground\", children: [_jsx(\"p\", { children: \"Herbal Care Hub (\\\"we,\\\" \\\"our,\\\" or \\\"us\\\") is committed to protecting your privacy and personal information. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our website and services.\" }), _jsx(\"p\", { children: \"By using our services, you agree to the collection and use of information in accordance with this policy. If you do not agree with our policies and practices, please do not use our services.\" })] }) })] }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Information We Collect\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-8\", children: dataTypes.map((type, index) => {\n                                const IconComponent = type.icon;\n                                return (_jsx(Card, { className: \"text-center\", children: _jsxs(CardContent, { className: \"pt-6\", children: [_jsx(IconComponent, { className: \"h-12 w-12 mx-auto mb-4 text-blue-600\" }), _jsx(\"h3\", { className: \"text-xl font-semibold mb-2\", children: type.title }), _jsx(\"p\", { className: \"text-muted-foreground mb-4\", children: type.description }), _jsxs(\"div\", { className: \"text-sm\", children: [_jsx(\"p\", { className: \"font-medium mb-2\", children: \"Examples:\" }), _jsx(\"ul\", { className: \"space-y-1\", children: type.examples.map((example, idx) => (_jsxs(\"li\", { className: \"text-muted-foreground\", children: [\"\\u2022 \", example] }, idx))) })] })] }) }, index));\n                            }) })] }), _jsxs(Card, { className: \"mb-16\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(Eye, { className: \"h-6 w-6\" }), \"How We Use Your Information\"] }) }), _jsx(CardContent, { children: _jsx(\"div\", { className: \"space-y-6\", children: dataUsage.map((usage, index) => (_jsxs(\"div\", { className: \"flex items-start gap-4 p-4 bg-muted rounded-lg\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-blue-600 rounded-full mt-2\" }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: usage.purpose }), _jsx(\"p\", { className: \"text-muted-foreground text-sm\", children: usage.description })] })] }, index))) }) })] }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"How We Protect Your Data\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-8\", children: dataProtection.map((protection, index) => {\n                                const IconComponent = protection.icon;\n                                return (_jsx(Card, { className: \"text-center\", children: _jsxs(CardContent, { className: \"pt-6\", children: [_jsx(IconComponent, { className: \"h-12 w-12 mx-auto mb-4 text-green-600\" }), _jsx(\"h3\", { className: \"text-xl font-semibold mb-2\", children: protection.title }), _jsx(\"p\", { className: \"text-muted-foreground\", children: protection.description })] }) }, index));\n                            }) })] }), _jsxs(Card, { className: \"mb-16\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(Users, { className: \"h-6 w-6\" }), \"Your Privacy Rights\"] }) }), _jsxs(CardContent, { children: [_jsx(\"p\", { className: \"text-muted-foreground mb-6\", children: \"You have certain rights regarding your personal information. To exercise these rights, please contact us.\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: userRights.map((right, index) => (_jsxs(\"div\", { className: \"flex items-start gap-3 p-3 bg-muted rounded-lg\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-green-600 rounded-full mt-2\" }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold text-sm\", children: right.right }), _jsx(\"p\", { className: \"text-muted-foreground text-xs\", children: right.description })] })] }, index))) })] })] }), _jsxs(Card, { className: \"mb-16\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(Eye, { className: \"h-6 w-6\" }), \"Cookies and Tracking\"] }) }), _jsx(CardContent, { children: _jsxs(\"div\", { className: \"space-y-4 text-muted-foreground\", children: [_jsx(\"p\", { children: \"We use cookies and similar tracking technologies to enhance your experience on our website. Cookies are small data files stored on your device that help us:\" }), _jsxs(\"ul\", { className: \"space-y-2 ml-4\", children: [_jsx(\"li\", { children: \"\\u2022 Remember your preferences and settings\" }), _jsx(\"li\", { children: \"\\u2022 Understand how you use our website\" }), _jsx(\"li\", { children: \"\\u2022 Improve our services and user experience\" }), _jsx(\"li\", { children: \"\\u2022 Provide personalized content and recommendations\" })] }), _jsx(\"p\", { children: \"You can control cookie settings through your browser preferences. However, disabling cookies may affect the functionality of our website.\" })] }) })] }), _jsxs(Card, { className: \"mb-16\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(Shield, { className: \"h-6 w-6\" }), \"Third-Party Services\"] }) }), _jsx(CardContent, { children: _jsxs(\"div\", { className: \"space-y-4 text-muted-foreground\", children: [_jsx(\"p\", { children: \"We may use third-party services to help us provide and improve our services. These services may collect information about you in accordance with their own privacy policies. We carefully select our partners and ensure they meet our privacy standards.\" }), _jsx(\"p\", { children: \"Common third-party services we use include:\" }), _jsxs(\"ul\", { className: \"space-y-2 ml-4\", children: [_jsx(\"li\", { children: \"\\u2022 Analytics services to understand website usage\" }), _jsx(\"li\", { children: \"\\u2022 Content delivery networks for faster loading\" }), _jsx(\"li\", { children: \"\\u2022 Email services for communications\" }), _jsx(\"li\", { children: \"\\u2022 Security services to protect against threats\" })] })] }) })] }), _jsxs(Card, { className: \"bg-blue-50 border-blue-200\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2 text-blue-800\", children: [_jsx(Mail, { className: \"h-6 w-6\" }), \"Contact Us\"] }) }), _jsx(CardContent, { children: _jsxs(\"div\", { className: \"space-y-4 text-blue-800\", children: [_jsx(\"p\", { children: \"If you have any questions about this Privacy Policy or our data practices, please contact us:\" }), _jsxs(\"div\", { className: \"space-y-2\", children: [_jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Email:\" }), \" privacy@herbalcarehub.com\"] }), _jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Address:\" }), \" Herbal Care Hub Privacy Team\"] }), _jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Response Time:\" }), \" We will respond to your inquiry within 30 days\"] })] }), _jsx(\"p\", { className: \"mt-4\", children: \"We may update this Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page and updating the \\\"Last updated\\\" date.\" })] }) })] })] }) }));\n}\n","size_bytes":11762},"client/src/pages/safety-guidelines.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AlertTriangle, Shield, Heart, BookOpen, Phone } from \"lucide-react\";\nexport default function SafetyGuidelines() {\n    const safetyPrinciples = [\n        {\n            icon: AlertTriangle,\n            title: \"Consult Healthcare Providers\",\n            description: \"Always consult with qualified healthcare providers before using herbs, especially if you have existing medical conditions or are taking medications.\",\n            color: \"text-red-600\"\n        },\n        {\n            icon: Shield,\n            title: \"Start Small\",\n            description: \"Begin with small amounts and gradually increase as needed. Monitor your body's response and discontinue use if adverse effects occur.\",\n            color: \"text-blue-600\"\n        },\n        {\n            icon: Heart,\n            title: \"Know Your Body\",\n            description: \"Understand your individual health conditions, allergies, and sensitivities. What works for others may not work for you.\",\n            color: \"text-green-600\"\n        }\n    ];\n    const safetyChecklist = [\n        \"Research the herb thoroughly before use\",\n        \"Check for potential drug interactions\",\n        \"Verify the quality and source of herbs\",\n        \"Start with the lowest recommended dose\",\n        \"Monitor for any adverse reactions\",\n        \"Keep a record of herbs you're using\",\n        \"Store herbs properly in cool, dry places\",\n        \"Check expiration dates regularly\"\n    ];\n    const warningSigns = [\n        \"Allergic reactions (rash, itching, swelling)\",\n        \"Digestive upset (nausea, vomiting, diarrhea)\",\n        \"Dizziness or lightheadedness\",\n        \"Changes in heart rate or blood pressure\",\n        \"Unusual fatigue or weakness\",\n        \"Mood changes or irritability\",\n        \"Sleep disturbances\",\n        \"Headaches or migraines\"\n    ];\n    const specialPopulations = [\n        {\n            group: \"Pregnant & Breastfeeding Women\",\n            considerations: [\n                \"Many herbs are not safe during pregnancy\",\n                \"Some herbs can affect milk supply\",\n                \"Always consult healthcare provider first\",\n                \"Avoid herbs with hormonal effects\"\n            ]\n        },\n        {\n            group: \"Children\",\n            considerations: [\n                \"Children's bodies process herbs differently\",\n                \"Dosages must be adjusted for age and weight\",\n                \"Some herbs are not safe for children\",\n                \"Always consult pediatric healthcare provider\"\n            ]\n        },\n        {\n            group: \"Elderly\",\n            considerations: [\n                \"May have multiple health conditions\",\n                \"Often taking multiple medications\",\n                \"Higher risk of drug interactions\",\n                \"May need lower dosages\"\n            ]\n        },\n        {\n            group: \"People with Chronic Conditions\",\n            considerations: [\n                \"Diabetes, heart disease, kidney disease\",\n                \"Autoimmune conditions\",\n                \"Mental health conditions\",\n                \"Cancer or cancer treatment history\"\n            ]\n        }\n    ];\n    return (_jsx(\"div\", { className: \"py-16 px-4\", children: _jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsxs(\"div\", { className: \"text-center mb-16\", children: [_jsx(\"div\", { className: \"flex justify-center mb-6\", children: _jsx(\"div\", { className: \"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center\", children: _jsx(Shield, { className: \"h-10 w-10 text-red-600\" }) }) }), _jsx(\"h1\", { className: \"text-4xl font-bold mb-6 text-red-600\", \"data-testid\": \"text-page-title\", children: \"Safety Guidelines\" }), _jsx(\"p\", { className: \"text-xl text-muted-foreground max-w-3xl mx-auto\", children: \"Essential safety information for responsible herbal use. Your health and safety are our top priority.\" })] }), _jsxs(Card, { className: \"mb-16 bg-red-50 border-red-200\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2 text-red-800\", children: [_jsx(AlertTriangle, { className: \"h-6 w-6\" }), \"Important Medical Disclaimer\"] }) }), _jsx(CardContent, { children: _jsxs(\"div\", { className: \"space-y-4 text-red-800\", children: [_jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"This information is for educational purposes only and is not intended as medical advice.\" }), \"Herbal remedies should not replace professional medical treatment.\"] }), _jsx(\"p\", { children: \"Always consult with qualified healthcare providers before using herbs, especially if you have existing medical conditions, are pregnant, breastfeeding, or taking medications.\" }), _jsx(\"p\", { children: \"If you experience any adverse reactions, discontinue use immediately and seek medical attention.\" })] }) })] }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Core Safety Principles\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-8\", children: safetyPrinciples.map((principle, index) => {\n                                const IconComponent = principle.icon;\n                                return (_jsx(Card, { className: \"text-center\", children: _jsxs(CardContent, { className: \"pt-6\", children: [_jsx(IconComponent, { className: `h-12 w-12 mx-auto mb-4 ${principle.color}` }), _jsx(\"h3\", { className: \"text-xl font-semibold mb-2\", children: principle.title }), _jsx(\"p\", { className: \"text-muted-foreground\", children: principle.description })] }) }, index));\n                            }) })] }), _jsxs(Card, { className: \"mb-16\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(BookOpen, { className: \"h-6 w-6\" }), \"Pre-Use Safety Checklist\"] }) }), _jsx(CardContent, { children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: safetyChecklist.map((item, index) => (_jsxs(\"div\", { className: \"flex items-center gap-3 p-3 bg-muted rounded-lg\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-green-600 rounded-full\" }), _jsx(\"span\", { className: \"text-sm\", children: item })] }, index))) }) })] }), _jsxs(Card, { className: \"mb-16\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2 text-orange-600\", children: [_jsx(AlertTriangle, { className: \"h-6 w-6\" }), \"Warning Signs to Watch For\"] }) }), _jsxs(CardContent, { children: [_jsx(\"p\", { className: \"text-muted-foreground mb-4\", children: \"If you experience any of these symptoms while using herbs, discontinue use immediately and consult a healthcare provider:\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: warningSigns.map((sign, index) => (_jsxs(\"div\", { className: \"flex items-center gap-3 p-3 bg-orange-50 rounded-lg border border-orange-200\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-orange-600 rounded-full\" }), _jsx(\"span\", { className: \"text-sm\", children: sign })] }, index))) })] })] }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Special Considerations\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-6\", children: specialPopulations.map((population, index) => (_jsxs(Card, { className: \"p-6\", children: [_jsx(CardHeader, { className: \"pb-4\", children: _jsx(\"h3\", { className: \"text-lg font-semibold text-blue-600\", children: population.group }) }), _jsx(CardContent, { children: _jsx(\"ul\", { className: \"space-y-2\", children: population.considerations.map((consideration, idx) => (_jsxs(\"li\", { className: \"flex items-start gap-2 text-sm text-muted-foreground\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-blue-500 rounded-full mt-2\" }), _jsx(\"span\", { children: consideration })] }, idx))) }) })] }, index))) })] }), _jsxs(Card, { className: \"bg-blue-50 border-blue-200\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2 text-blue-800\", children: [_jsx(Phone, { className: \"h-6 w-6\" }), \"Emergency Information\"] }) }), _jsx(CardContent, { children: _jsxs(\"div\", { className: \"space-y-4 text-blue-800\", children: [_jsx(\"p\", { children: _jsx(\"strong\", { children: \"In case of emergency or severe adverse reaction:\" }) }), _jsxs(\"ul\", { className: \"space-y-2 ml-4\", children: [_jsx(\"li\", { children: \"\\u2022 Call emergency services (911) immediately\" }), _jsx(\"li\", { children: \"\\u2022 Contact your local poison control center\" }), _jsx(\"li\", { children: \"\\u2022 Bring the herb or product with you to the emergency room\" }), _jsx(\"li\", { children: \"\\u2022 Inform healthcare providers about all herbs and medications you're taking\" })] }), _jsxs(\"p\", { className: \"mt-4\", children: [_jsx(\"strong\", { children: \"Poison Control Hotline:\" }), \" 1-800-222-1222 (US)\"] })] }) })] })] }) }));\n}\n","size_bytes":9017},"client/src/pages/sleep.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Moon, Bed, Star, BookOpen, Clock, Lightbulb } from \"lucide-react\";\nimport HerbCard from \"@/components/herbs/herb-card\";\nimport HerbDetailModal from \"@/components/herbs/herb-detail-modal\";\nexport default function Sleep() {\n    const [selectedHerb, setSelectedHerb] = useState(null);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const { data: allHerbs = [] } = useQuery({\n        queryKey: [\"/api/herbs\"],\n    });\n    // Filter herbs for sleep\n    const sleepHerbs = allHerbs.filter(herb => herb.categories.includes(\"Sleep\"));\n    const handleHerbClick = (herb) => {\n        setSelectedHerb(herb);\n        setIsModalOpen(true);\n    };\n    const sleepTips = [\n        {\n            icon: Moon,\n            title: \"Natural Relaxation\",\n            description: \"Use calming herbs like chamomile and African sage to prepare your mind for sleep.\",\n            color: \"text-indigo-600\"\n        },\n        {\n            icon: Bed,\n            title: \"Sleep Ritual\",\n            description: \"Create a consistent bedtime routine with soothing herbal teas and practices.\",\n            color: \"text-purple-600\"\n        },\n        {\n            icon: Star,\n            title: \"Quality Rest\",\n            description: \"Support deeper, more restorative sleep with gentle herbal remedies.\",\n            color: \"text-blue-600\"\n        }\n    ];\n    const bedtimeRitual = [\n        \"Dim lights 1 hour before bed\",\n        \"Drink calming herbal tea (chamomile, African sage)\",\n        \"Practice gentle breathing exercises\",\n        \"Read a book or listen to calming music\",\n        \"Avoid screens and stimulating activities\",\n        \"Create a cool, dark, quiet sleep environment\"\n    ];\n    const sleepTimeline = [\n        { time: \"8:00 PM\", activity: \"Begin winding down\", herb: \"Chamomile tea\" },\n        { time: \"9:00 PM\", activity: \"Relaxation practice\", herb: \"African sage steam\" },\n        { time: \"9:30 PM\", activity: \"Bedtime preparation\", herb: \"Lavender aromatherapy\" },\n        { time: \"10:00 PM\", activity: \"Sleep time\", herb: \"Gentle breathing\" }\n    ];\n    const sleepEnhancers = [\n        \"Keep bedroom cool (65-68°F/18-20°C)\",\n        \"Use blackout curtains\",\n        \"White noise machine or nature sounds\",\n        \"Comfortable, supportive mattress\",\n        \"Regular sleep schedule\",\n        \"Limit caffeine after 2 PM\"\n    ];\n    return (_jsx(\"div\", { className: \"py-16 px-4\", children: _jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsxs(\"div\", { className: \"text-center mb-16\", children: [_jsx(\"div\", { className: \"flex justify-center mb-6\", children: _jsx(\"div\", { className: \"w-20 h-20 bg-indigo-100 rounded-full flex items-center justify-center\", children: _jsx(Moon, { className: \"h-10 w-10 text-indigo-600\" }) }) }), _jsx(\"h1\", { className: \"text-4xl font-bold mb-6 text-indigo-600\", \"data-testid\": \"text-page-title\", children: \"Sleep & Relaxation\" }), _jsx(\"p\", { className: \"text-xl text-muted-foreground max-w-3xl mx-auto\", children: \"Discover natural herbs and practices that promote restful sleep, deep relaxation, and peaceful nights.\" })] }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\", children: sleepTips.map((tip, index) => {\n                        const IconComponent = tip.icon;\n                        return (_jsx(Card, { className: \"text-center\", children: _jsxs(CardContent, { className: \"pt-6\", children: [_jsx(IconComponent, { className: `h-12 w-12 mx-auto mb-4 ${tip.color}` }), _jsx(\"h3\", { className: \"text-xl font-semibold mb-2\", children: tip.title }), _jsx(\"p\", { className: \"text-muted-foreground\", children: tip.description })] }) }, index));\n                    }) }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Herbs for Sleep & Relaxation\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\", children: sleepHerbs.map((herb) => (_jsx(\"div\", { onClick: () => handleHerbClick(herb), children: _jsx(HerbCard, { herb: herb }) }, herb.id))) })] }), _jsxs(Card, { className: \"mb-16\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(BookOpen, { className: \"h-6 w-6\" }), \"Bedtime Ritual\"] }) }), _jsx(CardContent, { children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: bedtimeRitual.map((ritual, index) => (_jsxs(\"div\", { className: \"flex items-center gap-3 p-3 bg-muted rounded-lg\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-indigo-600 rounded-full\" }), _jsx(\"span\", { className: \"text-sm\", children: ritual })] }, index))) }) })] }), _jsxs(Card, { className: \"mb-16\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(Clock, { className: \"h-6 w-6\" }), \"Sleep Preparation Timeline\"] }) }), _jsx(CardContent, { children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\", children: sleepTimeline.map((timing, index) => (_jsxs(\"div\", { className: \"p-4 border rounded-lg\", children: [_jsx(\"div\", { className: \"font-semibold text-indigo-600 mb-2\", children: timing.time }), _jsx(\"div\", { className: \"text-sm text-muted-foreground mb-2\", children: timing.activity }), _jsx(Badge, { variant: \"outline\", className: \"text-xs\", children: timing.herb })] }, index))) }) })] }), _jsxs(Card, { className: \"mb-16\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(Bed, { className: \"h-6 w-6\" }), \"Sleep Environment Optimization\"] }) }), _jsx(CardContent, { children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: sleepEnhancers.map((enhancer, index) => (_jsxs(\"div\", { className: \"flex items-center gap-3 p-3 bg-muted rounded-lg\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-purple-600 rounded-full\" }), _jsx(\"span\", { className: \"text-sm\", children: enhancer })] }, index))) }) })] }), _jsxs(Card, { className: \"bg-indigo-50 border-indigo-200\", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2 text-indigo-800\", children: [_jsx(Lightbulb, { className: \"h-6 w-6\" }), \"Sleep Enhancement Tips\"] }) }), _jsx(CardContent, { children: _jsxs(\"div\", { className: \"space-y-4 text-indigo-800\", children: [_jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Consistency is Key:\" }), \" Go to bed and wake up at the same time every day, even on weekends.\"] }), _jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Herb Timing:\" }), \" Take sleep-supporting herbs 30-60 minutes before bedtime for best results.\"] }), _jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Mind-Body Connection:\" }), \" Combine herbs with relaxation techniques like meditation or gentle yoga.\"] }), _jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Patience:\" }), \" It may take 1-2 weeks to establish a new sleep routine. Be patient with the process.\"] })] }) })] }), _jsx(HerbDetailModal, { herb: selectedHerb, isOpen: isModalOpen, onClose: () => {\n                        setIsModalOpen(false);\n                        setSelectedHerb(null);\n                    } })] }) }));\n}\n","size_bytes":7459},"client/src/pages/videos.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Play, Clock, ChefHat, List } from \"lucide-react\";\nexport default function Videos() {\n    const videos = [\n        {\n            id: \"turmeric-arthritis\",\n            title: \"Turmeric Remedy for Arthritis Pain\",\n            description: \"Natural anti-inflammatory remedy using turmeric to reduce joint pain and stiffness.\",\n            thumbnail: \"/attached_assets/generated_images/Fresh_turmeric_root_powder_2c202d36.png\",\n            duration: \"4:20\",\n            difficulty: \"Easy\",\n            youtubeUrl: null,\n            ingredients: [\"Turmeric powder\", \"Warm milk or water\", \"Black pepper\", \"Honey\"],\n            steps: [\n                \"Mix 1 tsp turmeric powder with warm milk\",\n                \"Add a pinch of black pepper for better absorption\",\n                \"Stir in honey for taste\",\n                \"Drink twice daily for best results\",\n                \"Consult your doctor for persistent pain\"\n            ]\n        },\n        {\n            id: \"garlic-cholesterol\",\n            title: \"Garlic for High Cholesterol\",\n            description: \"Learn how to use garlic as a natural remedy to help manage cholesterol levels.\",\n            thumbnail: \"/attached_assets/generated_images/Fresh_garlic_cloves_peeled_566ff3c0.png\",\n            duration: \"3:45\",\n            difficulty: \"Easy\",\n            youtubeUrl: null,\n            ingredients: [\"Fresh garlic cloves\", \"Warm water\", \"Lemon juice (optional)\"],\n            steps: [\n                \"Crush 2-3 fresh garlic cloves\",\n                \"Let sit for 10 minutes to activate compounds\",\n                \"Swallow with warm water on empty stomach\",\n                \"Add lemon juice if desired\",\n                \"Use for 2-3 weeks, then take a break\"\n            ]\n        },\n        {\n            id: \"aloe-acne\",\n            title: \"Aloe Vera for Clear Skin & Acne\",\n            description: \"Natural skincare remedy using aloe vera to treat acne and achieve clear, healthy skin.\",\n            thumbnail: \"/attached_assets/generated_images/Fresh_aloe_vera_plant_37ed8ded.png\",\n            duration: \"5:15\",\n            difficulty: \"Easy\",\n            youtubeUrl: null,\n            ingredients: [\"Fresh aloe vera gel\", \"Tea tree oil (optional)\", \"Clean cloth\"],\n            steps: [\n                \"Extract fresh gel from aloe vera leaf\",\n                \"Apply thin layer to clean face\",\n                \"Add 1 drop tea tree oil for stubborn acne\",\n                \"Leave for 15-20 minutes\",\n                \"Rinse with cool water, pat dry\"\n            ]\n        },\n        {\n            id: \"onion-hair-growth\",\n            title: \"Onion Juice for Hair Growth\",\n            description: \"Traditional remedy using onion juice to stimulate hair growth and reduce hair loss.\",\n            thumbnail: \"/attached_assets/generated_images/Fresh_red_onions_sliced_bb2a7403.png\",\n            duration: \"6:30\",\n            difficulty: \"Medium\",\n            youtubeUrl: null,\n            ingredients: [\"Medium onion\", \"Coconut oil\", \"Essential oil for scent\"],\n            steps: [\n                \"Grate or blend 1 medium onion\",\n                \"Strain to extract pure juice\",\n                \"Mix with 1 tbsp coconut oil\",\n                \"Massage into scalp for 5 minutes\",\n                \"Leave for 30 minutes, then shampoo thoroughly\"\n            ]\n        },\n        {\n            id: \"honey-cough\",\n            title: \"Honey & Ginger Cough Remedy\",\n            description: \"Soothing natural cough syrup using honey and ginger to relieve throat irritation.\",\n            thumbnail: \"/attached_assets/generated_images/Raw_honey_jar_ginger_63a42cf4.png\",\n            duration: \"4:00\",\n            difficulty: \"Easy\",\n            youtubeUrl: null,\n            ingredients: [\"Raw honey\", \"Fresh ginger\", \"Warm water\", \"Lemon juice\"],\n            steps: [\n                \"Grate 1 tsp fresh ginger\",\n                \"Mix with 2 tbsp raw honey\",\n                \"Add lemon juice and warm water\",\n                \"Take 1 tsp every 2-3 hours\",\n                \"Best taken before meals\"\n            ]\n        },\n        {\n            id: \"cucumber-dark-circles\",\n            title: \"Cucumber for Dark Under-Eye Circles\",\n            description: \"Simple and effective remedy to reduce dark circles and puffiness around the eyes.\",\n            thumbnail: \"/attached_assets/generated_images/Fresh_cucumber_slices_cooling_f0ef1ea8.png\",\n            duration: \"2:45\",\n            difficulty: \"Easy\",\n            youtubeUrl: null,\n            ingredients: [\"Fresh cucumber\", \"Rose water\", \"Cotton pads\"],\n            steps: [\n                \"Slice cucumber into thick rounds\",\n                \"Chill in refrigerator for 30 minutes\",\n                \"Soak cotton pads in rose water\",\n                \"Place cucumber slices on closed eyes\",\n                \"Relax for 15-20 minutes daily\"\n            ]\n        },\n        {\n            id: \"acv-acid-reflux\",\n            title: \"Apple Cider Vinegar for Acid Reflux\",\n            description: \"Natural remedy using apple cider vinegar to reduce heartburn and acid reflux symptoms.\",\n            thumbnail: \"/attached_assets/generated_images/Apple_cider_vinegar_remedy_8b948f09.png\",\n            duration: \"3:30\",\n            difficulty: \"Easy\",\n            youtubeUrl: null,\n            ingredients: [\"Apple cider vinegar\", \"Warm water\", \"Honey (optional)\"],\n            steps: [\n                \"Mix 1-2 tbsp apple cider vinegar with warm water\",\n                \"Add honey to taste if desired\",\n                \"Drink 20 minutes before meals\",\n                \"Start with small amounts to test tolerance\",\n                \"Use with the 'mother' for best results\"\n            ]\n        },\n        {\n            id: \"lemon-teeth-whitening\",\n            title: \"Lemon & Baking Soda Teeth Whitening\",\n            description: \"Natural teeth whitening remedy using lemon juice and baking soda for brighter smiles.\",\n            thumbnail: \"/attached_assets/generated_images/Lemon_baking_soda_whitening_04bc34a7.png\",\n            duration: \"2:15\",\n            difficulty: \"Easy\",\n            youtubeUrl: null,\n            ingredients: [\"Fresh lemon juice\", \"Baking soda\", \"Soft toothbrush\", \"Water\"],\n            steps: [\n                \"Mix equal parts lemon juice and baking soda\",\n                \"Apply gently to teeth with soft brush\",\n                \"Leave for 1-2 minutes maximum\",\n                \"Rinse thoroughly with water\",\n                \"Use only once per week to protect enamel\"\n            ]\n        },\n        {\n            id: \"coconut-oil-diabetes\",\n            title: \"Coconut Oil & Cinnamon for Blood Sugar\",\n            description: \"Natural remedy to help manage blood sugar levels using coconut oil and cinnamon.\",\n            thumbnail: \"/attached_assets/generated_images/Coconut_oil_cinnamon_diabetes_24d32a1a.png\",\n            duration: \"4:45\",\n            difficulty: \"Easy\",\n            youtubeUrl: null,\n            ingredients: [\"Virgin coconut oil\", \"Ceylon cinnamon\", \"Warm water\"],\n            steps: [\n                \"Take 1 tbsp virgin coconut oil daily\",\n                \"Add 1/2 tsp Ceylon cinnamon to meals\",\n                \"Mix cinnamon with warm water as tea\",\n                \"Take coconut oil before meals\",\n                \"Monitor blood sugar and consult doctor\"\n            ]\n        },\n        {\n            id: \"mint-ginger-nausea\",\n            title: \"Mint & Ginger for Nausea Relief\",\n            description: \"Quick natural remedy to relieve nausea and morning sickness using mint and ginger.\",\n            thumbnail: \"/attached_assets/generated_images/Mint_ginger_nausea_remedy_dd650feb.png\",\n            duration: \"3:45\",\n            difficulty: \"Easy\",\n            youtubeUrl: null,\n            ingredients: [\"Fresh mint leaves\", \"Fresh ginger\", \"Hot water\", \"Lemon\"],\n            steps: [\n                \"Steep fresh mint leaves in hot water\",\n                \"Add thin ginger slices to the tea\",\n                \"Let brew for 5-7 minutes\",\n                \"Add fresh lemon juice\",\n                \"Sip slowly when feeling nauseous\"\n            ]\n        },\n        {\n            id: \"chamomile-anxiety\",\n            title: \"Chamomile & Green Tea for Stress Relief\",\n            description: \"Calming herbal blend to reduce stress and anxiety naturally using chamomile and green tea.\",\n            thumbnail: \"/attached_assets/generated_images/Green_tea_chamomile_stress_b57eeb53.png\",\n            duration: \"4:20\",\n            difficulty: \"Easy\",\n            youtubeUrl: null,\n            ingredients: [\"Chamomile flowers\", \"Green tea\", \"Honey\", \"Warm water\"],\n            steps: [\n                \"Combine equal parts chamomile and green tea\",\n                \"Steep in warm (not boiling) water\",\n                \"Brew for 3-5 minutes to avoid bitterness\",\n                \"Add honey for natural sweetness\",\n                \"Drink 2-3 times daily during stressful periods\"\n            ]\n        },\n        {\n            id: \"banana-oats-constipation\",\n            title: \"Banana & Oats for Natural Constipation Relief\",\n            description: \"Gentle digestive remedy using bananas and oats to relieve constipation naturally.\",\n            thumbnail: \"/attached_assets/generated_images/Banana_oats_constipation_remedy_4c9229c2.png\",\n            duration: \"5:00\",\n            difficulty: \"Easy\",\n            youtubeUrl: null,\n            ingredients: [\"Ripe bananas\", \"Rolled oats\", \"Water or milk\", \"Honey\"],\n            steps: [\n                \"Mash 1 ripe banana in a bowl\",\n                \"Add 1/2 cup rolled oats\",\n                \"Pour warm water or milk to desired consistency\",\n                \"Add honey for sweetness\",\n                \"Eat first thing in the morning on empty stomach\"\n            ]\n        }\n    ];\n    const [selectedVideo, setSelectedVideo] = useState(null);\n    const [showVideoModal, setShowVideoModal] = useState(false);\n    const handleVideoClick = (video) => {\n        setSelectedVideo(video);\n        setShowVideoModal(true);\n    };\n    return (_jsxs(\"div\", { className: \"py-16 px-4\", children: [_jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsx(\"h1\", { className: \"text-4xl font-bold text-center mb-8\", \"data-testid\": \"text-page-title\", children: \"Natural Home Remedies Videos\" }), _jsx(\"p\", { className: \"text-lg text-muted-foreground text-center mb-8 max-w-2xl mx-auto\", children: \"Practical home remedies for common health conditions using natural ingredients\" }), _jsx(\"div\", { className: \"bg-green-100 border border-green-300 rounded-lg p-4 max-w-3xl mx-auto mb-12\", children: _jsxs(\"p\", { className: \"text-green-800 text-sm text-center\", children: [\"\\uD83D\\uDCFA \", _jsx(\"strong\", { children: \"Inspired by SUSANA HOME REMEDIES\" }), \" - Educational content for natural wellness.\", _jsx(\"br\", {}), _jsx(\"em\", { children: \"Always consult healthcare professionals before trying new remedies.\" })] }) }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\", children: videos.map((video) => (_jsxs(Card, { className: \"overflow-hidden cursor-pointer hover:shadow-lg transition-shadow\", onClick: () => handleVideoClick(video), \"data-testid\": `card-video-${video.id}`, children: [_jsxs(\"div\", { className: \"aspect-video bg-muted flex items-center justify-center relative overflow-hidden\", children: [_jsx(\"img\", { src: video.thumbnail, alt: video.title, className: \"w-full h-full object-cover\" }), _jsx(\"div\", { className: \"absolute inset-0 bg-black/20 hover:bg-black/30 transition-colors flex items-center justify-center\", children: _jsx(Play, { className: \"h-16 w-16 text-white opacity-90\" }) }), _jsx(\"div\", { className: \"absolute top-2 right-2\", children: _jsx(Badge, { variant: \"secondary\", className: \"text-xs\", children: video.difficulty }) }), _jsx(\"div\", { className: \"absolute bottom-2 left-2\", children: _jsx(Badge, { variant: \"outline\", className: \"text-xs bg-black/50 text-white border-white/20\", children: video.duration }) })] }), _jsxs(CardContent, { className: \"p-6\", children: [_jsx(\"h3\", { className: \"text-xl font-semibold mb-2\", \"data-testid\": `text-video-title-${video.id}`, children: video.title }), _jsx(\"p\", { className: \"text-muted-foreground text-sm\", \"data-testid\": `text-video-description-${video.id}`, children: video.description })] })] }, video.id))) }), _jsx(\"div\", { className: \"mt-12 text-center\", children: _jsxs(\"div\", { className: \"bg-muted p-8 rounded-lg\", children: [_jsx(\"h3\", { className: \"text-xl font-semibold mb-4\", children: \"More Videos Coming Soon!\" }), _jsx(\"p\", { className: \"text-muted-foreground mb-4\", children: \"We're working on creating comprehensive video guides for all our featured herbs and preparation methods.\" }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: \"Subscribe to our newsletter to be notified when new videos are available.\" })] }) })] }), selectedVideo && (_jsx(Dialog, { open: showVideoModal, onOpenChange: setShowVideoModal, children: _jsxs(DialogContent, { className: \"max-w-4xl max-h-[90vh] overflow-y-auto\", children: [_jsx(DialogHeader, { children: _jsx(DialogTitle, { className: \"text-2xl\", children: selectedVideo.title }) }), _jsxs(\"div\", { className: \"space-y-6\", children: [_jsx(\"div\", { className: \"aspect-video bg-muted rounded-lg overflow-hidden\", children: selectedVideo.youtubeUrl ? (_jsx(\"iframe\", { src: selectedVideo.youtubeUrl, title: selectedVideo.title, className: \"w-full h-full\", frameBorder: \"0\", allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\", allowFullScreen: true })) : (_jsxs(\"div\", { className: \"w-full h-full flex items-center justify-center relative\", children: [_jsx(\"img\", { src: selectedVideo.thumbnail, alt: selectedVideo.title, className: \"w-full h-full object-cover\" }), _jsx(\"div\", { className: \"absolute inset-0 bg-black/40 flex items-center justify-center\", children: _jsxs(\"div\", { className: \"text-center\", children: [_jsx(Play, { className: \"h-16 w-16 text-white mb-4 mx-auto\" }), _jsx(\"p\", { className: \"text-lg font-semibold text-white\", children: \"Educational Video\" }), _jsx(\"p\", { className: \"text-sm text-white/80\", children: \"Follow the ingredient list and preparation steps below for this natural home remedy\" })] }) })] })) }), _jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-6\", children: [_jsxs(\"div\", { children: [_jsxs(\"h3\", { className: \"text-lg font-semibold mb-4 flex items-center gap-2\", children: [_jsx(ChefHat, { className: \"h-5 w-5\" }), \"Ingredients\"] }), _jsx(\"ul\", { className: \"list-disc list-inside space-y-2 text-muted-foreground\", children: selectedVideo.ingredients.map((ingredient, index) => (_jsx(\"li\", { children: ingredient }, index))) })] }), _jsxs(\"div\", { children: [_jsxs(\"h3\", { className: \"text-lg font-semibold mb-4 flex items-center gap-2\", children: [_jsx(Clock, { className: \"h-5 w-5\" }), \"Video Details\"] }), _jsxs(\"div\", { className: \"space-y-2 text-muted-foreground\", children: [_jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Duration:\" }), \" \", selectedVideo.duration] }), _jsxs(\"p\", { children: [_jsx(\"strong\", { children: \"Difficulty:\" }), _jsx(Badge, { variant: \"secondary\", className: \"ml-2\", children: selectedVideo.difficulty })] })] })] })] }), _jsxs(\"div\", { children: [_jsxs(\"h3\", { className: \"text-lg font-semibold mb-4 flex items-center gap-2\", children: [_jsx(List, { className: \"h-5 w-5\" }), \"Preparation Steps\"] }), _jsx(\"ol\", { className: \"list-decimal list-inside space-y-3 text-muted-foreground\", children: selectedVideo.steps.map((step, index) => (_jsx(\"li\", { className: \"pl-2\", children: step }, index))) })] }), _jsxs(\"div\", { className: \"bg-blue-50 p-4 rounded-lg\", children: [_jsx(\"h4\", { className: \"font-semibold text-blue-800 mb-2\", children: \"Tips for Success\" }), _jsxs(\"ul\", { className: \"list-disc list-inside text-sm text-blue-700 space-y-1\", children: [_jsx(\"li\", { children: \"Use fresh, high-quality ingredients when possible\" }), _jsx(\"li\", { children: \"Follow the timing instructions carefully\" }), _jsx(\"li\", { children: \"Store prepared herbs properly to maintain potency\" }), _jsx(\"li\", { children: \"Start with small amounts and adjust to your preference\" })] })] })] })] }) }))] }));\n}\n","size_bytes":16523},"client/src/pages/weight-balance.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Scale, Apple, Heart, Leaf, Clock, Target, AlertTriangle } from \"lucide-react\";\nimport HerbCard from \"@/components/herbs/herb-card\";\nimport HerbDetailModal from \"@/components/herbs/herb-detail-modal\";\nexport default function WeightBalance() {\n    const [selectedHerb, setSelectedHerb] = useState(null);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const { data: allHerbs = [] } = useQuery({\n        queryKey: [\"/api/herbs\"],\n    });\n    // Filter herbs for weight balance and metabolism\n    const weightBalanceHerbs = allHerbs.filter(herb => herb.categories.includes(\"Weight Balance\") ||\n        herb.categories.includes(\"General Wellness\"));\n    const handleHerbClick = (herb) => {\n        setSelectedHerb(herb);\n        setIsModalOpen(true);\n    };\n    const globalHealthIssues = [\n        {\n            id: \"obesity-epidemic\",\n            icon: Scale,\n            title: \"Global Obesity Epidemic\",\n            color: \"text-red-600\",\n            bgColor: \"bg-red-50\",\n            borderColor: \"border-red-200\",\n            definition: \"Obesity has become a global health crisis affecting over 2 billion people worldwide, with rates tripling since 1975.\",\n            statistics: [\n                \"39% of adults worldwide are overweight\",\n                \"13% of adults are obese\",\n                \"340 million children and adolescents are overweight or obese\",\n                \"Obesity-related deaths: 4.7 million annually\"\n            ],\n            rootCauses: [\n                \"Ultra-processed foods high in sugar, salt, and unhealthy fats\",\n                \"Sedentary lifestyles and reduced physical activity\",\n                \"Food marketing and availability of cheap, unhealthy options\",\n                \"Stress and emotional eating patterns\",\n                \"Lack of nutrition education and cooking skills\",\n                \"Food deserts and limited access to fresh produce\"\n            ],\n            healthConsequences: [\n                \"Type 2 Diabetes - 90% of cases linked to obesity\",\n                \"Cardiovascular Disease - leading cause of death globally\",\n                \"Hypertension - affects 1.3 billion people worldwide\",\n                \"Sleep Apnea and respiratory issues\",\n                \"Joint problems and reduced mobility\",\n                \"Mental health issues and depression\"\n            ]\n        },\n        {\n            id: \"metabolic-syndrome\",\n            icon: Heart,\n            title: \"Metabolic Syndrome\",\n            color: \"text-orange-600\",\n            bgColor: \"bg-orange-50\",\n            borderColor: \"border-orange-200\",\n            definition: \"A cluster of conditions that occur together, increasing the risk of heart disease, stroke, and type 2 diabetes.\",\n            components: [\n                \"Abdominal obesity (waist circumference >40 inches men, >35 inches women)\",\n                \"High blood pressure (≥130/85 mmHg)\",\n                \"High blood sugar (≥100 mg/dL fasting)\",\n                \"High triglycerides (≥150 mg/dL)\",\n                \"Low HDL cholesterol (<40 mg/dL men, <50 mg/dL women)\"\n            ],\n            prevalence: \"Affects 25-30% of adults globally\",\n            riskFactors: [\n                \"Poor diet high in refined carbohydrates and sugars\",\n                \"Physical inactivity and sedentary behavior\",\n                \"Chronic stress and poor sleep quality\",\n                \"Genetic predisposition\",\n                \"Age and hormonal changes\"\n            ]\n        },\n        {\n            id: \"inflammation\",\n            icon: AlertTriangle,\n            title: \"Chronic Inflammation\",\n            color: \"text-purple-600\",\n            bgColor: \"bg-purple-50\",\n            borderColor: \"border-purple-200\",\n            definition: \"Low-grade, persistent inflammation that contributes to most chronic diseases and weight gain resistance.\",\n            causes: [\n                \"Processed foods and refined sugars\",\n                \"Trans fats and vegetable oils\",\n                \"Chronic stress and poor sleep\",\n                \"Environmental toxins and pollution\",\n                \"Sedentary lifestyle\",\n                \"Food sensitivities and gut dysbiosis\"\n            ],\n            healthImpact: [\n                \"Insulin resistance and diabetes\",\n                \"Cardiovascular disease\",\n                \"Autoimmune conditions\",\n                \"Cognitive decline and dementia\",\n                \"Cancer risk increase\",\n                \"Accelerated aging\"\n            ]\n        }\n    ];\n    const nutritionEducation = {\n        title: \"Nutrition Fundamentals for Global Health\",\n        principles: [\n            {\n                name: \"Whole Foods First\",\n                description: \"Prioritize unprocessed, nutrient-dense foods from nature\",\n                examples: [\"Fresh vegetables and fruits\", \"Whole grains\", \"Lean proteins\", \"Healthy fats\"],\n                benefits: [\"Higher nutrient density\", \"Better satiety\", \"Stable blood sugar\", \"Reduced inflammation\"]\n            },\n            {\n                name: \"Plant-Based Foundation\",\n                description: \"Build meals around plant foods for optimal health\",\n                examples: [\"Legumes and beans\", \"Nuts and seeds\", \"Colorful vegetables\", \"Whole fruits\"],\n                benefits: [\"Fiber for gut health\", \"Antioxidants\", \"Lower calorie density\", \"Heart health support\"]\n            },\n            {\n                name: \"Mindful Eating\",\n                description: \"Develop awareness of hunger, fullness, and eating patterns\",\n                examples: [\"Eat slowly and chew thoroughly\", \"Listen to hunger cues\", \"Avoid emotional eating\", \"Practice gratitude\"],\n                benefits: [\"Better portion control\", \"Improved digestion\", \"Reduced stress\", \"Sustainable habits\"]\n            },\n            {\n                name: \"Hydration Priority\",\n                description: \"Water is essential for metabolism and overall health\",\n                examples: [\"Drink water before meals\", \"Limit sugary beverages\", \"Include herbal teas\", \"Monitor urine color\"],\n                benefits: [\"Improved metabolism\", \"Better digestion\", \"Reduced cravings\", \"Clearer thinking\"]\n            }\n        ]\n    };\n    const lifestyleStrategies = [\n        {\n            category: \"Physical Activity\",\n            strategies: [\n                \"Start with 10-minute walks daily\",\n                \"Gradually increase to 150 minutes/week\",\n                \"Include strength training 2-3 times/week\",\n                \"Find activities you enjoy\",\n                \"Use stairs instead of elevators\",\n                \"Walk or bike for short trips\"\n            ]\n        },\n        {\n            category: \"Sleep Optimization\",\n            strategies: [\n                \"Aim for 7-9 hours of quality sleep\",\n                \"Establish consistent sleep schedule\",\n                \"Create a relaxing bedtime routine\",\n                \"Limit screen time before bed\",\n                \"Keep bedroom cool and dark\",\n                \"Avoid large meals before sleep\"\n            ]\n        },\n        {\n            category: \"Stress Management\",\n            strategies: [\n                \"Practice daily meditation or deep breathing\",\n                \"Engage in regular physical activity\",\n                \"Spend time in nature\",\n                \"Maintain social connections\",\n                \"Set boundaries and prioritize self-care\",\n                \"Consider therapy or counseling if needed\"\n            ]\n        },\n        {\n            category: \"Environment Optimization\",\n            strategies: [\n                \"Stock kitchen with healthy options\",\n                \"Remove tempting processed foods\",\n                \"Plan meals and snacks ahead\",\n                \"Use smaller plates and bowls\",\n                \"Eat at the table without distractions\",\n                \"Keep healthy snacks visible\"\n            ]\n        }\n    ];\n    const herbalSupport = {\n        metabolism: [\n            {\n                name: \"Green Tea\",\n                benefits: [\"Contains EGCG for fat oxidation\", \"Boosts metabolism\", \"Rich in antioxidants\"],\n                usage: \"2-3 cups daily, best between meals\"\n            },\n            {\n                name: \"Ginger\",\n                benefits: [\"Improves digestion\", \"Reduces inflammation\", \"Supports blood sugar balance\"],\n                usage: \"Fresh ginger tea or 1-2 inches daily\"\n            },\n            {\n                name: \"Cinnamon\",\n                benefits: [\"Helps regulate blood sugar\", \"Reduces insulin resistance\", \"Anti-inflammatory\"],\n                usage: \"1/2-1 tsp daily in food or tea\"\n            }\n        ],\n        appetite: [\n            {\n                name: \"Fiber-Rich Herbs\",\n                benefits: [\"Increase satiety\", \"Slow digestion\", \"Support gut health\"],\n                examples: [\"Psyllium husk\", \"Chia seeds\", \"Flaxseeds\"]\n            },\n            {\n                name: \"Bitter Herbs\",\n                benefits: [\"Stimulate digestive enzymes\", \"Reduce cravings\", \"Support liver function\"],\n                examples: [\"Dandelion root\", \"Burdock root\", \"Gentian\"]\n            }\n        ],\n        stress: [\n            {\n                name: \"Adaptogenic Herbs\",\n                benefits: [\"Help body adapt to stress\", \"Reduce cortisol levels\", \"Support energy balance\"],\n                examples: [\"Ashwagandha\", \"Rhodiola\", \"Holy basil\"]\n            }\n        ]\n    };\n    return (_jsx(\"div\", { className: \"py-16 px-4\", children: _jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsxs(\"div\", { className: \"text-center mb-16\", children: [_jsx(\"div\", { className: \"flex justify-center mb-6\", children: _jsx(\"div\", { className: \"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center\", children: _jsx(Scale, { className: \"h-10 w-10 text-green-600\" }) }) }), _jsx(\"h1\", { className: \"text-4xl font-bold mb-6 text-green-600\", \"data-testid\": \"text-page-title\", children: \"Global Health & Weight Balance\" }), _jsx(\"p\", { className: \"text-xl text-muted-foreground max-w-3xl mx-auto\", children: \"Understanding how eating habits and lifestyle choices impact global health outcomes. Discover sustainable approaches to weight management and overall wellbeing.\" })] }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Major Health Issues Stemming from Eating Habits\" }), _jsx(\"div\", { className: \"grid grid-cols-1 lg:grid-cols-3 gap-8\", children: globalHealthIssues.map((issue) => {\n                                const IconComponent = issue.icon;\n                                return (_jsxs(Card, { className: `p-6 shadow-lg border-2 ${issue.borderColor}`, children: [_jsxs(CardHeader, { className: \"pb-4\", children: [_jsxs(\"div\", { className: \"flex items-center gap-3 mb-4\", children: [_jsx(\"div\", { className: `p-3 rounded-full ${issue.bgColor}`, children: _jsx(IconComponent, { className: `h-6 w-6 ${issue.color}` }) }), _jsx(\"h3\", { className: `text-xl font-bold ${issue.color}`, children: issue.title })] }), _jsx(\"p\", { className: \"text-muted-foreground text-sm\", children: issue.definition })] }), _jsxs(CardContent, { className: \"space-y-4\", children: [issue.statistics && (_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Global Statistics:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: issue.statistics.map((stat, index) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-red-500 rounded-full\" }), stat] }, index))) })] })), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Root Causes:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: issue.rootCauses?.map((cause, index) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-orange-500 rounded-full\" }), cause] }, index))) })] }), issue.healthConsequences && (_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Health Consequences:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: issue.healthConsequences.map((consequence, index) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-purple-500 rounded-full\" }), consequence] }, index))) })] }))] })] }, issue.id));\n                            }) })] }), _jsx(\"div\", { className: \"mb-16\", children: _jsxs(Card, { className: \"p-8 shadow-lg\", children: [_jsx(CardHeader, { className: \"text-center pb-6\", children: _jsxs(\"h2\", { className: \"text-3xl font-bold mb-4 flex items-center justify-center gap-3\", children: [_jsx(Apple, { className: \"h-8 w-8 text-green-600\" }), nutritionEducation.title] }) }), _jsx(CardContent, { children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-8\", children: nutritionEducation.principles.map((principle, index) => (_jsxs(\"div\", { className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"text-xl font-semibold text-green-600 mb-2\", children: principle.name }), _jsx(\"p\", { className: \"text-muted-foreground mb-3\", children: principle.description })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Examples:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1 mb-3\", children: principle.examples.map((example, idx) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-green-500 rounded-full\" }), example] }, idx))) })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Benefits:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: principle.benefits.map((benefit, idx) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-blue-500 rounded-full\" }), benefit] }, idx))) })] })] }, index))) }) })] }) }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Lifestyle Strategies for Sustainable Health\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\", children: lifestyleStrategies.map((strategy, index) => (_jsxs(Card, { className: \"p-6 shadow-lg\", children: [_jsx(CardHeader, { className: \"pb-4\", children: _jsx(\"h3\", { className: \"text-lg font-semibold text-center\", children: strategy.category }) }), _jsx(CardContent, { children: _jsx(\"ul\", { className: \"space-y-2\", children: strategy.strategies.map((item, idx) => (_jsxs(\"li\", { className: \"flex items-start gap-2 text-sm text-muted-foreground\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-green-500 rounded-full mt-2\" }), _jsx(\"span\", { children: item })] }, idx))) }) })] }, index))) })] }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Herbal Support for Weight Balance\" }), _jsxs(Tabs, { defaultValue: \"metabolism\", className: \"w-full\", children: [_jsxs(TabsList, { className: \"grid w-full grid-cols-3\", children: [_jsx(TabsTrigger, { value: \"metabolism\", children: \"Metabolism\" }), _jsx(TabsTrigger, { value: \"appetite\", children: \"Appetite Control\" }), _jsx(TabsTrigger, { value: \"stress\", children: \"Stress Management\" })] }), _jsx(TabsContent, { value: \"metabolism\", className: \"space-y-6\", children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-6\", children: herbalSupport.metabolism.map((herb, index) => (_jsxs(Card, { className: \"p-6\", children: [_jsx(CardHeader, { children: _jsx(\"h3\", { className: \"text-lg font-semibold\", children: herb.name }) }), _jsxs(CardContent, { className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Benefits:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: herb.benefits.map((benefit, idx) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-green-500 rounded-full\" }), benefit] }, idx))) })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Usage:\" }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: herb.usage })] })] })] }, index))) }) }), _jsx(TabsContent, { value: \"appetite\", className: \"space-y-6\", children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-6\", children: herbalSupport.appetite.map((category, index) => (_jsxs(Card, { className: \"p-6\", children: [_jsx(CardHeader, { children: _jsx(\"h3\", { className: \"text-lg font-semibold\", children: category.name }) }), _jsxs(CardContent, { className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Benefits:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: category.benefits.map((benefit, idx) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-blue-500 rounded-full\" }), benefit] }, idx))) })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Examples:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: category.examples.map((example, idx) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-orange-500 rounded-full\" }), example] }, idx))) })] })] })] }, index))) }) }), _jsx(TabsContent, { value: \"stress\", className: \"space-y-6\", children: _jsx(\"div\", { className: \"grid grid-cols-1 gap-6\", children: herbalSupport.stress.map((category, index) => (_jsxs(Card, { className: \"p-6\", children: [_jsx(CardHeader, { children: _jsx(\"h3\", { className: \"text-lg font-semibold\", children: category.name }) }), _jsxs(CardContent, { className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Benefits:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: category.benefits.map((benefit, idx) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-purple-500 rounded-full\" }), benefit] }, idx))) })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Examples:\" }), _jsx(\"ul\", { className: \"text-sm text-muted-foreground space-y-1\", children: category.examples.map((example, idx) => (_jsxs(\"li\", { className: \"flex items-center gap-2\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-green-500 rounded-full\" }), example] }, idx))) })] })] })] }, index))) }) })] })] }), _jsxs(\"div\", { className: \"mb-16\", children: [_jsx(\"h2\", { className: \"text-3xl font-bold mb-8 text-center\", children: \"Herbs for Weight Balance & Metabolism\" }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\", children: weightBalanceHerbs.map((herb) => (_jsx(\"div\", { onClick: () => handleHerbClick(herb), children: _jsx(HerbCard, { herb: herb }) }, herb.id))) })] }), _jsx(\"div\", { className: \"text-center\", children: _jsx(Card, { className: \"p-8 bg-green-50 border-green-200\", children: _jsxs(CardContent, { children: [_jsx(\"h3\", { className: \"text-2xl font-bold text-green-800 mb-4\", children: \"Start Your Health Journey Today\" }), _jsx(\"p\", { className: \"text-green-700 mb-6\", children: \"Remember, sustainable weight management is about creating lasting lifestyle changes, not quick fixes. Focus on nourishing your body with whole foods, staying active, managing stress, and getting adequate sleep.\" }), _jsxs(\"div\", { className: \"flex flex-wrap justify-center gap-4\", children: [_jsxs(Badge, { variant: \"outline\", className: \"text-green-700 border-green-300\", children: [_jsx(Target, { className: \"h-4 w-4 mr-1\" }), \"Set Realistic Goals\"] }), _jsxs(Badge, { variant: \"outline\", className: \"text-green-700 border-green-300\", children: [_jsx(Clock, { className: \"h-4 w-4 mr-1\" }), \"Be Patient\"] }), _jsxs(Badge, { variant: \"outline\", className: \"text-green-700 border-green-300\", children: [_jsx(Heart, { className: \"h-4 w-4 mr-1\" }), \"Prioritize Health\"] }), _jsxs(Badge, { variant: \"outline\", className: \"text-green-700 border-green-300\", children: [_jsx(Leaf, { className: \"h-4 w-4 mr-1\" }), \"Use Natural Support\"] })] })] }) }) }), _jsx(HerbDetailModal, { herb: selectedHerb, isOpen: isModalOpen, onClose: () => {\n                        setIsModalOpen(false);\n                        setSelectedHerb(null);\n                    } })] }) }));\n}\n","size_bytes":20965},"client/src/pages/wellbeing.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Brain, Zap, Moon, Scale } from \"lucide-react\";\nexport default function Wellbeing() {\n    const wellbeingCategories = [\n        {\n            id: \"mental-health\",\n            icon: Brain,\n            title: \"Mental Health & Calm\",\n            color: \"text-primary\",\n            bgColor: \"bg-primary/10\",\n            description: \"Find peace and mental clarity with these calming herbs that have been used for centuries to reduce stress and promote emotional balance.\",\n            herbs: [\n                { name: \"Chamomile\", benefit: \"Gentle relaxation and sleep support\" },\n                { name: \"African Basil\", benefit: \"Mental clarity and stress relief\" },\n                { name: \"African Sage\", benefit: \"Calming aromatherapy benefits\" }\n            ],\n            tips: \"Practice deep breathing, maintain a regular sleep schedule, and create calming bedtime rituals with herbal teas.\",\n            image: \"/attached_assets/generated_images/Chamomile_flowers_blooming_fcc5a2fb.png\"\n        },\n        {\n            id: \"energy\",\n            icon: Zap,\n            title: \"Energy & Vitality\",\n            color: \"text-accent\",\n            bgColor: \"bg-accent/10\",\n            description: \"Boost your natural energy levels and stamina with these powerful herbs that support sustained vitality throughout the day.\",\n            herbs: [\n                { name: \"Moringa\", benefit: \"Complete nutrition and energy boost\" },\n                { name: \"Baobab\", benefit: \"Vitamin C powerhouse for immunity\" },\n                { name: \"Ginger\", benefit: \"Circulation and digestive energy\" }\n            ],\n            tips: \"Stay hydrated, eat nutrient-dense foods, get morning sunlight, and maintain regular exercise for sustained energy.\",\n            image: \"/attached_assets/generated_images/Fresh_moringa_plant_leaves_f8771929.png\"\n        },\n        {\n            id: \"sleep\",\n            icon: Moon,\n            title: \"Sleep & Relaxation\",\n            color: \"text-secondary\",\n            bgColor: \"bg-secondary/10\",\n            description: \"Improve your sleep quality and relaxation with these gentle, soothing herbs that help calm the mind and prepare the body for rest.\",\n            herbs: [\n                { name: \"Chamomile\", benefit: \"Classic bedtime tea for peaceful sleep\" },\n                { name: \"African Sage\", benefit: \"Aromatic relaxation therapy\" },\n                { name: \"Hibiscus\", benefit: \"Evening wind-down ritual\" }\n            ],\n            tips: \"Create a consistent bedtime routine, limit screen time before sleep, and keep your bedroom cool and dark.\",\n            image: \"/attached_assets/generated_images/African_sage_plant_11f1d049.png\"\n        },\n        {\n            id: \"weight\",\n            icon: Scale,\n            title: \"Weight & Balance\",\n            color: \"text-primary\",\n            bgColor: \"bg-primary/10\",\n            description: \"Support healthy weight management and metabolic balance with these herbs that assist digestion, metabolism, and overall wellness.\",\n            herbs: [\n                { name: \"Neem\", benefit: \"Blood sugar balance support\" },\n                { name: \"Hibiscus\", benefit: \"Metabolism and hydration support\" },\n                { name: \"Moringa\", benefit: \"Nutrient density for healthy meals\" }\n            ],\n            tips: \"Focus on whole foods, regular meals, portion control, and combining herbs with balanced nutrition and physical activity.\",\n            image: \"/attached_assets/generated_images/Neem_tree_leaves_8f8d6bbc.png\"\n        }\n    ];\n    return (_jsx(\"div\", { className: \"py-16 px-4\", children: _jsxs(\"div\", { className: \"max-w-6xl mx-auto\", children: [_jsx(\"h1\", { className: \"text-4xl font-bold text-center mb-8\", \"data-testid\": \"text-page-title\", children: \"Wellbeing Categories\" }), _jsx(\"p\", { className: \"text-lg text-muted-foreground text-center mb-12 max-w-2xl mx-auto\", children: \"Explore natural solutions organized by your wellness goals and needs.\" }), _jsx(\"div\", { className: \"space-y-16\", children: wellbeingCategories.map((category, index) => {\n                        const IconComponent = category.icon;\n                        const isReversed = index % 2 === 1;\n                        return (_jsx(\"section\", { id: category.id, children: _jsx(Card, { className: \"p-8 shadow-lg border border-border\", children: _jsxs(\"div\", { className: `grid grid-cols-1 lg:grid-cols-2 gap-8 items-center ${isReversed ? 'lg:grid-flow-col-dense' : ''}`, children: [_jsxs(\"div\", { className: isReversed ? 'lg:col-start-2' : '', children: [_jsxs(\"h2\", { className: `text-3xl font-bold mb-4 ${category.color} flex items-center`, \"data-testid\": `text-category-${category.id}`, children: [_jsx(IconComponent, { className: \"mr-3 h-8 w-8\" }), category.title] }), _jsx(\"p\", { className: \"text-muted-foreground mb-6\", children: category.description }), _jsx(\"div\", { className: \"space-y-4\", children: category.herbs.map((herb, herbIndex) => (_jsxs(\"div\", { className: \"flex items-center space-x-3\", children: [_jsx(Badge, { className: `${category.bgColor} ${category.color} border-0`, children: herb.name }), _jsxs(\"span\", { className: \"text-sm text-muted-foreground\", children: [\"- \", herb.benefit] })] }, herbIndex))) }), _jsxs(\"div\", { className: \"mt-6 p-4 bg-muted rounded-lg\", children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Lifestyle Tips:\" }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: category.tips })] })] }), _jsx(\"div\", { className: isReversed ? 'lg:col-start-1' : '', children: _jsx(\"img\", { src: category.image, alt: `${category.title} lifestyle`, className: \"rounded-lg w-full h-64 object-cover\" }) })] }) }) }, category.id));\n                    }) })] }) }));\n}\n","size_bytes":5889},"client/src/components/herbs/featured-herb.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check } from \"lucide-react\";\nexport default function FeaturedHerb({ herb, onLearnMore }) {\n    return (_jsx(\"div\", { className: \"bg-card rounded-xl p-8 shadow-lg border border-border\", children: _jsxs(\"div\", { className: \"grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\", children: [_jsx(\"div\", { children: _jsx(\"img\", { src: herb.imageUrl || \"/attached_assets/generated_images/Family_enjoying_herbal_tea_747c1dae.png\", alt: herb.name, className: \"rounded-lg w-full h-64 object-cover\" }) }), _jsxs(\"div\", { children: [_jsxs(\"h3\", { className: \"text-3xl font-bold mb-4 text-primary\", \"data-testid\": \"text-featured-herb-name\", children: [herb.name, \" \", herb.emoji] }), herb.localName && (_jsx(\"p\", { className: \"text-lg text-muted-foreground mb-2 italic\", children: herb.localName })), _jsx(\"p\", { className: \"text-lg text-muted-foreground mb-6\", \"data-testid\": \"text-featured-herb-description\", children: herb.description }), _jsx(\"div\", { className: \"space-y-3\", children: herb.benefits.slice(0, 3).map((benefit, index) => (_jsxs(\"div\", { className: \"flex items-center space-x-3\", children: [_jsx(Check, { className: \"h-5 w-5 text-primary\" }), _jsx(\"span\", { children: benefit })] }, index))) }), _jsx(Button, { className: \"mt-6\", onClick: onLearnMore, \"data-testid\": \"button-learn-more-featured\", children: \"Learn More\" })] })] }) }));\n}\n","size_bytes":1465},"client/src/components/herbs/herb-card.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nexport default function HerbCard({ herb, onClick }) {\n    return (_jsxs(Card, { className: \"herb-card cursor-pointer overflow-hidden border border-border\", onClick: onClick, \"data-testid\": `card-herb-${herb.id}`, children: [_jsx(\"div\", { className: \"aspect-video overflow-hidden\", children: _jsx(\"img\", { src: herb.imageUrl || \"/attached_assets/generated_images/Family_enjoying_herbal_tea_747c1dae.png\", alt: herb.name, className: \"w-full h-full object-cover\" }) }), _jsxs(CardContent, { className: \"p-6\", children: [_jsxs(\"div\", { className: \"flex items-center gap-2 mb-2\", children: [_jsxs(\"h3\", { className: \"text-xl font-semibold\", \"data-testid\": `text-herb-name-${herb.id}`, children: [herb.name, \" \", herb.emoji] }), herb.isIndigenous === \"true\" && (_jsx(Badge, { variant: \"secondary\", className: \"text-xs\", children: \"African\" }))] }), herb.localName && (_jsx(\"p\", { className: \"text-sm text-muted-foreground mb-2 italic\", children: herb.localName })), _jsx(\"p\", { className: \"text-muted-foreground text-sm mb-4\", \"data-testid\": `text-herb-description-${herb.id}`, children: herb.description }), _jsxs(\"div\", { className: \"flex flex-wrap gap-1\", children: [herb.categories.slice(0, 3).map((category) => (_jsx(Badge, { variant: \"outline\", className: \"text-xs\", children: category }, category))), herb.categories.length > 3 && (_jsxs(Badge, { variant: \"outline\", className: \"text-xs\", children: [\"+\", herb.categories.length - 3, \" more\"] }))] })] })] }));\n}\n","size_bytes":1632},"client/src/components/herbs/herb-detail-modal.js":{"content":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Check, Clock, Thermometer } from \"lucide-react\";\nimport HerbRecipes from \"./herb-recipes\";\nimport SourcingGuide from \"./sourcing-guide\";\nimport WellnessTracker from \"./wellness-tracker\";\nconst preparationGuides = {\n    \"Tea\": {\n        steps: [\n            \"Boil fresh, filtered water\",\n            \"Add 1-2 tsp dried herb to tea infuser\",\n            \"Pour hot water (not boiling, about 85-90°C)\",\n            \"Steep for 5-10 minutes\",\n            \"Remove infuser and enjoy\"\n        ],\n        timing: \"5-10 minutes\",\n        temperature: \"85-90°C\",\n        tips: \"Use fresh water, avoid reboiling. Steep time affects strength.\"\n    },\n    \"Powder\": {\n        steps: [\n            \"Start with 1/4 to 1/2 tsp powder\",\n            \"Mix into smoothies, yogurt, or water\",\n            \"Store in airtight container away from light\",\n            \"Use within 6 months for best potency\"\n        ],\n        timing: \"Immediate\",\n        temperature: \"Room temperature\",\n        tips: \"Start with small amounts and gradually increase. Mix well to avoid clumping.\"\n    },\n    \"Fresh leaves\": {\n        steps: [\n            \"Wash fresh leaves thoroughly under cold water\",\n            \"Use 2-3 times more than dried herb\",\n            \"Chop finely for better extraction\",\n            \"Add to salads, smoothies, or steep in hot water\"\n        ],\n        timing: \"Immediate\",\n        temperature: \"Cold or room temperature\",\n        tips: \"Use within 2-3 days of harvesting. Store in refrigerator wrapped in damp paper towel.\"\n    },\n    \"Infusion\": {\n        steps: [\n            \"Bring water to a gentle boil\",\n            \"Add herbs and remove from heat\",\n            \"Cover and let steep for 15-30 minutes\",\n            \"Strain through fine mesh sieve\",\n            \"Store in refrigerator for up to 3 days\"\n        ],\n        timing: \"15-30 minutes\",\n        temperature: \"100°C then cool\",\n        tips: \"Longer steeping extracts more beneficial compounds. Use glass or ceramic container.\"\n    },\n    \"Decoction\": {\n        steps: [\n            \"Add herbs to cold water\",\n            \"Bring to boil and simmer for 20-30 minutes\",\n            \"Strain and let cool\",\n            \"Store in refrigerator for up to 3 days\"\n        ],\n        timing: \"20-30 minutes\",\n        temperature: \"100°C simmer\",\n        tips: \"Best for roots, bark, and hard plant parts. Simmer gently to avoid burning.\"\n    },\n    \"Poultice\": {\n        steps: [\n            \"Crush fresh herbs or moisten dried herbs\",\n            \"Apply directly to affected area\",\n            \"Cover with clean cloth or bandage\",\n            \"Leave for 15-30 minutes\",\n            \"Remove and clean area thoroughly\"\n        ],\n        timing: \"15-30 minutes\",\n        temperature: \"Room temperature\",\n        tips: \"Test on small area first. Use fresh herbs when possible for best results.\"\n    },\n    \"Capsules\": {\n        steps: [\n            \"Purchase pre-filled capsules or empty capsules\",\n            \"Fill with powdered herb\",\n            \"Take with water or juice\",\n            \"Store in cool, dry place\"\n        ],\n        timing: \"Immediate\",\n        temperature: \"Room temperature\",\n        tips: \"Follow dosage instructions. Take with food to avoid stomach upset.\"\n    },\n    \"Essential oil\": {\n        steps: [\n            \"Dilute essential oil with carrier oil (1-2 drops per tsp)\",\n            \"Apply to skin or use in diffuser\",\n            \"Never ingest undiluted essential oils\",\n            \"Store in dark glass bottles\"\n        ],\n        timing: \"Immediate\",\n        temperature: \"Room temperature\",\n        tips: \"Always dilute before use. Test on small area first. Keep away from children and pets.\"\n    },\n    \"Tincture\": {\n        steps: [\n            \"Purchase ready-made tincture or make your own\",\n            \"Take recommended dosage with water\",\n            \"Store in dark glass bottle\",\n            \"Keep in cool, dark place\"\n        ],\n        timing: \"Immediate\",\n        temperature: \"Room temperature\",\n        tips: \"Tinctures are concentrated. Follow dosage carefully. Alcohol-based tinctures last longer.\"\n    },\n    \"Extract\": {\n        steps: [\n            \"Purchase standardized extracts\",\n            \"Follow dosage instructions on label\",\n            \"Take with water or juice\",\n            \"Store according to package directions\"\n        ],\n        timing: \"Immediate\",\n        temperature: \"Room temperature\",\n        tips: \"Extracts are highly concentrated. Start with lowest recommended dose.\"\n    }\n};\nexport default function HerbDetailModal({ herb, isOpen, onClose }) {\n    if (!herb)\n        return null;\n    return (_jsx(Dialog, { open: isOpen, onOpenChange: onClose, children: _jsxs(DialogContent, { className: \"max-w-4xl max-h-[90vh] overflow-y-auto\", children: [_jsxs(DialogHeader, { children: [_jsxs(DialogTitle, { className: \"flex items-center gap-3 text-2xl\", children: [_jsx(\"span\", { children: herb.emoji }), _jsx(\"span\", { children: herb.name }), herb.isIndigenous === \"true\" && _jsx(Badge, { variant: \"secondary\", children: \"African\" })] }), herb.localName && _jsx(\"p\", { className: \"text-muted-foreground italic\", children: herb.localName })] }), _jsxs(Tabs, { defaultValue: \"overview\", className: \"w-full\", children: [_jsxs(TabsList, { className: \"grid w-full grid-cols-6\", children: [_jsx(TabsTrigger, { value: \"overview\", children: \"Overview\" }), _jsx(TabsTrigger, { value: \"preparation\", children: \"Preparation\" }), _jsx(TabsTrigger, { value: \"sourcing\", children: \"Where to Find\" }), _jsx(TabsTrigger, { value: \"recipes\", children: \"Recipes\" }), _jsx(TabsTrigger, { value: \"daily\", children: \"Daily Use\" }), _jsx(TabsTrigger, { value: \"tracker\", children: \"Tracker\" })] }), _jsx(TabsContent, { value: \"overview\", className: \"space-y-6\", children: _jsxs(\"div\", { className: \"grid grid-cols-1 lg:grid-cols-2 gap-6\", children: [_jsx(\"img\", { src: herb.imageUrl || \"/attached_assets/generated_images/Family_enjoying_herbal_tea_747c1dae.png\", alt: herb.name, className: \"rounded-lg w-full h-64 object-cover\" }), _jsxs(\"div\", { className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"text-lg font-semibold mb-2\", children: \"Description\" }), _jsx(\"p\", { className: \"text-muted-foreground\", children: herb.description })] }), _jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"text-lg font-semibold mb-2\", children: \"Benefits\" }), _jsx(\"div\", { className: \"space-y-2\", children: herb.benefits.map((benefit, index) => (_jsxs(\"div\", { className: \"flex items-center gap-2\", children: [_jsx(Check, { className: \"h-4 w-4 text-primary\" }), _jsx(\"span\", { className: \"text-sm\", children: benefit })] }, index))) })] })] })] }) }), _jsxs(TabsContent, { value: \"preparation\", className: \"space-y-6\", children: [_jsxs(\"div\", { className: \"mb-6\", children: [_jsxs(\"h3\", { className: \"text-lg font-semibold mb-3\", children: [\"Preparation Methods for \", herb.name] }), _jsx(\"p\", { className: \"text-muted-foreground text-sm\", children: \"Choose the preparation method that best suits your needs and the herb's properties. Each method extracts different compounds and has different applications.\" })] }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: herb.preparationMethods.map((method) => {\n                                        const guide = preparationGuides[method];\n                                        return (_jsxs(Card, { className: \"p-4\", children: [_jsx(CardHeader, { className: \"pb-2\", children: _jsx(CardTitle, { className: \"text-lg\", children: method }) }), _jsx(CardContent, { className: \"space-y-3\", children: guide && (_jsxs(_Fragment, { children: [_jsx(\"ol\", { className: \"list-decimal list-inside space-y-1 text-sm text-muted-foreground\", children: guide.steps.map((step, index) => (_jsx(\"li\", { children: step }, index))) }), _jsxs(\"div\", { className: \"flex gap-4 text-xs text-muted-foreground mb-2\", children: [_jsxs(\"div\", { className: \"flex items-center gap-1\", children: [_jsx(Clock, { className: \"h-3 w-3\" }), guide.timing] }), _jsxs(\"div\", { className: \"flex items-center gap-1\", children: [_jsx(Thermometer, { className: \"h-3 w-3\" }), guide.temperature] })] }), guide.tips && (_jsxs(\"div\", { className: \"text-xs text-blue-600 bg-blue-50 p-2 rounded\", children: [_jsx(\"strong\", { children: \"Tip:\" }), \" \", guide.tips] }))] })) })] }, method));\n                                    }) }), _jsxs(Card, { className: \"bg-green-50 border-green-200\", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: \"text-green-800\", children: \"Preparation Best Practices\" }) }), _jsx(CardContent, { children: _jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-green-700\", children: [_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Quality Considerations\" }), _jsxs(\"ul\", { className: \"space-y-1\", children: [_jsx(\"li\", { children: \"\\u2022 Use fresh, high-quality herbs\" }), _jsx(\"li\", { children: \"\\u2022 Store properly to maintain potency\" }), _jsx(\"li\", { children: \"\\u2022 Use filtered or spring water\" }), _jsx(\"li\", { children: \"\\u2022 Avoid aluminum cookware\" })] })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-semibold mb-2\", children: \"Safety Guidelines\" }), _jsxs(\"ul\", { className: \"space-y-1\", children: [_jsx(\"li\", { children: \"\\u2022 Start with small amounts\" }), _jsx(\"li\", { children: \"\\u2022 Follow recommended dosages\" }), _jsx(\"li\", { children: \"\\u2022 Consult healthcare providers\" }), _jsx(\"li\", { children: \"\\u2022 Monitor for any reactions\" })] })] })] }) })] })] }), _jsx(TabsContent, { value: \"sourcing\", className: \"space-y-6\", children: _jsx(SourcingGuide, { herb: herb }) }), _jsx(TabsContent, { value: \"recipes\", className: \"space-y-6\", children: _jsx(HerbRecipes, { herb: herb }) }), _jsx(TabsContent, { value: \"tracker\", className: \"space-y-6\", children: _jsx(WellnessTracker, { herb: herb }) }), _jsx(TabsContent, { value: \"daily\", className: \"space-y-6\", children: _jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: [_jsxs(Card, { className: \"p-4\", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: \"text-lg\", children: \"Morning Routine\" }) }), _jsx(CardContent, { children: _jsxs(\"ul\", { className: \"list-disc list-inside text-sm text-muted-foreground space-y-1\", children: [_jsxs(\"li\", { children: [\"Add \", herb.name, \" powder to your morning smoothie\"] }), _jsxs(\"li\", { children: [\"Brew \", herb.name, \" tea with breakfast\"] }), _jsxs(\"li\", { children: [\"Mix fresh \", herb.name, \" leaves in yogurt\"] })] }) })] }), _jsxs(Card, { className: \"p-4\", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: \"text-lg\", children: \"Evening Routine\" }) }), _jsx(CardContent, { children: _jsxs(\"ul\", { className: \"list-disc list-inside text-sm text-muted-foreground space-y-1\", children: [_jsxs(\"li\", { children: [\"Enjoy \", herb.name, \" tea before bedtime\"] }), _jsxs(\"li\", { children: [\"Add \", herb.name, \" to your evening bath\"] }), _jsxs(\"li\", { children: [\"Use \", herb.name, \" essential oil for aromatherapy\"] })] }) })] }), _jsxs(Card, { className: \"p-4\", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: \"text-lg\", children: \"Cooking & Meals\" }) }), _jsx(CardContent, { children: _jsxs(\"ul\", { className: \"list-disc list-inside text-sm text-muted-foreground space-y-1\", children: [_jsxs(\"li\", { children: [\"Add fresh \", herb.name, \" to salads\"] }), _jsxs(\"li\", { children: [\"Use \", herb.name, \" powder in soups and stews\"] }), _jsxs(\"li\", { children: [\"Infuse \", herb.name, \" in cooking oils\"] })] }) })] }), _jsxs(Card, { className: \"p-4\", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: \"text-lg\", children: \"Wellness Tracking\" }) }), _jsx(CardContent, { children: _jsxs(\"ul\", { className: \"list-disc list-inside text-sm text-muted-foreground space-y-1\", children: [_jsxs(\"li\", { children: [\"Track how you feel after using \", herb.name] }), _jsx(\"li\", { children: \"Note any changes in energy or sleep\" }), _jsx(\"li\", { children: \"Record dosage and timing\" })] }) })] })] }) })] })] }) }));\n}\n","size_bytes":12482},"client/src/components/herbs/herb-recipes.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Users, Star } from \"lucide-react\";\nconst recipeCategories = {\n    \"Tea\": {\n        icon: \"☕\",\n        description: \"Traditional herbal tea preparations\"\n    },\n    \"Smoothie\": {\n        icon: \"🥤\",\n        description: \"Nutritious smoothie recipes\"\n    },\n    \"Cooking\": {\n        icon: \"🍳\",\n        description: \"Cooking and meal integration\"\n    },\n    \"Wellness\": {\n        icon: \"🌿\",\n        description: \"Wellness and therapeutic uses\"\n    }\n};\nconst getRecipesForHerb = (herbName) => {\n    const recipes = {\n        \"Ginger\": [\n            {\n                title: \"Ginger Lemon Tea\",\n                category: \"Tea\",\n                time: \"10 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh ginger root (1 inch)\", \"Lemon (1/2)\", \"Honey (1 tsp)\", \"Hot water (2 cups)\"],\n                instructions: [\n                    \"Slice 1 inch of fresh ginger thinly\",\n                    \"Boil 2 cups of water\",\n                    \"Add ginger and simmer for 5 minutes\",\n                    \"Strain and add lemon juice and honey\",\n                    \"Let cool slightly before drinking\"\n                ],\n                benefits: \"Digestive support, immune boost, anti-inflammatory\"\n            },\n            {\n                title: \"Ginger Turmeric Golden Milk\",\n                category: \"Wellness\",\n                time: \"15 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh ginger (1 inch)\", \"Turmeric powder (1/2 tsp)\", \"Black pepper (pinch)\", \"Milk (1 cup)\", \"Honey (1 tsp)\"],\n                instructions: [\n                    \"Grate fresh ginger finely\",\n                    \"Heat milk in a saucepan\",\n                    \"Add ginger, turmeric, and black pepper\",\n                    \"Simmer for 10 minutes, stirring occasionally\",\n                    \"Strain and add honey to taste\"\n                ],\n                benefits: \"Anti-inflammatory, immune support, warming\"\n            },\n            {\n                title: \"Ginger Digestive Smoothie\",\n                category: \"Smoothie\",\n                time: \"5 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh ginger (1/2 inch)\", \"Banana (1)\", \"Almond milk (1 cup)\", \"Honey (1 tsp)\", \"Cinnamon (pinch)\"],\n                instructions: [\n                    \"Peel and grate fresh ginger\",\n                    \"Add all ingredients to blender\",\n                    \"Blend until smooth and creamy\",\n                    \"Add ice if desired\"\n                ],\n                benefits: \"Digestive aid, energy boost, anti-nausea\"\n            }\n        ],\n        \"Chamomile\": [\n            {\n                title: \"Calming Chamomile Tea\",\n                category: \"Tea\",\n                time: \"5 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Chamomile flowers (2 tsp)\", \"Hot water (1 cup)\", \"Honey (1 tsp, optional)\"],\n                instructions: [\n                    \"Add 2 tsp chamomile flowers to tea infuser\",\n                    \"Pour hot water (not boiling, about 85°C)\",\n                    \"Steep for 5-7 minutes\",\n                    \"Remove infuser and add honey if desired\",\n                    \"Best enjoyed before bedtime\"\n                ],\n                benefits: \"Sleep support, relaxation, digestive comfort\"\n            },\n            {\n                title: \"Chamomile Lavender Bath Soak\",\n                category: \"Wellness\",\n                time: \"20 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Chamomile flowers (1/4 cup)\", \"Lavender buds (2 tbsp)\", \"Epsom salts (2 cups)\", \"Warm bath water\"],\n                instructions: [\n                    \"Mix chamomile and lavender in a muslin bag\",\n                    \"Fill bath with warm water\",\n                    \"Add Epsom salts and herb bag\",\n                    \"Soak for 15-20 minutes\",\n                    \"Relax and breathe deeply\"\n                ],\n                benefits: \"Stress relief, skin soothing, relaxation\"\n            },\n            {\n                title: \"Chamomile Honey Face Mask\",\n                category: \"Wellness\",\n                time: \"10 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Chamomile tea (2 tbsp)\", \"Raw honey (1 tbsp)\", \"Oatmeal (1 tbsp)\", \"Lemon juice (1/2 tsp)\"],\n                instructions: [\n                    \"Brew strong chamomile tea and let cool\",\n                    \"Mix with honey, oatmeal, and lemon juice\",\n                    \"Apply to clean face\",\n                    \"Leave for 10-15 minutes\",\n                    \"Rinse with warm water\"\n                ],\n                benefits: \"Skin soothing, anti-inflammatory, calming\"\n            }\n        ],\n        \"Moringa\": [\n            {\n                title: \"Moringa Green Smoothie\",\n                category: \"Smoothie\",\n                time: \"5 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Moringa powder (1 tsp)\", \"Spinach (1 cup)\", \"Banana (1)\", \"Apple (1/2)\", \"Coconut water (1 cup)\"],\n                instructions: [\n                    \"Add all ingredients to high-speed blender\",\n                    \"Blend until smooth and creamy\",\n                    \"Add more coconut water if too thick\",\n                    \"Enjoy immediately for best nutrition\"\n                ],\n                benefits: \"Complete nutrition, energy boost, detox support\"\n            },\n            {\n                title: \"Moringa Energy Balls\",\n                category: \"Cooking\",\n                time: \"15 min\",\n                difficulty: \"Medium\",\n                servings: 12,\n                ingredients: [\"Dates (1 cup)\", \"Moringa powder (2 tbsp)\", \"Almonds (1/2 cup)\", \"Coconut flakes (1/4 cup)\", \"Chia seeds (2 tbsp)\"],\n                instructions: [\n                    \"Process dates and almonds in food processor\",\n                    \"Add moringa powder and chia seeds\",\n                    \"Mix until well combined\",\n                    \"Roll into 12 small balls\",\n                    \"Coat with coconut flakes and refrigerate\"\n                ],\n                benefits: \"Sustained energy, nutrient dense, portable snack\"\n            },\n            {\n                title: \"Moringa Oatmeal Bowl\",\n                category: \"Cooking\",\n                time: \"10 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Oats (1/2 cup)\", \"Moringa powder (1 tsp)\", \"Banana (1/2)\", \"Berries (1/4 cup)\", \"Almond milk (1 cup)\"],\n                instructions: [\n                    \"Cook oats with almond milk\",\n                    \"Stir in moringa powder\",\n                    \"Top with sliced banana and berries\",\n                    \"Add honey or maple syrup if desired\"\n                ],\n                benefits: \"Nutrient-rich breakfast, sustained energy, fiber\"\n            }\n        ],\n        \"Hibiscus\": [\n            {\n                title: \"Hibiscus Iced Tea\",\n                category: \"Tea\",\n                time: \"20 min\",\n                difficulty: \"Easy\",\n                servings: 4,\n                ingredients: [\"Hibiscus flowers (1/4 cup)\", \"Water (4 cups)\", \"Honey (2 tbsp)\", \"Lemon (1)\", \"Fresh mint (handful)\"],\n                instructions: [\n                    \"Boil water and add hibiscus flowers\",\n                    \"Steep for 10-15 minutes\",\n                    \"Strain and let cool completely\",\n                    \"Add honey, lemon juice, and mint\",\n                    \"Serve over ice\"\n                ],\n                benefits: \"Heart health, refreshing, rich in antioxidants\"\n            },\n            {\n                title: \"Hibiscus Agua Fresca\",\n                category: \"Wellness\",\n                time: \"25 min\",\n                difficulty: \"Easy\",\n                servings: 6,\n                ingredients: [\"Hibiscus flowers (1/2 cup)\", \"Water (6 cups)\", \"Lime juice (1/4 cup)\", \"Sugar (1/3 cup)\", \"Fresh mint\"],\n                instructions: [\n                    \"Boil water and steep hibiscus for 15 minutes\",\n                    \"Strain and add sugar while hot\",\n                    \"Let cool completely\",\n                    \"Add lime juice and mint\",\n                    \"Serve chilled with ice\"\n                ],\n                benefits: \"Hydrating, vitamin C, cooling properties\"\n            },\n            {\n                title: \"Hibiscus Face Toner\",\n                category: \"Wellness\",\n                time: \"15 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Hibiscus tea (1/2 cup)\", \"Apple cider vinegar (1 tbsp)\", \"Witch hazel (1 tbsp)\", \"Essential oil (2 drops)\"],\n                instructions: [\n                    \"Brew strong hibiscus tea and let cool\",\n                    \"Mix with apple cider vinegar and witch hazel\",\n                    \"Add essential oil of choice\",\n                    \"Store in spray bottle\",\n                    \"Use as facial toner\"\n                ],\n                benefits: \"Skin brightening, astringent, anti-aging\"\n            }\n        ],\n        \"Peppermint\": [\n            {\n                title: \"Peppermint Digestive Tea\",\n                category: \"Tea\",\n                time: \"5 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh peppermint leaves (1/4 cup)\", \"Hot water (1 cup)\", \"Honey (optional)\"],\n                instructions: [\n                    \"Wash fresh peppermint leaves\",\n                    \"Add to tea infuser or directly to cup\",\n                    \"Pour hot water and steep 5 minutes\",\n                    \"Remove leaves and add honey if desired\"\n                ],\n                benefits: \"Digestive support, mental clarity, cooling\"\n            },\n            {\n                title: \"Peppermint Energy Smoothie\",\n                category: \"Smoothie\",\n                time: \"5 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh peppermint (1/4 cup)\", \"Spinach (1 cup)\", \"Banana (1)\", \"Coconut water (1 cup)\", \"Lime (1/2)\"],\n                instructions: [\n                    \"Blend all ingredients until smooth\",\n                    \"Add ice if desired\",\n                    \"Enjoy immediately for refreshing energy\"\n                ],\n                benefits: \"Mental clarity, digestive support, refreshing\"\n            }\n        ],\n        \"Turmeric\": [\n            {\n                title: \"Turmeric Golden Milk\",\n                category: \"Wellness\",\n                time: \"15 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Turmeric powder (1 tsp)\", \"Black pepper (1/4 tsp)\", \"Milk (1 cup)\", \"Honey (1 tsp)\", \"Cinnamon (pinch)\"],\n                instructions: [\n                    \"Heat milk in saucepan\",\n                    \"Add turmeric, black pepper, and cinnamon\",\n                    \"Simmer for 10 minutes, stirring\",\n                    \"Strain and add honey\",\n                    \"Drink warm before bed\"\n                ],\n                benefits: \"Anti-inflammatory, immune support, warming\"\n            },\n            {\n                title: \"Turmeric Face Mask\",\n                category: \"Wellness\",\n                time: \"10 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Turmeric powder (1 tsp)\", \"Honey (1 tbsp)\", \"Yogurt (1 tbsp)\", \"Lemon juice (1/2 tsp)\"],\n                instructions: [\n                    \"Mix all ingredients in bowl\",\n                    \"Apply to clean face\",\n                    \"Leave for 10-15 minutes\",\n                    \"Rinse with warm water\"\n                ],\n                benefits: \"Anti-inflammatory, skin brightening, healing\"\n            }\n        ],\n        \"Neem\": [\n            {\n                title: \"Neem Detox Tea\",\n                category: \"Tea\",\n                time: \"10 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Neem leaves (1 tsp)\", \"Hot water (1 cup)\", \"Honey (1 tsp)\", \"Lemon (1/2)\"],\n                instructions: [\n                    \"Add neem leaves to tea infuser\",\n                    \"Pour hot water and steep 5-7 minutes\",\n                    \"Add honey and lemon to mask bitterness\",\n                    \"Drink on empty stomach\"\n                ],\n                benefits: \"Blood sugar support, detoxification, skin health\"\n            },\n            {\n                title: \"Neem Face Wash\",\n                category: \"Wellness\",\n                time: \"5 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Neem powder (1 tbsp)\", \"Honey (1 tsp)\", \"Water (2 tbsp)\", \"Tea tree oil (2 drops)\"],\n                instructions: [\n                    \"Mix neem powder with water\",\n                    \"Add honey and tea tree oil\",\n                    \"Apply to face in circular motion\",\n                    \"Rinse with warm water\"\n                ],\n                benefits: \"Antimicrobial, skin clearing, anti-acne\"\n            }\n        ],\n        \"Aloe Vera\": [\n            {\n                title: \"Aloe Vera Digestive Shot\",\n                category: \"Wellness\",\n                time: \"5 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh aloe gel (2 tbsp)\", \"Lemon juice (1 tbsp)\", \"Honey (1 tsp)\", \"Water (1/4 cup)\"],\n                instructions: [\n                    \"Extract fresh aloe gel from leaf\",\n                    \"Blend with lemon, honey, and water\",\n                    \"Drink on empty stomach\",\n                    \"Best in morning\"\n                ],\n                benefits: \"Digestive support, skin healing, detoxification\"\n            },\n            {\n                title: \"Aloe Vera Face Gel\",\n                category: \"Wellness\",\n                time: \"10 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh aloe gel (2 tbsp)\", \"Vitamin E oil (5 drops)\", \"Lavender oil (2 drops)\"],\n                instructions: [\n                    \"Extract fresh aloe gel\",\n                    \"Mix with vitamin E and lavender oil\",\n                    \"Apply to clean face\",\n                    \"Leave for 15 minutes, rinse\"\n                ],\n                benefits: \"Skin healing, moisturizing, anti-inflammatory\"\n            }\n        ],\n        \"Soursop\": [\n            {\n                title: \"Soursop Smoothie\",\n                category: \"Smoothie\",\n                time: \"5 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Soursop pulp (1/2 cup)\", \"Coconut milk (1/2 cup)\", \"Honey (1 tbsp)\", \"Lime juice (1 tbsp)\"],\n                instructions: [\n                    \"Remove seeds from soursop pulp\",\n                    \"Blend with coconut milk and lime\",\n                    \"Add honey to taste\",\n                    \"Serve chilled\"\n                ],\n                benefits: \"Antioxidant rich, immune support, digestive aid\"\n            },\n            {\n                title: \"Soursop Tea\",\n                category: \"Tea\",\n                time: \"15 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Soursop leaves (2-3)\", \"Hot water (1 cup)\", \"Honey (optional)\"],\n                instructions: [\n                    \"Wash soursop leaves\",\n                    \"Add to hot water\",\n                    \"Steep for 10-15 minutes\",\n                    \"Strain and add honey if desired\"\n                ],\n                benefits: \"Relaxation, sleep support, immune boost\"\n            }\n        ],\n        \"African Basil\": [\n            {\n                title: \"African Basil Steam Inhalation\",\n                category: \"Wellness\",\n                time: \"10 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh African basil leaves (1/2 cup)\", \"Hot water (4 cups)\", \"Towel\"],\n                instructions: [\n                    \"Boil water in large pot\",\n                    \"Add fresh basil leaves\",\n                    \"Cover head with towel\",\n                    \"Inhale steam for 5-10 minutes\"\n                ],\n                benefits: \"Respiratory support, mental clarity, antimicrobial\"\n            },\n            {\n                title: \"African Basil Tea\",\n                category: \"Tea\",\n                time: \"5 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh African basil (1/4 cup)\", \"Hot water (1 cup)\", \"Honey (1 tsp)\"],\n                instructions: [\n                    \"Wash fresh basil leaves\",\n                    \"Add to hot water\",\n                    \"Steep for 5 minutes\",\n                    \"Strain and add honey\"\n                ],\n                benefits: \"Cold relief, mental clarity, stress reduction\"\n            }\n        ],\n        \"Baobab\": [\n            {\n                title: \"Baobab Energy Smoothie\",\n                category: \"Smoothie\",\n                time: \"5 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Baobab powder (2 tbsp)\", \"Banana (1)\", \"Orange juice (1 cup)\", \"Chia seeds (1 tbsp)\"],\n                instructions: [\n                    \"Blend all ingredients until smooth\",\n                    \"Add ice if desired\",\n                    \"Enjoy immediately\"\n                ],\n                benefits: \"Vitamin C boost, energy, immune support\"\n            },\n            {\n                title: \"Baobab Yogurt Bowl\",\n                category: \"Cooking\",\n                time: \"5 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Greek yogurt (1 cup)\", \"Baobab powder (1 tbsp)\", \"Berries (1/2 cup)\", \"Honey (1 tsp)\"],\n                instructions: [\n                    \"Mix baobab powder with yogurt\",\n                    \"Top with berries and honey\",\n                    \"Sprinkle with granola if desired\"\n                ],\n                benefits: \"Probiotic support, vitamin C, protein\"\n            }\n        ],\n        \"African Sage\": [\n            {\n                title: \"African Sage Steam Therapy\",\n                category: \"Wellness\",\n                time: \"15 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh African sage (1/2 cup)\", \"Hot water (4 cups)\", \"Towel\", \"Bowl\"],\n                instructions: [\n                    \"Boil water in large bowl\",\n                    \"Add fresh sage leaves\",\n                    \"Cover head with towel\",\n                    \"Inhale steam for 10-15 minutes\"\n                ],\n                benefits: \"Respiratory support, relaxation, antimicrobial\"\n            },\n            {\n                title: \"African Sage Tea\",\n                category: \"Tea\",\n                time: \"5 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh African sage (1/4 cup)\", \"Hot water (1 cup)\", \"Honey (optional)\"],\n                instructions: [\n                    \"Wash fresh sage leaves\",\n                    \"Add to hot water\",\n                    \"Steep for 5-7 minutes\",\n                    \"Strain and add honey if desired\"\n                ],\n                benefits: \"Respiratory health, relaxation, steam therapy\"\n            }\n        ],\n        \"Chia Seeds\": [\n            {\n                title: \"Chia Seed Pudding\",\n                category: \"Cooking\",\n                time: \"10 min + overnight\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Chia seeds (1/4 cup)\", \"Almond milk (1 cup)\", \"Honey (1 tbsp)\", \"Vanilla extract (1/2 tsp)\"],\n                instructions: [\n                    \"Mix chia seeds with almond milk\",\n                    \"Add honey and vanilla\",\n                    \"Stir well and refrigerate overnight\",\n                    \"Top with berries before serving\"\n                ],\n                benefits: \"High protein, omega-3, sustained energy\"\n            },\n            {\n                title: \"Chia Energy Smoothie\",\n                category: \"Smoothie\",\n                time: \"5 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Chia seeds (2 tbsp)\", \"Banana (1)\", \"Berries (1/2 cup)\", \"Coconut water (1 cup)\"],\n                instructions: [\n                    \"Soak chia seeds in coconut water for 10 minutes\",\n                    \"Add all ingredients to blender\",\n                    \"Blend until smooth\",\n                    \"Enjoy immediately\"\n                ],\n                benefits: \"Energy boost, hydration, nutrient dense\"\n            }\n        ],\n        \"Urtica massaica\": [\n            {\n                title: \"African Nettle Soup\",\n                category: \"Cooking\",\n                time: \"30 min\",\n                difficulty: \"Medium\",\n                servings: 4,\n                ingredients: [\"Cooked nettle leaves (2 cups)\", \"Onion (1)\", \"Garlic (3 cloves)\", \"Vegetable broth (4 cups)\"],\n                instructions: [\n                    \"Cook nettle leaves thoroughly to remove sting\",\n                    \"Sauté onion and garlic\",\n                    \"Add broth and cooked nettles\",\n                    \"Simmer for 20 minutes\"\n                ],\n                benefits: \"Rich in minerals, joint health, anti-inflammatory\"\n            },\n            {\n                title: \"Nettle Tea\",\n                category: \"Tea\",\n                time: \"10 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Dried nettle leaves (2 tsp)\", \"Hot water (1 cup)\", \"Honey (optional)\"],\n                instructions: [\n                    \"Add dried nettle leaves to hot water\",\n                    \"Steep for 5-7 minutes\",\n                    \"Strain and add honey if desired\",\n                    \"Enjoy warm\"\n                ],\n                benefits: \"Allergy relief, mineral rich, detox support\"\n            }\n        ],\n        \"Persea americana\": [\n            {\n                title: \"Avocado Leaf Tea\",\n                category: \"Tea\",\n                time: \"10 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh avocado leaves (3-4)\", \"Hot water (2 cups)\", \"Honey (optional)\"],\n                instructions: [\n                    \"Wash fresh avocado leaves\",\n                    \"Add to hot water\",\n                    \"Simmer for 5-7 minutes\",\n                    \"Strain and add honey if desired\"\n                ],\n                benefits: \"Heart health, traditional medicine, calming\"\n            },\n            {\n                title: \"Avocado Wellness Bowl\",\n                category: \"Cooking\",\n                time: \"15 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Avocado (1/2)\", \"Quinoa (1/2 cup)\", \"Cherry tomatoes (1/2 cup)\", \"Olive oil (1 tbsp)\"],\n                instructions: [\n                    \"Cook quinoa according to package\",\n                    \"Slice avocado and tomatoes\",\n                    \"Mix with olive oil and seasonings\",\n                    \"Serve as a nutritious bowl\"\n                ],\n                benefits: \"Heart health, healthy fats, nutrient dense\"\n            }\n        ],\n        \"Bidens pilosa\": [\n            {\n                title: \"Black Jack Wound Healing Paste\",\n                category: \"Wellness\",\n                time: \"15 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh Black Jack leaves (1/2 cup)\", \"Honey (1 tbsp)\", \"Coconut oil (1 tsp)\"],\n                instructions: [\n                    \"Crush fresh leaves into paste\",\n                    \"Mix with honey and coconut oil\",\n                    \"Apply to clean wounds\",\n                    \"Cover with clean bandage\"\n                ],\n                benefits: \"Wound healing, antimicrobial, traditional medicine\"\n            },\n            {\n                title: \"Black Jack Tea\",\n                category: \"Tea\",\n                time: \"10 min\",\n                difficulty: \"Easy\",\n                servings: 1,\n                ingredients: [\"Fresh Black Jack leaves (1/4 cup)\", \"Hot water (1 cup)\", \"Honey (optional)\"],\n                instructions: [\n                    \"Wash fresh leaves thoroughly\",\n                    \"Add to hot water\",\n                    \"Steep for 5-7 minutes\",\n                    \"Strain and add honey if desired\"\n                ],\n                benefits: \"Blood sugar support, immune boost, traditional use\"\n            }\n        ]\n    };\n    return recipes[herbName] || [\n        {\n            title: `${herbName} Basic Tea`,\n            category: \"Tea\",\n            time: \"10 min\",\n            difficulty: \"Easy\",\n            servings: 1,\n            ingredients: [`Dried ${herbName} (2 tsp)`, \"Hot water (1 cup)\", \"Honey (1 tsp, optional)\"],\n            instructions: [\n                \"Add 2 tsp of dried herb to tea infuser\",\n                \"Pour hot water (not boiling)\",\n                \"Steep for 5-10 minutes\",\n                \"Remove infuser and add honey if desired\",\n                \"Enjoy while warm\"\n            ],\n            benefits: \"General wellness support, traditional preparation\"\n        },\n        {\n            title: `${herbName} Wellness Smoothie`,\n            category: \"Smoothie\",\n            time: \"5 min\",\n            difficulty: \"Easy\",\n            servings: 1,\n            ingredients: [`${herbName} powder (1 tsp)`, \"Banana (1)\", \"Almond milk (1 cup)\", \"Honey (1 tsp)\"],\n            instructions: [\n                \"Add all ingredients to blender\",\n                \"Blend until smooth and creamy\",\n                \"Add ice if desired\",\n                \"Enjoy immediately\"\n            ],\n            benefits: \"Nutrient boost, easy absorption, daily wellness\"\n        }\n    ];\n};\nexport default function HerbRecipes({ herb }) {\n    const recipes = getRecipesForHerb(herb.name);\n    return (_jsxs(\"div\", { className: \"space-y-6\", children: [_jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"text-xl font-semibold mb-4\", children: \"Recipes & Daily Integration\" }), _jsxs(\"p\", { className: \"text-muted-foreground mb-6\", children: [\"Discover delicious ways to incorporate \", herb.name, \" into your daily routine\"] })] }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-6\", children: recipes.map((recipe, index) => (_jsxs(Card, { className: \"overflow-hidden\", children: [_jsx(CardHeader, { className: \"pb-3\", children: _jsxs(\"div\", { className: \"flex items-start justify-between\", children: [_jsxs(\"div\", { children: [_jsx(CardTitle, { className: \"text-lg\", children: recipe.title }), _jsx(\"div\", { className: \"flex items-center gap-2 mt-2\", children: _jsxs(Badge, { variant: \"outline\", className: \"text-xs\", children: [recipeCategories[recipe.category]?.icon, \" \", recipe.category] }) })] }), _jsxs(\"div\", { className: \"flex items-center gap-2 text-xs text-muted-foreground\", children: [_jsxs(\"div\", { className: \"flex items-center gap-1\", children: [_jsx(Clock, { className: \"h-3 w-3\" }), recipe.time] }), _jsxs(\"div\", { className: \"flex items-center gap-1\", children: [_jsx(Users, { className: \"h-3 w-3\" }), recipe.servings] })] })] }) }), _jsxs(CardContent, { className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-medium text-sm mb-2\", children: \"Ingredients:\" }), _jsx(\"ul\", { className: \"list-disc list-inside text-sm text-muted-foreground space-y-1\", children: recipe.ingredients.map((ingredient, idx) => (_jsx(\"li\", { children: ingredient }, idx))) })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-medium text-sm mb-2\", children: \"Instructions:\" }), _jsx(\"ol\", { className: \"list-decimal list-inside text-sm text-muted-foreground space-y-1\", children: recipe.instructions.map((instruction, idx) => (_jsx(\"li\", { children: instruction }, idx))) })] }), _jsxs(\"div\", { className: \"bg-muted p-3 rounded-lg\", children: [_jsxs(\"div\", { className: \"flex items-center gap-2 mb-1\", children: [_jsx(Star, { className: \"h-4 w-4 text-primary\" }), _jsx(\"span\", { className: \"font-medium text-sm\", children: \"Benefits\" })] }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: recipe.benefits })] })] })] }, index))) }), _jsxs(Card, { className: \"bg-blue-50 border-blue-200\", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: \"text-blue-800\", children: \"Daily Integration Tips\" }) }), _jsx(CardContent, { children: _jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-medium text-blue-800 mb-2\", children: \"Morning Routine\" }), _jsxs(\"ul\", { className: \"list-disc list-inside text-sm text-blue-700 space-y-1\", children: [_jsxs(\"li\", { children: [\"Add \", herb.name, \" to your morning tea or smoothie\"] }), _jsx(\"li\", { children: \"Mix powder into yogurt or oatmeal\" }), _jsx(\"li\", { children: \"Use fresh leaves in breakfast salads\" })] })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-medium text-blue-800 mb-2\", children: \"Evening Routine\" }), _jsxs(\"ul\", { className: \"list-disc list-inside text-sm text-blue-700 space-y-1\", children: [_jsxs(\"li\", { children: [\"Enjoy \", herb.name, \" tea before bedtime\"] }), _jsx(\"li\", { children: \"Add to evening meals for flavor and benefits\" }), _jsx(\"li\", { children: \"Use in relaxing bath preparations\" })] })] })] }) })] })] }));\n}\n","size_bytes":30176},"client/src/components/herbs/herb-search.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nexport default function HerbSearch({ onSearch, placeholder = \"Search herbs by name or condition...\" }) {\n    const [query, setQuery] = useState(\"\");\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSearch(query);\n    };\n    const handleChange = (e) => {\n        const newQuery = e.target.value;\n        setQuery(newQuery);\n        // Debounce search for better UX\n        if (newQuery.length === 0 || newQuery.length >= 2) {\n            onSearch(newQuery);\n        }\n    };\n    return (_jsx(\"form\", { onSubmit: handleSubmit, className: \"max-w-md mx-auto\", children: _jsxs(\"div\", { className: \"relative\", children: [_jsx(Input, { type: \"text\", placeholder: placeholder, value: query, onChange: handleChange, className: \"pl-12\", \"data-testid\": \"input-herb-search\" }), _jsx(Search, { className: \"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground h-5 w-5\" })] }) }));\n}\n","size_bytes":1096},"client/src/components/herbs/sourcing-guide.js":{"content":"import { jsxs as _jsxs, jsx as _jsx } from \"react/jsx-runtime\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MapPin, Globe, ShoppingBag, Leaf, Star, AlertTriangle } from \"lucide-react\";\nconst sourcingOptions = [\n    {\n        id: \"local-markets\",\n        title: \"Local Markets & Farmers\",\n        icon: MapPin,\n        description: \"Traditional markets and local farmers\",\n        pros: [\"Fresh and local\", \"Support local economy\", \"Often organic\", \"Bargain prices\"],\n        cons: [\"Limited selection\", \"Seasonal availability\", \"Quality varies\"],\n        tips: [\n            \"Ask vendors about freshness and origin\",\n            \"Visit early for best selection\",\n            \"Build relationships with regular vendors\",\n            \"Ask about growing methods\"\n        ],\n        bestFor: [\"Fresh leaves\", \"Local varieties\", \"Bulk purchases\", \"Seasonal herbs\"]\n    },\n    {\n        id: \"health-stores\",\n        title: \"Health Food Stores\",\n        icon: ShoppingBag,\n        description: \"Specialized health and wellness stores\",\n        pros: [\"Quality assurance\", \"Organic options\", \"Expert staff\", \"Consistent supply\"],\n        cons: [\"Higher prices\", \"Limited fresh options\", \"May be processed\"],\n        tips: [\n            \"Look for organic certification\",\n            \"Check expiration dates\",\n            \"Ask staff for recommendations\",\n            \"Compare prices between stores\"\n        ],\n        bestFor: [\"Powdered herbs\", \"Capsules\", \"Essential oils\", \"Rare herbs\"]\n    },\n    {\n        id: \"online-retailers\",\n        title: \"Online Retailers\",\n        icon: Globe,\n        description: \"E-commerce platforms and specialty sites\",\n        pros: [\"Wide selection\", \"Convenient\", \"Reviews available\", \"Bulk options\"],\n        cons: [\"Cannot inspect quality\", \"Shipping costs\", \"Delivery time\", \"Return issues\"],\n        tips: [\n            \"Read customer reviews carefully\",\n            \"Check for organic certification\",\n            \"Compare prices across sites\",\n            \"Start with small orders\"\n        ],\n        bestFor: [\"Rare herbs\", \"Bulk orders\", \"Convenience\", \"International varieties\"]\n    },\n    {\n        id: \"grow-own\",\n        title: \"Grow Your Own\",\n        icon: Leaf,\n        description: \"Home gardening and cultivation\",\n        pros: [\"Most rewarding\", \"Cost effective\", \"Fresh supply\", \"Control over quality\"],\n        cons: [\"Requires time\", \"Space needed\", \"Learning curve\", \"Seasonal limitations\"],\n        tips: [\n            \"Start with easy-to-grow herbs\",\n            \"Use containers if space is limited\",\n            \"Research growing requirements\",\n            \"Join local gardening groups\"\n        ],\n        bestFor: [\"Fresh leaves\", \"Continuous supply\", \"Cost savings\", \"Educational\"]\n    }\n];\nconst qualityIndicators = [\n    {\n        title: \"Fresh Herbs\",\n        indicators: [\n            \"Bright, vibrant color\",\n            \"Firm texture\",\n            \"Strong aroma\",\n            \"No wilting or browning\"\n        ]\n    },\n    {\n        title: \"Dried Herbs\",\n        indicators: [\n            \"Intact, whole pieces\",\n            \"Strong fragrance\",\n            \"No mold or moisture\",\n            \"Recent harvest date\"\n        ]\n    },\n    {\n        title: \"Powdered Herbs\",\n        indicators: [\n            \"Fine, consistent texture\",\n            \"Rich color\",\n            \"Strong aroma\",\n            \"Sealed packaging\"\n        ]\n    }\n];\nexport default function SourcingGuide({ herb }) {\n    return (_jsxs(\"div\", { className: \"space-y-6\", children: [_jsxs(\"div\", { children: [_jsxs(\"h3\", { className: \"text-xl font-semibold mb-4\", children: [\"Where to Find \", herb.name] }), _jsxs(\"p\", { className: \"text-muted-foreground mb-6\", children: [\"Discover the best places to source \", herb.name, \" and how to ensure quality\"] })] }), _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-6\", children: sourcingOptions.map((option) => {\n                    const IconComponent = option.icon;\n                    return (_jsxs(Card, { className: \"overflow-hidden\", children: [_jsxs(CardHeader, { className: \"pb-3\", children: [_jsxs(CardTitle, { className: \"flex items-center gap-2 text-lg\", children: [_jsx(IconComponent, { className: \"h-5 w-5\" }), option.title] }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: option.description })] }), _jsxs(CardContent, { className: \"space-y-4\", children: [_jsxs(\"div\", { className: \"grid grid-cols-1 gap-3\", children: [_jsxs(\"div\", { children: [_jsxs(\"h4\", { className: \"font-medium text-sm mb-2 flex items-center gap-1\", children: [_jsx(Star, { className: \"h-4 w-4 text-green-600\" }), \"Pros\"] }), _jsx(\"ul\", { className: \"list-disc list-inside text-sm text-muted-foreground space-y-1\", children: option.pros.map((pro, index) => (_jsx(\"li\", { children: pro }, index))) })] }), _jsxs(\"div\", { children: [_jsxs(\"h4\", { className: \"font-medium text-sm mb-2 flex items-center gap-1\", children: [_jsx(AlertTriangle, { className: \"h-4 w-4 text-orange-600\" }), \"Cons\"] }), _jsx(\"ul\", { className: \"list-disc list-inside text-sm text-muted-foreground space-y-1\", children: option.cons.map((con, index) => (_jsx(\"li\", { children: con }, index))) })] })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-medium text-sm mb-2\", children: \"Tips:\" }), _jsx(\"ul\", { className: \"list-disc list-inside text-sm text-muted-foreground space-y-1\", children: option.tips.map((tip, index) => (_jsx(\"li\", { children: tip }, index))) })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-medium text-sm mb-2\", children: \"Best for:\" }), _jsx(\"div\", { className: \"flex flex-wrap gap-1\", children: option.bestFor.map((item) => (_jsx(Badge, { variant: \"secondary\", className: \"text-xs\", children: item }, item))) })] })] })] }, option.id));\n                }) }), _jsxs(Card, { className: \"bg-green-50 border-green-200\", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: \"text-green-800\", children: \"Quality Indicators\" }) }), _jsx(CardContent, { children: _jsx(\"div\", { className: \"grid grid-cols-1 md:grid-cols-3 gap-4\", children: qualityIndicators.map((category) => (_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-medium text-green-800 mb-2\", children: category.title }), _jsx(\"ul\", { className: \"list-disc list-inside text-sm text-green-700 space-y-1\", children: category.indicators.map((indicator, index) => (_jsx(\"li\", { children: indicator }, index))) })] }, category.title))) }) })] }), herb.region && (_jsxs(Card, { className: \"bg-blue-50 border-blue-200\", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: \"text-blue-800\", children: \"Regional Information\" }) }), _jsx(CardContent, { children: _jsxs(\"p\", { className: \"text-blue-700 text-sm\", children: [herb.name, \" is native to \", herb.region, \".\", herb.isIndigenous === \"true\"\n                                    ? \" This indigenous herb has been used traditionally in local communities for generations. Look for it in local markets and traditional medicine shops.\"\n                                    : \" This herb has been adopted globally and is now widely available in most regions.\"] }) })] })), _jsxs(Card, { className: \"bg-yellow-50 border-yellow-200\", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: \"text-yellow-800\", children: \"Safety Reminders\" }) }), _jsx(CardContent, { children: _jsxs(\"ul\", { className: \"list-disc list-inside text-sm text-yellow-700 space-y-1\", children: [_jsx(\"li\", { children: \"Always verify the source and quality of herbs\" }), _jsx(\"li\", { children: \"Check for organic certification when possible\" }), _jsx(\"li\", { children: \"Avoid herbs that look moldy, discolored, or have unusual odors\" }), _jsx(\"li\", { children: \"Store herbs properly to maintain freshness and potency\" }), _jsx(\"li\", { children: \"Consult with healthcare providers about herb interactions\" })] }) })] })] }));\n}\n","size_bytes":7952},"client/src/components/herbs/wellness-tracker.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar, Plus, CheckCircle, Clock, TrendingUp, Trash2 } from \"lucide-react\";\nconst wellnessMetrics = [\n    {\n        id: \"energy\",\n        label: \"Energy Level\",\n        options: [\"Very Low\", \"Low\", \"Normal\", \"High\", \"Very High\"]\n    },\n    {\n        id: \"sleep\",\n        label: \"Sleep Quality\",\n        options: [\"Poor\", \"Fair\", \"Good\", \"Very Good\", \"Excellent\"]\n    },\n    {\n        id: \"mood\",\n        label: \"Mood\",\n        options: [\"Very Low\", \"Low\", \"Normal\", \"Good\", \"Excellent\"]\n    },\n    {\n        id: \"digestion\",\n        label: \"Digestion\",\n        options: [\"Poor\", \"Fair\", \"Good\", \"Very Good\", \"Excellent\"]\n    }\n];\nexport default function WellnessTracker({ herb }) {\n    const [entries, setEntries] = useState(() => {\n        const saved = localStorage.getItem(`wellness-tracker-${herb.id}`);\n        return saved ? JSON.parse(saved) : [];\n    });\n    const [showForm, setShowForm] = useState(false);\n    const [newEntry, setNewEntry] = useState({\n        dosage: \"\",\n        method: \"\",\n        effects: \"\",\n        notes: \"\"\n    });\n    const [quickAssessment, setQuickAssessment] = useState({\n        energy: \"\",\n        sleep: \"\",\n        mood: \"\",\n        digestion: \"\"\n    });\n    const addEntry = () => {\n        const entry = {\n            id: Date.now().toString(),\n            date: new Date().toISOString().split('T')[0],\n            ...newEntry\n        };\n        const updatedEntries = [entry, ...entries];\n        setEntries(updatedEntries);\n        localStorage.setItem(`wellness-tracker-${herb.id}`, JSON.stringify(updatedEntries));\n        setNewEntry({ dosage: \"\", method: \"\", effects: \"\", notes: \"\" });\n        setShowForm(false);\n    };\n    const updateQuickAssessment = (metric, value) => {\n        setQuickAssessment(prev => ({\n            ...prev,\n            [metric]: value\n        }));\n    };\n    const saveQuickAssessment = () => {\n        const effects = Object.entries(quickAssessment)\n            .filter(([_, value]) => value)\n            .map(([key, value]) => `${key}: ${value}`)\n            .join(', ');\n        const entry = {\n            id: Date.now().toString(),\n            date: new Date().toISOString().split('T')[0],\n            dosage: \"Quick Assessment\",\n            method: \"Daily Check-in\",\n            effects: effects || \"No specific effects noted\",\n            notes: \"Quick wellness assessment completed\"\n        };\n        const updatedEntries = [entry, ...entries];\n        setEntries(updatedEntries);\n        localStorage.setItem(`wellness-tracker-${herb.id}`, JSON.stringify(updatedEntries));\n        setQuickAssessment({ energy: \"\", sleep: \"\", mood: \"\", digestion: \"\" });\n    };\n    const getRecentEntries = () => entries.slice(0, 5);\n    const deleteEntry = (entryId) => {\n        const updatedEntries = entries.filter(entry => entry.id !== entryId);\n        setEntries(updatedEntries);\n        localStorage.setItem(`wellness-tracker-${herb.id}`, JSON.stringify(updatedEntries));\n    };\n    return (_jsxs(\"div\", { className: \"space-y-6\", children: [_jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"text-xl font-semibold mb-4\", children: \"Wellness Tracker\" }), _jsxs(\"p\", { className: \"text-muted-foreground mb-6\", children: [\"Track your \", herb.name, \" usage and monitor how it affects your wellbeing\"] })] }), _jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-6\", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(Plus, { className: \"h-5 w-5\" }), \"Add New Entry\"] }) }), _jsx(CardContent, { children: !showForm ? (_jsx(Button, { onClick: () => setShowForm(true), className: \"w-full\", children: \"Track Today's Usage\" })) : (_jsxs(\"div\", { className: \"space-y-4\", children: [_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium mb-2 block\", children: \"Dosage\" }), _jsx(\"input\", { type: \"text\", placeholder: \"e.g., 1 tsp powder, 1 cup tea\", className: \"w-full p-2 border rounded-md\", value: newEntry.dosage, onChange: (e) => setNewEntry({ ...newEntry, dosage: e.target.value }) })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium mb-2 block\", children: \"Method\" }), _jsxs(\"select\", { className: \"w-full p-2 border rounded-md\", value: newEntry.method, onChange: (e) => setNewEntry({ ...newEntry, method: e.target.value }), children: [_jsx(\"option\", { value: \"\", children: \"Select method\" }), herb.preparationMethods.map((method) => (_jsx(\"option\", { value: method, children: method }, method)))] })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium mb-2 block\", children: \"Effects\" }), _jsx(Textarea, { placeholder: \"How did you feel after using this herb?\", value: newEntry.effects, onChange: (e) => setNewEntry({ ...newEntry, effects: e.target.value }) })] }), _jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium mb-2 block\", children: \"Notes\" }), _jsx(Textarea, { placeholder: \"Any additional observations or notes\", value: newEntry.notes, onChange: (e) => setNewEntry({ ...newEntry, notes: e.target.value }) })] }), _jsxs(\"div\", { className: \"flex gap-2\", children: [_jsx(Button, { onClick: addEntry, className: \"flex-1\", children: \"Save Entry\" }), _jsx(Button, { variant: \"outline\", onClick: () => setShowForm(false), className: \"flex-1\", children: \"Cancel\" })] })] })) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(TrendingUp, { className: \"h-5 w-5\" }), \"Quick Assessment\"] }) }), _jsx(CardContent, { children: _jsxs(\"div\", { className: \"space-y-4\", children: [wellnessMetrics.map((metric) => (_jsxs(\"div\", { children: [_jsx(\"label\", { className: \"text-sm font-medium mb-2 block\", children: metric.label }), _jsx(\"div\", { className: \"flex gap-2\", children: metric.options.map((option) => (_jsx(Button, { variant: quickAssessment[metric.id] === option ? \"default\" : \"outline\", size: \"sm\", className: \"flex-1 text-xs\", onClick: () => updateQuickAssessment(metric.id, option), children: option }, option))) })] }, metric.id))), _jsx(Button, { onClick: saveQuickAssessment, className: \"w-full mt-4\", disabled: !Object.values(quickAssessment).some(value => value), children: \"Save Assessment\" })] }) })] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: \"flex items-center gap-2\", children: [_jsx(Calendar, { className: \"h-5 w-5\" }), \"Recent Entries\"] }) }), _jsx(CardContent, { children: getRecentEntries().length === 0 ? (_jsxs(\"div\", { className: \"text-center py-8\", children: [_jsx(Clock, { className: \"h-12 w-12 text-muted-foreground mx-auto mb-4\" }), _jsxs(\"p\", { className: \"text-muted-foreground\", children: [\"No entries yet. Start tracking your \", herb.name, \" usage!\"] })] })) : (_jsx(\"div\", { className: \"space-y-4\", children: getRecentEntries().map((entry) => (_jsxs(\"div\", { className: \"border rounded-lg p-4\", children: [_jsxs(\"div\", { className: \"flex items-center justify-between mb-2\", children: [_jsxs(\"div\", { className: \"flex items-center gap-2\", children: [_jsx(CheckCircle, { className: \"h-4 w-4 text-green-600\" }), _jsx(\"span\", { className: \"font-medium\", children: entry.date })] }), _jsxs(\"div\", { className: \"flex items-center gap-2\", children: [_jsx(Badge, { variant: \"outline\", children: entry.method }), _jsx(Button, { variant: \"ghost\", size: \"sm\", onClick: () => deleteEntry(entry.id), className: \"h-6 w-6 p-0 text-red-500 hover:text-red-700\", children: _jsx(Trash2, { className: \"h-3 w-3\" }) })] })] }), _jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\", children: [_jsxs(\"div\", { children: [_jsx(\"span\", { className: \"font-medium\", children: \"Dosage:\" }), \" \", entry.dosage] }), entry.effects && (_jsxs(\"div\", { children: [_jsx(\"span\", { className: \"font-medium\", children: \"Effects:\" }), \" \", entry.effects] }))] }), entry.notes && (_jsxs(\"div\", { className: \"mt-2 text-sm text-muted-foreground\", children: [_jsx(\"span\", { className: \"font-medium\", children: \"Notes:\" }), \" \", entry.notes] }))] }, entry.id))) })) })] }), _jsxs(Card, { className: \"bg-blue-50 border-blue-200\", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: \"text-blue-800\", children: \"Tracking Tips\" }) }), _jsx(CardContent, { children: _jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-2 gap-4\", children: [_jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-medium text-blue-800 mb-2\", children: \"What to Track\" }), _jsxs(\"ul\", { className: \"list-disc list-inside text-sm text-blue-700 space-y-1\", children: [_jsx(\"li\", { children: \"Dosage and frequency\" }), _jsx(\"li\", { children: \"Preparation method\" }), _jsx(\"li\", { children: \"How you feel before and after\" }), _jsx(\"li\", { children: \"Any side effects or reactions\" }), _jsx(\"li\", { children: \"Changes in sleep, energy, or mood\" })] })] }), _jsxs(\"div\", { children: [_jsx(\"h4\", { className: \"font-medium text-blue-800 mb-2\", children: \"Best Practices\" }), _jsxs(\"ul\", { className: \"list-disc list-inside text-sm text-blue-700 space-y-1\", children: [_jsx(\"li\", { children: \"Track consistently for at least 2 weeks\" }), _jsx(\"li\", { children: \"Note the time of day you take herbs\" }), _jsx(\"li\", { children: \"Record any other supplements or medications\" }), _jsx(\"li\", { children: \"Share your findings with healthcare providers\" }), _jsx(\"li\", { children: \"Listen to your body's signals\" })] })] })] }) })] })] }));\n}\n","size_bytes":9774},"client/src/components/layout/footer.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useLocation } from \"wouter\";\nimport { Leaf } from \"lucide-react\";\nexport default function Footer() {\n    const [location, setLocation] = useLocation();\n    const handleNavigation = (path) => {\n        setLocation(path);\n    };\n    return (_jsx(\"footer\", { className: \"bg-card border-t border-border mt-auto\", children: _jsxs(\"div\", { className: \"max-w-6xl mx-auto px-4 py-12 pt-[10px] pb-[10px]\", children: [_jsxs(\"div\", { className: \"grid grid-cols-1 md:grid-cols-4 gap-8\", children: [_jsxs(\"div\", { className: \"col-span-1 md:col-span-2\", children: [_jsxs(\"div\", { className: \"flex items-center space-x-2 mb-4\", children: [_jsx(Leaf, { className: \"text-primary text-2xl\" }), _jsx(\"span\", { className: \"text-xl font-bold text-primary\", children: \"Herbal Care Hub\" })] }), _jsx(\"p\", { className: \"text-muted-foreground mb-4\", children: \"Empowering natural wellness through traditional herbal wisdom and modern safety practices.\" }), _jsx(\"p\", { className: \"text-sm text-muted-foreground\", children: \"Making herbal knowledge simple, safe, and accessible for everyone.\" })] }), _jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"font-semibold mb-4\", children: \"Quick Links\" }), _jsxs(\"ul\", { className: \"space-y-2 text-sm\", children: [_jsx(\"li\", { children: _jsx(\"button\", { onClick: () => handleNavigation(\"/herbs\"), className: \"text-muted-foreground hover:text-primary transition-colors text-left w-full\", \"data-testid\": \"footer-link-herbs\", children: \"Herbs Library\" }) }), _jsx(\"li\", { children: _jsx(\"button\", { onClick: () => handleNavigation(\"/wellbeing\"), className: \"text-muted-foreground hover:text-primary transition-colors text-left w-full\", \"data-testid\": \"footer-link-wellbeing\", children: \"Wellbeing\" }) }), _jsx(\"li\", { children: _jsx(\"button\", { onClick: () => handleNavigation(\"/ailments\"), className: \"text-muted-foreground hover:text-primary transition-colors text-left w-full\", \"data-testid\": \"footer-link-ailments\", children: \"Ailments\" }) }), _jsx(\"li\", { children: _jsx(\"button\", { onClick: () => handleNavigation(\"/videos\"), className: \"text-muted-foreground hover:text-primary transition-colors text-left w-full\", \"data-testid\": \"footer-link-videos\", children: \"Videos\" }) }), _jsx(\"li\", { children: _jsx(\"button\", { onClick: () => handleNavigation(\"/community\"), className: \"text-muted-foreground hover:text-primary transition-colors text-left w-full\", \"data-testid\": \"footer-link-community\", children: \"Community\" }) })] })] }), _jsxs(\"div\", { children: [_jsx(\"h3\", { className: \"font-semibold mb-4\", children: \"Resources\" }), _jsxs(\"ul\", { className: \"space-y-2 text-sm\", children: [_jsx(\"li\", { children: _jsx(\"button\", { onClick: () => handleNavigation(\"/about\"), className: \"text-muted-foreground hover:text-primary transition-colors text-left w-full\", \"data-testid\": \"footer-link-about\", children: \"About Us\" }) }), _jsx(\"li\", { children: _jsx(\"button\", { onClick: () => handleNavigation(\"/contact\"), className: \"text-muted-foreground hover:text-primary transition-colors text-left w-full\", \"data-testid\": \"footer-link-contact\", children: \"Contact\" }) }), _jsx(\"li\", { children: _jsx(\"button\", { onClick: () => handleNavigation(\"/safety-guidelines\"), className: \"text-muted-foreground hover:text-primary transition-colors text-left w-full\", \"data-testid\": \"footer-link-safety-guidelines\", children: \"Safety Guidelines\" }) }), _jsx(\"li\", { children: _jsx(\"button\", { onClick: () => handleNavigation(\"/privacy-policy\"), className: \"text-muted-foreground hover:text-primary transition-colors text-left w-full\", \"data-testid\": \"footer-link-privacy-policy\", children: \"Privacy Policy\" }) })] })] })] }), _jsx(\"div\", { className: \"border-t border-border mt-8 pt-8\", children: _jsxs(\"div\", { className: \"flex flex-col md:flex-row justify-between items-center\", children: [_jsx(\"p\", { className: \"text-sm text-muted-foreground mb-4 md:mb-0\", children: \"\\u00A9 2024 Herbal Care Hub. All rights reserved.\" }), _jsx(\"div\", { className: \"bg-yellow-50 border border-yellow-200 px-4 py-2 rounded-lg\", children: _jsx(\"p\", { className: \"text-xs text-yellow-800 font-medium\", children: \"Educational content only - Not medical advice. Consult healthcare providers for medical concerns.\" }) })] }) })] }) }));\n}\n","size_bytes":4296},"client/src/components/layout/navigation.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, X, Leaf, ChevronDown, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, } from \"@/components/ui/dropdown-menu\";\nexport default function Navigation() {\n    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [showSearchResults, setShowSearchResults] = useState(false);\n    const [location] = useLocation();\n    const searchRef = useRef(null);\n    // Close search results when clicking outside\n    useEffect(() => {\n        function handleClickOutside(event) {\n            if (searchRef.current && !searchRef.current.contains(event.target)) {\n                setShowSearchResults(false);\n            }\n        }\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, []);\n    const { data: herbs } = useQuery({\n        queryKey: [\"/api/herbs\"],\n    });\n    // Search functionality\n    const filteredHerbs = herbs?.filter(herb => herb.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        herb.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        herb.benefits.some(benefit => benefit.toLowerCase().includes(searchQuery.toLowerCase()))) || [];\n    const navItems = [\n        { path: \"/\", label: \"Home\" },\n        { path: \"/herbs\", label: \"Herbs Library\" },\n        { path: \"/wellbeing\", label: \"Wellbeing\", hasDropdown: true },\n        { path: \"/ailments\", label: \"Ailments\" },\n        { path: \"/videos\", label: \"Videos\" },\n        { path: \"/community\", label: \"Community\" },\n        { path: \"/about\", label: \"About\" },\n        { path: \"/contact\", label: \"Contact\" },\n    ];\n    const wellbeingCategories = [\n        { path: \"/mental-health\", label: \"Mental Health\" },\n        { path: \"/energy\", label: \"Energy\" },\n        { path: \"/sleep\", label: \"Sleep\" },\n        { path: \"/weight-balance\", label: \"Weight Balance\" },\n        { path: \"/general-wellness\", label: \"General Wellness\" },\n    ];\n    const isActive = (path) => {\n        if (path === \"/\") {\n            return location === \"/\";\n        }\n        return location.startsWith(path);\n    };\n    return (_jsx(\"nav\", { className: \"bg-card border-b border-border sticky top-0 z-50 shadow-sm\", children: _jsxs(\"div\", { className: \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\", children: [_jsxs(\"div\", { className: \"flex justify-between items-center h-16\", children: [_jsxs(Link, { href: \"/\", className: \"flex items-center space-x-2\", \"data-testid\": \"link-home\", children: [_jsx(Leaf, { className: \"text-primary text-2xl\" }), _jsx(\"span\", { className: \"text-xl font-bold text-primary\", children: \"Herbal Care Hub\" })] }), _jsx(\"div\", { className: \"hidden md:flex flex-1 max-w-md mx-8 relative\", ref: searchRef, children: _jsxs(\"div\", { className: \"relative w-full\", children: [_jsx(Search, { className: \"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" }), _jsx(Input, { type: \"text\", placeholder: \"Search herbs, benefits, health concerns...\", value: searchQuery, onChange: (e) => {\n                                            setSearchQuery(e.target.value);\n                                            setShowSearchResults(e.target.value.length > 0);\n                                        }, onFocus: () => setShowSearchResults(searchQuery.length > 0), className: \"pl-10 pr-4\" }), showSearchResults && searchQuery && (_jsxs(\"div\", { className: \"absolute top-full left-0 right-0 mt-1 bg-card rounded-lg shadow-lg border border-border max-h-64 overflow-y-auto z-50\", children: [filteredHerbs.slice(0, 5).map((herb) => (_jsx(Link, { href: `/herbs#${herb.id}`, children: _jsx(\"div\", { className: \"p-3 hover:bg-accent/10 cursor-pointer border-b border-border last:border-b-0\", onClick: () => {\n                                                        setSearchQuery(\"\");\n                                                        setShowSearchResults(false);\n                                                    }, children: _jsxs(\"div\", { className: \"flex items-center gap-3\", children: [_jsx(\"span\", { className: \"text-xl\", children: herb.emoji }), _jsxs(\"div\", { className: \"flex-1 min-w-0\", children: [_jsx(\"h3\", { className: \"font-semibold text-foreground truncate\", children: herb.name }), _jsx(\"p\", { className: \"text-sm text-muted-foreground line-clamp-1\", children: herb.description }), _jsx(\"div\", { className: \"flex flex-wrap gap-1 mt-1\", children: herb.benefits.slice(0, 2).map((benefit, index) => (_jsx(Badge, { variant: \"secondary\", className: \"text-xs\", children: benefit }, index))) })] })] }) }) }, herb.id))), filteredHerbs.length > 5 && (_jsxs(\"div\", { className: \"p-3 text-center text-sm text-muted-foreground border-t border-border\", children: [\"And \", filteredHerbs.length - 5, \" more herbs...\"] })), filteredHerbs.length === 0 && (_jsxs(\"div\", { className: \"p-3 text-center text-sm text-muted-foreground\", children: [\"No herbs found matching \\\"\", searchQuery, \"\\\"\"] }))] }))] }) }), _jsx(\"div\", { className: \"hidden md:flex space-x-8\", children: navItems.map((item) => (item.hasDropdown ? (_jsxs(DropdownMenu, { children: [_jsx(DropdownMenuTrigger, { asChild: true, children: _jsxs(Button, { variant: \"ghost\", className: `nav-link font-medium ${isActive(item.path) ? \"active\" : \"\"}`, \"data-testid\": `link-${item.label.toLowerCase().replace(\" \", \"-\")}`, children: [item.label, _jsx(ChevronDown, { className: \"ml-1 h-4 w-4\" })] }) }), _jsxs(DropdownMenuContent, { align: \"start\", children: [_jsx(DropdownMenuItem, { asChild: true, children: _jsx(Link, { href: item.path, children: \"Overview\" }) }), wellbeingCategories.map((category) => (_jsx(DropdownMenuItem, { asChild: true, children: _jsx(Link, { href: category.path, children: category.label }) }, category.path)))] })] }, item.path)) : (_jsx(Link, { href: item.path, className: `nav-link font-medium ${isActive(item.path) ? \"active\" : \"\"}`, \"data-testid\": `link-${item.label.toLowerCase().replace(\" \", \"-\")}`, children: item.label }, item.path)))) }), _jsx(Button, { variant: \"ghost\", size: \"icon\", className: \"md:hidden\", onClick: () => setIsMobileMenuOpen(!isMobileMenuOpen), \"data-testid\": \"button-mobile-menu\", children: isMobileMenuOpen ? _jsx(X, { className: \"h-6 w-6\" }) : _jsx(Menu, { className: \"h-6 w-6\" }) })] }), isMobileMenuOpen && (_jsx(\"div\", { className: \"md:hidden\", children: _jsxs(\"div\", { className: \"px-2 pt-2 pb-3 space-y-1 bg-card border-t border-border\", children: [_jsxs(\"div\", { className: \"relative mb-4\", ref: searchRef, children: [_jsx(Search, { className: \"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" }), _jsx(Input, { type: \"text\", placeholder: \"Search herbs...\", value: searchQuery, onChange: (e) => {\n                                            setSearchQuery(e.target.value);\n                                            setShowSearchResults(e.target.value.length > 0);\n                                        }, onFocus: () => setShowSearchResults(searchQuery.length > 0), className: \"pl-10 pr-4\" }), showSearchResults && searchQuery && (_jsxs(\"div\", { className: \"absolute top-full left-0 right-0 mt-1 bg-card rounded-lg shadow-lg border border-border max-h-48 overflow-y-auto z-50\", children: [filteredHerbs.slice(0, 3).map((herb) => (_jsx(Link, { href: `/herbs#${herb.id}`, children: _jsx(\"div\", { className: \"p-3 hover:bg-accent/10 cursor-pointer border-b border-border last:border-b-0\", onClick: () => {\n                                                        setSearchQuery(\"\");\n                                                        setShowSearchResults(false);\n                                                        setIsMobileMenuOpen(false);\n                                                    }, children: _jsxs(\"div\", { className: \"flex items-center gap-3\", children: [_jsx(\"span\", { className: \"text-lg\", children: herb.emoji }), _jsxs(\"div\", { className: \"flex-1 min-w-0\", children: [_jsx(\"h3\", { className: \"font-semibold text-foreground text-sm\", children: herb.name }), _jsx(\"p\", { className: \"text-xs text-muted-foreground line-clamp-1\", children: herb.description })] })] }) }) }, herb.id))), filteredHerbs.length === 0 && (_jsx(\"div\", { className: \"p-3 text-center text-sm text-muted-foreground\", children: \"No herbs found\" }))] }))] }), navItems.map((item) => (_jsx(Link, { href: item.path, className: `nav-link block px-3 py-2 ${isActive(item.path) ? \"active\" : \"\"}`, onClick: () => setIsMobileMenuOpen(false), \"data-testid\": `mobile-link-${item.label.toLowerCase().replace(\" \", \"-\")}`, children: item.label }, item.path)))] }) }))] }) }));\n}\n","size_bytes":9061},"client/src/components/ui/accordion.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\nimport { ChevronDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nconst Accordion = AccordionPrimitive.Root;\nconst AccordionItem = React.forwardRef(({ className, ...props }, ref) => (_jsx(AccordionPrimitive.Item, { ref: ref, className: cn(\"border-b\", className), ...props })));\nAccordionItem.displayName = \"AccordionItem\";\nconst AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (_jsx(AccordionPrimitive.Header, { className: \"flex\", children: _jsxs(AccordionPrimitive.Trigger, { ref: ref, className: cn(\"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\", className), ...props, children: [children, _jsx(ChevronDown, { className: \"h-4 w-4 shrink-0 transition-transform duration-200\" })] }) })));\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;\nconst AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (_jsx(AccordionPrimitive.Content, { ref: ref, className: \"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\", ...props, children: _jsx(\"div\", { className: cn(\"pb-4 pt-0\", className), children: children }) })));\nAccordionContent.displayName = AccordionPrimitive.Content.displayName;\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n","size_bytes":1557},"client/src/components/ui/alert-dialog.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\nconst AlertDialog = AlertDialogPrimitive.Root;\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\nconst AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (_jsx(AlertDialogPrimitive.Overlay, { className: cn(\"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\", className), ...props, ref: ref })));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\nconst AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (_jsxs(AlertDialogPortal, { children: [_jsx(AlertDialogOverlay, {}), _jsx(AlertDialogPrimitive.Content, { ref: ref, className: cn(\"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\", className), ...props })] })));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\nconst AlertDialogHeader = ({ className, ...props }) => (_jsx(\"div\", { className: cn(\"flex flex-col space-y-2 text-center sm:text-left\", className), ...props }));\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\nconst AlertDialogFooter = ({ className, ...props }) => (_jsx(\"div\", { className: cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className), ...props }));\nAlertDialogFooter.displayName = \"AlertDialogFooter\";\nconst AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (_jsx(AlertDialogPrimitive.Title, { ref: ref, className: cn(\"text-lg font-semibold\", className), ...props })));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\nconst AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (_jsx(AlertDialogPrimitive.Description, { ref: ref, className: cn(\"text-sm text-muted-foreground\", className), ...props })));\nAlertDialogDescription.displayName =\n    AlertDialogPrimitive.Description.displayName;\nconst AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (_jsx(AlertDialogPrimitive.Action, { ref: ref, className: cn(buttonVariants(), className), ...props })));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\nconst AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (_jsx(AlertDialogPrimitive.Cancel, { ref: ref, className: cn(buttonVariants({ variant: \"outline\" }), \"mt-2 sm:mt-0\", className), ...props })));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\nexport { AlertDialog, AlertDialogPortal, AlertDialogOverlay, AlertDialogTrigger, AlertDialogContent, AlertDialogHeader, AlertDialogFooter, AlertDialogTitle, AlertDialogDescription, AlertDialogAction, AlertDialogCancel, };\n","size_bytes":3407},"client/src/components/ui/alert.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nconst alertVariants = cva(\"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\", {\n    variants: {\n        variant: {\n            default: \"bg-background text-foreground\",\n            destructive: \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n    },\n});\nconst Alert = React.forwardRef(({ className, variant, ...props }, ref) => (_jsx(\"div\", { ref: ref, role: \"alert\", className: cn(alertVariants({ variant }), className), ...props })));\nAlert.displayName = \"Alert\";\nconst AlertTitle = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"h5\", { ref: ref, className: cn(\"mb-1 font-medium leading-none tracking-tight\", className), ...props })));\nAlertTitle.displayName = \"AlertTitle\";\nconst AlertDescription = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"div\", { ref: ref, className: cn(\"text-sm [&_p]:leading-relaxed\", className), ...props })));\nAlertDescription.displayName = \"AlertDescription\";\nexport { Alert, AlertTitle, AlertDescription };\n","size_bytes":1341},"client/src/components/ui/aspect-ratio.js":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\";\nconst AspectRatio = AspectRatioPrimitive.Root;\nexport { AspectRatio };\n","size_bytes":141},"client/src/components/ui/avatar.js":{"content":"\"use client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\nimport { cn } from \"@/lib/utils\";\nconst Avatar = React.forwardRef(({ className, ...props }, ref) => (_jsx(AvatarPrimitive.Root, { ref: ref, className: cn(\"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\", className), ...props })));\nAvatar.displayName = AvatarPrimitive.Root.displayName;\nconst AvatarImage = React.forwardRef(({ className, ...props }, ref) => (_jsx(AvatarPrimitive.Image, { ref: ref, className: cn(\"aspect-square h-full w-full\", className), ...props })));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\nconst AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (_jsx(AvatarPrimitive.Fallback, { ref: ref, className: cn(\"flex h-full w-full items-center justify-center rounded-full bg-muted\", className), ...props })));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\nexport { Avatar, AvatarImage, AvatarFallback };\n","size_bytes":1046},"client/src/components/ui/badge.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nconst badgeVariants = cva(\"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\", {\n    variants: {\n        variant: {\n            default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n            secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n            destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n            outline: \"text-foreground\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n    },\n});\nfunction Badge({ className, variant, ...props }) {\n    return (_jsx(\"div\", { className: cn(badgeVariants({ variant }), className), ...props }));\n}\nexport { Badge, badgeVariants };\n","size_bytes":982},"client/src/components/ui/breadcrumb.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nconst Breadcrumb = React.forwardRef(({ ...props }, ref) => _jsx(\"nav\", { ref: ref, \"aria-label\": \"breadcrumb\", ...props }));\nBreadcrumb.displayName = \"Breadcrumb\";\nconst BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"ol\", { ref: ref, className: cn(\"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\", className), ...props })));\nBreadcrumbList.displayName = \"BreadcrumbList\";\nconst BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"li\", { ref: ref, className: cn(\"inline-flex items-center gap-1.5\", className), ...props })));\nBreadcrumbItem.displayName = \"BreadcrumbItem\";\nconst BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"a\";\n    return (_jsx(Comp, { ref: ref, className: cn(\"transition-colors hover:text-foreground\", className), ...props }));\n});\nBreadcrumbLink.displayName = \"BreadcrumbLink\";\nconst BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"span\", { ref: ref, role: \"link\", \"aria-disabled\": \"true\", \"aria-current\": \"page\", className: cn(\"font-normal text-foreground\", className), ...props })));\nBreadcrumbPage.displayName = \"BreadcrumbPage\";\nconst BreadcrumbSeparator = ({ children, className, ...props }) => (_jsx(\"li\", { role: \"presentation\", \"aria-hidden\": \"true\", className: cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className), ...props, children: children ?? _jsx(ChevronRight, {}) }));\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\";\nconst BreadcrumbEllipsis = ({ className, ...props }) => (_jsxs(\"span\", { role: \"presentation\", \"aria-hidden\": \"true\", className: cn(\"flex h-9 w-9 items-center justify-center\", className), ...props, children: [_jsx(MoreHorizontal, { className: \"h-4 w-4\" }), _jsx(\"span\", { className: \"sr-only\", children: \"More\" })] }));\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\";\nexport { Breadcrumb, BreadcrumbList, BreadcrumbItem, BreadcrumbLink, BreadcrumbPage, BreadcrumbSeparator, BreadcrumbEllipsis, };\n","size_bytes":2279},"client/src/components/ui/button.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nconst buttonVariants = cva(\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\", {\n    variants: {\n        variant: {\n            default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n            destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n            outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n            secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n            ghost: \"hover:bg-accent hover:text-accent-foreground\",\n            link: \"text-primary underline-offset-4 hover:underline\",\n        },\n        size: {\n            default: \"h-10 px-4 py-2\",\n            sm: \"h-9 rounded-md px-3\",\n            lg: \"h-11 rounded-md px-8\",\n            icon: \"h-10 w-10\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\",\n    },\n});\nconst Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (_jsx(Comp, { className: cn(buttonVariants({ variant, size, className })), ref: ref, ...props }));\n});\nButton.displayName = \"Button\";\nexport { Button, buttonVariants };\n","size_bytes":1725},"client/src/components/ui/calendar.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\nfunction Calendar({ className, classNames, showOutsideDays = true, ...props }) {\n    return (_jsx(DayPicker, { showOutsideDays: showOutsideDays, className: cn(\"p-3\", className), classNames: {\n            months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n            month: \"space-y-4\",\n            caption: \"flex justify-center pt-1 relative items-center\",\n            caption_label: \"text-sm font-medium\",\n            nav: \"space-x-1 flex items-center\",\n            nav_button: cn(buttonVariants({ variant: \"outline\" }), \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"),\n            nav_button_previous: \"absolute left-1\",\n            nav_button_next: \"absolute right-1\",\n            table: \"w-full border-collapse space-y-1\",\n            head_row: \"flex\",\n            head_cell: \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n            row: \"flex w-full mt-2\",\n            cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n            day: cn(buttonVariants({ variant: \"ghost\" }), \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"),\n            day_range_end: \"day-range-end\",\n            day_selected: \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n            day_today: \"bg-accent text-accent-foreground\",\n            day_outside: \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n            day_disabled: \"text-muted-foreground opacity-50\",\n            day_range_middle: \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n            day_hidden: \"invisible\",\n            ...classNames,\n        }, components: {\n            IconLeft: ({ className, ...props }) => (_jsx(ChevronLeft, { className: cn(\"h-4 w-4\", className), ...props })),\n            IconRight: ({ className, ...props }) => (_jsx(ChevronRight, { className: cn(\"h-4 w-4\", className), ...props })),\n        }, ...props }));\n}\nCalendar.displayName = \"Calendar\";\nexport { Calendar };\n","size_bytes":2561},"client/src/components/ui/card.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nconst Card = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"div\", { ref: ref, className: cn(\"rounded-lg border bg-card text-card-foreground shadow-sm\", className), ...props })));\nCard.displayName = \"Card\";\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"div\", { ref: ref, className: cn(\"flex flex-col space-y-1.5 p-6\", className), ...props })));\nCardHeader.displayName = \"CardHeader\";\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"div\", { ref: ref, className: cn(\"text-2xl font-semibold leading-none tracking-tight\", className), ...props })));\nCardTitle.displayName = \"CardTitle\";\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"div\", { ref: ref, className: cn(\"text-sm text-muted-foreground\", className), ...props })));\nCardDescription.displayName = \"CardDescription\";\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"div\", { ref: ref, className: cn(\"p-6 pt-0\", className), ...props })));\nCardContent.displayName = \"CardContent\";\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"div\", { ref: ref, className: cn(\"flex items-center p-6 pt-0\", className), ...props })));\nCardFooter.displayName = \"CardFooter\";\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };\n","size_bytes":1466},"client/src/components/ui/carousel.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport useEmblaCarousel from \"embla-carousel-react\";\nimport { ArrowLeft, ArrowRight } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nconst CarouselContext = React.createContext(null);\nfunction useCarousel() {\n    const context = React.useContext(CarouselContext);\n    if (!context) {\n        throw new Error(\"useCarousel must be used within a <Carousel />\");\n    }\n    return context;\n}\nconst Carousel = React.forwardRef(({ orientation = \"horizontal\", opts, setApi, plugins, className, children, ...props }, ref) => {\n    const [carouselRef, api] = useEmblaCarousel({\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n    }, plugins);\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false);\n    const [canScrollNext, setCanScrollNext] = React.useState(false);\n    const onSelect = React.useCallback((api) => {\n        if (!api) {\n            return;\n        }\n        setCanScrollPrev(api.canScrollPrev());\n        setCanScrollNext(api.canScrollNext());\n    }, []);\n    const scrollPrev = React.useCallback(() => {\n        api?.scrollPrev();\n    }, [api]);\n    const scrollNext = React.useCallback(() => {\n        api?.scrollNext();\n    }, [api]);\n    const handleKeyDown = React.useCallback((event) => {\n        if (event.key === \"ArrowLeft\") {\n            event.preventDefault();\n            scrollPrev();\n        }\n        else if (event.key === \"ArrowRight\") {\n            event.preventDefault();\n            scrollNext();\n        }\n    }, [scrollPrev, scrollNext]);\n    React.useEffect(() => {\n        if (!api || !setApi) {\n            return;\n        }\n        setApi(api);\n    }, [api, setApi]);\n    React.useEffect(() => {\n        if (!api) {\n            return;\n        }\n        onSelect(api);\n        api.on(\"reInit\", onSelect);\n        api.on(\"select\", onSelect);\n        return () => {\n            api?.off(\"select\", onSelect);\n        };\n    }, [api, onSelect]);\n    return (_jsx(CarouselContext.Provider, { value: {\n            carouselRef,\n            api: api,\n            opts,\n            orientation: orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n            scrollPrev,\n            scrollNext,\n            canScrollPrev,\n            canScrollNext,\n        }, children: _jsx(\"div\", { ref: ref, onKeyDownCapture: handleKeyDown, className: cn(\"relative\", className), role: \"region\", \"aria-roledescription\": \"carousel\", ...props, children: children }) }));\n});\nCarousel.displayName = \"Carousel\";\nconst CarouselContent = React.forwardRef(({ className, ...props }, ref) => {\n    const { carouselRef, orientation } = useCarousel();\n    return (_jsx(\"div\", { ref: carouselRef, className: \"overflow-hidden\", children: _jsx(\"div\", { ref: ref, className: cn(\"flex\", orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\", className), ...props }) }));\n});\nCarouselContent.displayName = \"CarouselContent\";\nconst CarouselItem = React.forwardRef(({ className, ...props }, ref) => {\n    const { orientation } = useCarousel();\n    return (_jsx(\"div\", { ref: ref, role: \"group\", \"aria-roledescription\": \"slide\", className: cn(\"min-w-0 shrink-0 grow-0 basis-full\", orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\", className), ...props }));\n});\nCarouselItem.displayName = \"CarouselItem\";\nconst CarouselPrevious = React.forwardRef(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n    const { orientation, scrollPrev, canScrollPrev } = useCarousel();\n    return (_jsxs(Button, { ref: ref, variant: variant, size: size, className: cn(\"absolute  h-8 w-8 rounded-full\", orientation === \"horizontal\"\n            ? \"-left-12 top-1/2 -translate-y-1/2\"\n            : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\", className), disabled: !canScrollPrev, onClick: scrollPrev, ...props, children: [_jsx(ArrowLeft, { className: \"h-4 w-4\" }), _jsx(\"span\", { className: \"sr-only\", children: \"Previous slide\" })] }));\n});\nCarouselPrevious.displayName = \"CarouselPrevious\";\nconst CarouselNext = React.forwardRef(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n    const { orientation, scrollNext, canScrollNext } = useCarousel();\n    return (_jsxs(Button, { ref: ref, variant: variant, size: size, className: cn(\"absolute h-8 w-8 rounded-full\", orientation === \"horizontal\"\n            ? \"-right-12 top-1/2 -translate-y-1/2\"\n            : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\", className), disabled: !canScrollNext, onClick: scrollNext, ...props, children: [_jsx(ArrowRight, { className: \"h-4 w-4\" }), _jsx(\"span\", { className: \"sr-only\", children: \"Next slide\" })] }));\n});\nCarouselNext.displayName = \"CarouselNext\";\nexport { Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext, };\n","size_bytes":4855},"client/src/components/ui/chart.js":{"content":"\"use client\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as RechartsPrimitive from \"recharts\";\nimport { cn } from \"@/lib/utils\";\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" };\nconst ChartContext = React.createContext(null);\nfunction useChart() {\n    const context = React.useContext(ChartContext);\n    if (!context) {\n        throw new Error(\"useChart must be used within a <ChartContainer />\");\n    }\n    return context;\n}\nconst ChartContainer = React.forwardRef(({ id, className, children, config, ...props }, ref) => {\n    const uniqueId = React.useId();\n    const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`;\n    return (_jsx(ChartContext.Provider, { value: { config }, children: _jsxs(\"div\", { \"data-chart\": chartId, ref: ref, className: cn(\"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\", className), ...props, children: [_jsx(ChartStyle, { id: chartId, config: config }), _jsx(RechartsPrimitive.ResponsiveContainer, { children: children })] }) }));\n});\nChartContainer.displayName = \"Chart\";\nconst ChartStyle = ({ id, config }) => {\n    const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color);\n    if (!colorConfig.length) {\n        return null;\n    }\n    return (_jsx(\"style\", { dangerouslySetInnerHTML: {\n            __html: Object.entries(THEMES)\n                .map(([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n                .map(([key, itemConfig]) => {\n                const color = itemConfig.theme?.[theme] ||\n                    itemConfig.color;\n                return color ? `  --color-${key}: ${color};` : null;\n            })\n                .join(\"\\n\")}\n}\n`)\n                .join(\"\\n\"),\n        } }));\n};\nconst ChartTooltip = RechartsPrimitive.Tooltip;\nconst ChartTooltipContent = React.forwardRef(({ active, payload, className, indicator = \"dot\", hideLabel = false, hideIndicator = false, label, labelFormatter, labelClassName, formatter, color, nameKey, labelKey, }, ref) => {\n    const { config } = useChart();\n    const tooltipLabel = React.useMemo(() => {\n        if (hideLabel || !payload?.length) {\n            return null;\n        }\n        const [item] = payload;\n        const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`;\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\n        const value = !labelKey && typeof label === \"string\"\n            ? config[label]?.label || label\n            : itemConfig?.label;\n        if (labelFormatter) {\n            return (_jsx(\"div\", { className: cn(\"font-medium\", labelClassName), children: labelFormatter(value, payload) }));\n        }\n        if (!value) {\n            return null;\n        }\n        return _jsx(\"div\", { className: cn(\"font-medium\", labelClassName), children: value });\n    }, [\n        label,\n        labelFormatter,\n        payload,\n        hideLabel,\n        labelClassName,\n        config,\n        labelKey,\n    ]);\n    if (!active || !payload?.length) {\n        return null;\n    }\n    const nestLabel = payload.length === 1 && indicator !== \"dot\";\n    return (_jsxs(\"div\", { ref: ref, className: cn(\"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\", className), children: [!nestLabel ? tooltipLabel : null, _jsx(\"div\", { className: \"grid gap-1.5\", children: payload.map((item, index) => {\n                    const key = `${nameKey || item.name || item.dataKey || \"value\"}`;\n                    const itemConfig = getPayloadConfigFromPayload(config, item, key);\n                    const indicatorColor = color || item.payload.fill || item.color;\n                    return (_jsx(\"div\", { className: cn(\"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\", indicator === \"dot\" && \"items-center\"), children: formatter && item?.value !== undefined && item.name ? (formatter(item.value, item.name, item, index, item.payload)) : (_jsxs(_Fragment, { children: [itemConfig?.icon ? (_jsx(itemConfig.icon, {})) : (!hideIndicator && (_jsx(\"div\", { className: cn(\"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\", {\n                                        \"h-2.5 w-2.5\": indicator === \"dot\",\n                                        \"w-1\": indicator === \"line\",\n                                        \"w-0 border-[1.5px] border-dashed bg-transparent\": indicator === \"dashed\",\n                                        \"my-0.5\": nestLabel && indicator === \"dashed\",\n                                    }), style: {\n                                        \"--color-bg\": indicatorColor,\n                                        \"--color-border\": indicatorColor,\n                                    } }))), _jsxs(\"div\", { className: cn(\"flex flex-1 justify-between leading-none\", nestLabel ? \"items-end\" : \"items-center\"), children: [_jsxs(\"div\", { className: \"grid gap-1.5\", children: [nestLabel ? tooltipLabel : null, _jsx(\"span\", { className: \"text-muted-foreground\", children: itemConfig?.label || item.name })] }), item.value && (_jsx(\"span\", { className: \"font-mono font-medium tabular-nums text-foreground\", children: item.value.toLocaleString() }))] })] })) }, item.dataKey));\n                }) })] }));\n});\nChartTooltipContent.displayName = \"ChartTooltip\";\nconst ChartLegend = RechartsPrimitive.Legend;\nconst ChartLegendContent = React.forwardRef(({ className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey }, ref) => {\n    const { config } = useChart();\n    if (!payload?.length) {\n        return null;\n    }\n    return (_jsx(\"div\", { ref: ref, className: cn(\"flex items-center justify-center gap-4\", verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\", className), children: payload.map((item) => {\n            const key = `${nameKey || item.dataKey || \"value\"}`;\n            const itemConfig = getPayloadConfigFromPayload(config, item, key);\n            return (_jsxs(\"div\", { className: cn(\"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"), children: [itemConfig?.icon && !hideIcon ? (_jsx(itemConfig.icon, {})) : (_jsx(\"div\", { className: \"h-2 w-2 shrink-0 rounded-[2px]\", style: {\n                            backgroundColor: item.color,\n                        } })), itemConfig?.label] }, item.value));\n        }) }));\n});\nChartLegendContent.displayName = \"ChartLegend\";\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(config, payload, key) {\n    if (typeof payload !== \"object\" || payload === null) {\n        return undefined;\n    }\n    const payloadPayload = \"payload\" in payload &&\n        typeof payload.payload === \"object\" &&\n        payload.payload !== null\n        ? payload.payload\n        : undefined;\n    let configLabelKey = key;\n    if (key in payload &&\n        typeof payload[key] === \"string\") {\n        configLabelKey = payload[key];\n    }\n    else if (payloadPayload &&\n        key in payloadPayload &&\n        typeof payloadPayload[key] === \"string\") {\n        configLabelKey = payloadPayload[key];\n    }\n    return configLabelKey in config\n        ? config[configLabelKey]\n        : config[key];\n}\nexport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle, };\n","size_bytes":7991},"client/src/components/ui/checkbox.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\";\nimport { Check } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nconst Checkbox = React.forwardRef(({ className, ...props }, ref) => (_jsx(CheckboxPrimitive.Root, { ref: ref, className: cn(\"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\", className), ...props, children: _jsx(CheckboxPrimitive.Indicator, { className: cn(\"flex items-center justify-center text-current\"), children: _jsx(Check, { className: \"h-4 w-4\" }) }) })));\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\nexport { Checkbox };\n","size_bytes":915},"client/src/components/ui/collapsible.js":{"content":"\"use client\";\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\";\nconst Collapsible = CollapsiblePrimitive.Root;\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent };\n","size_bytes":330},"client/src/components/ui/command.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { Search } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\nconst Command = React.forwardRef(({ className, ...props }, ref) => (_jsx(CommandPrimitive, { ref: ref, className: cn(\"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\", className), ...props })));\nCommand.displayName = CommandPrimitive.displayName;\nconst CommandDialog = ({ children, ...props }) => {\n    return (_jsx(Dialog, { ...props, children: _jsx(DialogContent, { className: \"overflow-hidden p-0 shadow-lg\", children: _jsx(Command, { className: \"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\", children: children }) }) }));\n};\nconst CommandInput = React.forwardRef(({ className, ...props }, ref) => (_jsxs(\"div\", { className: \"flex items-center border-b px-3\", \"cmdk-input-wrapper\": \"\", children: [_jsx(Search, { className: \"mr-2 h-4 w-4 shrink-0 opacity-50\" }), _jsx(CommandPrimitive.Input, { ref: ref, className: cn(\"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\", className), ...props })] })));\nCommandInput.displayName = CommandPrimitive.Input.displayName;\nconst CommandList = React.forwardRef(({ className, ...props }, ref) => (_jsx(CommandPrimitive.List, { ref: ref, className: cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className), ...props })));\nCommandList.displayName = CommandPrimitive.List.displayName;\nconst CommandEmpty = React.forwardRef((props, ref) => (_jsx(CommandPrimitive.Empty, { ref: ref, className: \"py-6 text-center text-sm\", ...props })));\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\nconst CommandGroup = React.forwardRef(({ className, ...props }, ref) => (_jsx(CommandPrimitive.Group, { ref: ref, className: cn(\"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\", className), ...props })));\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\nconst CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (_jsx(CommandPrimitive.Separator, { ref: ref, className: cn(\"-mx-1 h-px bg-border\", className), ...props })));\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\nconst CommandItem = React.forwardRef(({ className, ...props }, ref) => (_jsx(CommandPrimitive.Item, { ref: ref, className: cn(\"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\", className), ...props })));\nCommandItem.displayName = CommandPrimitive.Item.displayName;\nconst CommandShortcut = ({ className, ...props }) => {\n    return (_jsx(\"span\", { className: cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className), ...props }));\n};\nCommandShortcut.displayName = \"CommandShortcut\";\nexport { Command, CommandDialog, CommandInput, CommandList, CommandEmpty, CommandGroup, CommandItem, CommandShortcut, CommandSeparator, };\n","size_bytes":3788},"client/src/components/ui/context-menu.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nconst ContextMenu = ContextMenuPrimitive.Root;\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger;\nconst ContextMenuGroup = ContextMenuPrimitive.Group;\nconst ContextMenuPortal = ContextMenuPrimitive.Portal;\nconst ContextMenuSub = ContextMenuPrimitive.Sub;\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;\nconst ContextMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (_jsxs(ContextMenuPrimitive.SubTrigger, { ref: ref, className: cn(\"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\", inset && \"pl-8\", className), ...props, children: [children, _jsx(ChevronRight, { className: \"ml-auto h-4 w-4\" })] })));\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;\nconst ContextMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (_jsx(ContextMenuPrimitive.SubContent, { ref: ref, className: cn(\"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\", className), ...props })));\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;\nconst ContextMenuContent = React.forwardRef(({ className, ...props }, ref) => (_jsx(ContextMenuPrimitive.Portal, { children: _jsx(ContextMenuPrimitive.Content, { ref: ref, className: cn(\"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\", className), ...props }) })));\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;\nconst ContextMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (_jsx(ContextMenuPrimitive.Item, { ref: ref, className: cn(\"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", inset && \"pl-8\", className), ...props })));\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;\nconst ContextMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (_jsxs(ContextMenuPrimitive.CheckboxItem, { ref: ref, className: cn(\"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", className), checked: checked, ...props, children: [_jsx(\"span\", { className: \"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\", children: _jsx(ContextMenuPrimitive.ItemIndicator, { children: _jsx(Check, { className: \"h-4 w-4\" }) }) }), children] })));\nContextMenuCheckboxItem.displayName =\n    ContextMenuPrimitive.CheckboxItem.displayName;\nconst ContextMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (_jsxs(ContextMenuPrimitive.RadioItem, { ref: ref, className: cn(\"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", className), ...props, children: [_jsx(\"span\", { className: \"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\", children: _jsx(ContextMenuPrimitive.ItemIndicator, { children: _jsx(Circle, { className: \"h-2 w-2 fill-current\" }) }) }), children] })));\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;\nconst ContextMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (_jsx(ContextMenuPrimitive.Label, { ref: ref, className: cn(\"px-2 py-1.5 text-sm font-semibold text-foreground\", inset && \"pl-8\", className), ...props })));\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;\nconst ContextMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (_jsx(ContextMenuPrimitive.Separator, { ref: ref, className: cn(\"-mx-1 my-1 h-px bg-border\", className), ...props })));\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;\nconst ContextMenuShortcut = ({ className, ...props }) => {\n    return (_jsx(\"span\", { className: cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className), ...props }));\n};\nContextMenuShortcut.displayName = \"ContextMenuShortcut\";\nexport { ContextMenu, ContextMenuTrigger, ContextMenuContent, ContextMenuItem, ContextMenuCheckboxItem, ContextMenuRadioItem, ContextMenuLabel, ContextMenuSeparator, ContextMenuShortcut, ContextMenuGroup, ContextMenuPortal, ContextMenuSub, ContextMenuSubContent, ContextMenuSubTrigger, ContextMenuRadioGroup, };\n","size_bytes":5841},"client/src/components/ui/dialog.js":{"content":"\"use client\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nconst Dialog = DialogPrimitive.Root;\nconst DialogTrigger = DialogPrimitive.Trigger;\nconst DialogPortal = DialogPrimitive.Portal;\nconst DialogClose = DialogPrimitive.Close;\nconst DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (_jsx(DialogPrimitive.Overlay, { ref: ref, className: cn(\"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\", className), ...props })));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\nconst DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (_jsxs(DialogPortal, { children: [_jsx(DialogOverlay, {}), _jsxs(DialogPrimitive.Content, { ref: ref, className: cn(\"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\", className), ...props, children: [children, _jsxs(DialogPrimitive.Close, { className: \"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\", children: [_jsx(X, { className: \"h-4 w-4\" }), _jsx(\"span\", { className: \"sr-only\", children: \"Close\" })] })] })] })));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\nconst DialogHeader = ({ className, ...props }) => (_jsx(\"div\", { className: cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className), ...props }));\nDialogHeader.displayName = \"DialogHeader\";\nconst DialogFooter = ({ className, ...props }) => (_jsx(\"div\", { className: cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className), ...props }));\nDialogFooter.displayName = \"DialogFooter\";\nconst DialogTitle = React.forwardRef(({ className, ...props }, ref) => (_jsx(DialogPrimitive.Title, { ref: ref, className: cn(\"text-lg font-semibold leading-none tracking-tight\", className), ...props })));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\nconst DialogDescription = React.forwardRef(({ className, ...props }, ref) => (_jsx(DialogPrimitive.Description, { ref: ref, className: cn(\"text-sm text-muted-foreground\", className), ...props })));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\nexport { Dialog, DialogPortal, DialogOverlay, DialogClose, DialogTrigger, DialogContent, DialogHeader, DialogFooter, DialogTitle, DialogDescription, };\n","size_bytes":3142},"client/src/components/ui/drawer.js":{"content":"\"use client\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { Drawer as DrawerPrimitive } from \"vaul\";\nimport { cn } from \"@/lib/utils\";\nconst Drawer = ({ shouldScaleBackground = true, ...props }) => (_jsx(DrawerPrimitive.Root, { shouldScaleBackground: shouldScaleBackground, ...props }));\nDrawer.displayName = \"Drawer\";\nconst DrawerTrigger = DrawerPrimitive.Trigger;\nconst DrawerPortal = DrawerPrimitive.Portal;\nconst DrawerClose = DrawerPrimitive.Close;\nconst DrawerOverlay = React.forwardRef(({ className, ...props }, ref) => (_jsx(DrawerPrimitive.Overlay, { ref: ref, className: cn(\"fixed inset-0 z-50 bg-black/80\", className), ...props })));\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;\nconst DrawerContent = React.forwardRef(({ className, children, ...props }, ref) => (_jsxs(DrawerPortal, { children: [_jsx(DrawerOverlay, {}), _jsxs(DrawerPrimitive.Content, { ref: ref, className: cn(\"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\", className), ...props, children: [_jsx(\"div\", { className: \"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" }), children] })] })));\nDrawerContent.displayName = \"DrawerContent\";\nconst DrawerHeader = ({ className, ...props }) => (_jsx(\"div\", { className: cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className), ...props }));\nDrawerHeader.displayName = \"DrawerHeader\";\nconst DrawerFooter = ({ className, ...props }) => (_jsx(\"div\", { className: cn(\"mt-auto flex flex-col gap-2 p-4\", className), ...props }));\nDrawerFooter.displayName = \"DrawerFooter\";\nconst DrawerTitle = React.forwardRef(({ className, ...props }, ref) => (_jsx(DrawerPrimitive.Title, { ref: ref, className: cn(\"text-lg font-semibold leading-none tracking-tight\", className), ...props })));\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName;\nconst DrawerDescription = React.forwardRef(({ className, ...props }, ref) => (_jsx(DrawerPrimitive.Description, { ref: ref, className: cn(\"text-sm text-muted-foreground\", className), ...props })));\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName;\nexport { Drawer, DrawerPortal, DrawerOverlay, DrawerTrigger, DrawerClose, DrawerContent, DrawerHeader, DrawerFooter, DrawerTitle, DrawerDescription, };\n","size_bytes":2310},"client/src/components/ui/dropdown-menu.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nconst DropdownMenu = DropdownMenuPrimitive.Root;\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\nconst DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (_jsxs(DropdownMenuPrimitive.SubTrigger, { ref: ref, className: cn(\"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\", inset && \"pl-8\", className), ...props, children: [children, _jsx(ChevronRight, { className: \"ml-auto\" })] })));\nDropdownMenuSubTrigger.displayName =\n    DropdownMenuPrimitive.SubTrigger.displayName;\nconst DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (_jsx(DropdownMenuPrimitive.SubContent, { ref: ref, className: cn(\"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\", className), ...props })));\nDropdownMenuSubContent.displayName =\n    DropdownMenuPrimitive.SubContent.displayName;\nconst DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (_jsx(DropdownMenuPrimitive.Portal, { children: _jsx(DropdownMenuPrimitive.Content, { ref: ref, sideOffset: sideOffset, className: cn(\"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\", className), ...props }) })));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\nconst DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (_jsx(DropdownMenuPrimitive.Item, { ref: ref, className: cn(\"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\", inset && \"pl-8\", className), ...props })));\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\nconst DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (_jsxs(DropdownMenuPrimitive.CheckboxItem, { ref: ref, className: cn(\"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", className), checked: checked, ...props, children: [_jsx(\"span\", { className: \"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\", children: _jsx(DropdownMenuPrimitive.ItemIndicator, { children: _jsx(Check, { className: \"h-4 w-4\" }) }) }), children] })));\nDropdownMenuCheckboxItem.displayName =\n    DropdownMenuPrimitive.CheckboxItem.displayName;\nconst DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (_jsxs(DropdownMenuPrimitive.RadioItem, { ref: ref, className: cn(\"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", className), ...props, children: [_jsx(\"span\", { className: \"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\", children: _jsx(DropdownMenuPrimitive.ItemIndicator, { children: _jsx(Circle, { className: \"h-2 w-2 fill-current\" }) }) }), children] })));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\nconst DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (_jsx(DropdownMenuPrimitive.Label, { ref: ref, className: cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className), ...props })));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\nconst DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (_jsx(DropdownMenuPrimitive.Separator, { ref: ref, className: cn(\"-mx-1 my-1 h-px bg-muted\", className), ...props })));\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\nconst DropdownMenuShortcut = ({ className, ...props }) => {\n    return (_jsx(\"span\", { className: cn(\"ml-auto text-xs tracking-widest opacity-60\", className), ...props }));\n};\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\";\nexport { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem, DropdownMenuCheckboxItem, DropdownMenuRadioItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuShortcut, DropdownMenuGroup, DropdownMenuPortal, DropdownMenuSub, DropdownMenuSubContent, DropdownMenuSubTrigger, DropdownMenuRadioGroup, };\n","size_bytes":6022},"client/src/components/ui/floating-ai-assistant.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Bot, Send } from \"lucide-react\";\nexport default function FloatingAIAssistant() {\n    const [isOpen, setIsOpen] = useState(false);\n    const [chatMessages, setChatMessages] = useState([\n        {\n            id: '1',\n            type: 'assistant',\n            content: \"Hello! I'm your herbal wellness help assistant. I can help you find herbs for specific health concerns, suggest preparation methods, or answer questions about natural remedies. What would you like to know?\",\n            timestamp: new Date()\n        }\n    ]);\n    const [userInput, setUserInput] = useState(\"\");\n    const [isTyping, setIsTyping] = useState(false);\n    const messagesEndRef = useRef(null);\n    const latestResponseRef = useRef(null);\n    const scrollContainerRef = useRef(null);\n    // Scroll to top of latest AI response for better reading experience\n    useEffect(() => {\n        if (!isTyping && latestResponseRef.current && scrollContainerRef.current && chatMessages.length > 1) {\n            const latestMessage = chatMessages[chatMessages.length - 1];\n            if (latestMessage.type === 'assistant') {\n                setTimeout(() => {\n                    if (scrollContainerRef.current && latestResponseRef.current) {\n                        // Scroll to the AI response position\n                        const responseTop = latestResponseRef.current.offsetTop - 20;\n                        scrollContainerRef.current.scrollTo({\n                            top: responseTop,\n                            behavior: 'smooth'\n                        });\n                    }\n                }, 300);\n            }\n        }\n    }, [chatMessages, isTyping]);\n    const handleSendMessage = async () => {\n        if (!userInput.trim())\n            return;\n        const userMessage = {\n            id: Date.now().toString(),\n            type: 'user',\n            content: userInput,\n            timestamp: new Date()\n        };\n        setChatMessages(prev => [...prev, userMessage]);\n        const currentInput = userInput;\n        setUserInput(\"\");\n        setIsTyping(true);\n        try {\n            // Call the real Gemini API\n            const response = await fetch('/api/ai/wellness', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ message: currentInput })\n            });\n            const data = await response.json();\n            const assistantMessage = {\n                id: (Date.now() + 1).toString(),\n                type: 'assistant',\n                content: data.response || \"I'm sorry, I couldn't process your request right now. Please try again.\",\n                timestamp: new Date()\n            };\n            setChatMessages(prev => [...prev, assistantMessage]);\n        }\n        catch (error) {\n            console.error('Error calling AI API:', error);\n            const errorMessage = {\n                id: (Date.now() + 2).toString(),\n                type: 'assistant',\n                content: \"I'm experiencing technical difficulties. Please try again in a moment.\",\n                timestamp: new Date()\n            };\n            setChatMessages(prev => [...prev, errorMessage]);\n        }\n        finally {\n            setIsTyping(false);\n        }\n    };\n    return (_jsx(\"div\", { className: \"fixed bottom-6 right-6 z-50\", children: _jsxs(Dialog, { open: isOpen, onOpenChange: setIsOpen, children: [_jsx(DialogTrigger, { asChild: true, children: _jsx(Button, { size: \"lg\", className: \"rounded-full w-16 h-16 shadow-lg hover:shadow-xl transition-all duration-200 bg-primary hover:bg-primary/90\", children: _jsx(Bot, { className: \"h-6 w-6\" }) }) }), _jsxs(DialogContent, { className: \"max-w-2xl max-h-[80vh] flex flex-col border-2 border-primary/20 shadow-xl\", children: [_jsx(DialogHeader, { children: _jsxs(DialogTitle, { className: \"flex items-center gap-2\", children: [_jsx(Bot, { className: \"h-5 w-5\" }), \"Herbal Wellness Help Assistant\"] }) }), _jsxs(\"div\", { className: \"flex-1 flex flex-col min-h-0\", children: [_jsxs(\"div\", { ref: scrollContainerRef, className: \"flex-1 overflow-y-auto space-y-4 mb-4 p-4 bg-muted/20 rounded-lg\", children: [chatMessages.map((message, index) => (_jsx(\"div\", { ref: message.type === 'assistant' && index === chatMessages.length - 1 ? latestResponseRef : null, className: `flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`, children: _jsxs(\"div\", { className: `max-w-[80%] p-3 rounded-lg ${message.type === 'user'\n                                                    ? 'bg-primary text-primary-foreground'\n                                                    : 'bg-card border border-border'}`, children: [_jsx(\"p\", { className: \"text-sm\", children: message.content }), _jsx(\"p\", { className: \"text-xs opacity-70 mt-1\", children: message.timestamp.toLocaleTimeString() })] }) }, message.id))), isTyping && (_jsx(\"div\", { className: \"flex justify-start\", children: _jsx(\"div\", { className: \"bg-card border border-border p-3 rounded-lg\", children: _jsxs(\"div\", { className: \"flex space-x-1\", children: [_jsx(\"div\", { className: \"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" }), _jsx(\"div\", { className: \"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\", style: { animationDelay: '0.1s' } }), _jsx(\"div\", { className: \"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\", style: { animationDelay: '0.2s' } })] }) }) })), _jsx(\"div\", { ref: messagesEndRef })] }), _jsxs(\"div\", { className: \"flex gap-2\", children: [_jsx(Textarea, { placeholder: \"Ask about herbs, health concerns, or preparation methods...\", value: userInput, onChange: (e) => setUserInput(e.target.value), onKeyPress: (e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage(), className: \"flex-1 resize-none\", rows: 2 }), _jsx(Button, { onClick: handleSendMessage, disabled: !userInput.trim() || isTyping, className: \"px-4\", children: _jsx(Send, { className: \"h-4 w-4\" }) })] }), _jsxs(\"div\", { className: \"mt-3\", children: [_jsx(\"p\", { className: \"text-xs text-muted-foreground mb-2\", children: \"Quick suggestions:\" }), _jsx(\"div\", { className: \"flex flex-wrap gap-2\", children: [\n                                                \"Help me sleep better\",\n                                                \"Boost my energy\",\n                                                \"Digestive support\",\n                                                \"Stress relief\",\n                                                \"Skin health\",\n                                                \"Weight management\"\n                                            ].map((suggestion) => (_jsx(Button, { variant: \"outline\", size: \"sm\", onClick: () => {\n                                                    setUserInput(suggestion);\n                                                    setTimeout(() => handleSendMessage(), 100);\n                                                }, className: \"text-xs\", children: suggestion }, suggestion))) })] })] })] })] }) }));\n}\n","size_bytes":7362},"client/src/components/ui/form.js":{"content":"\"use client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { Controller, FormProvider, useFormContext, } from \"react-hook-form\";\nimport { cn } from \"@/lib/utils\";\nimport { Label } from \"@/components/ui/label\";\nconst Form = FormProvider;\nconst FormFieldContext = React.createContext({});\nconst FormField = ({ ...props }) => {\n    return (_jsx(FormFieldContext.Provider, { value: { name: props.name }, children: _jsx(Controller, { ...props }) }));\n};\nconst useFormField = () => {\n    const fieldContext = React.useContext(FormFieldContext);\n    const itemContext = React.useContext(FormItemContext);\n    const { getFieldState, formState } = useFormContext();\n    const fieldState = getFieldState(fieldContext.name, formState);\n    if (!fieldContext) {\n        throw new Error(\"useFormField should be used within <FormField>\");\n    }\n    const { id } = itemContext;\n    return {\n        id,\n        name: fieldContext.name,\n        formItemId: `${id}-form-item`,\n        formDescriptionId: `${id}-form-item-description`,\n        formMessageId: `${id}-form-item-message`,\n        ...fieldState,\n    };\n};\nconst FormItemContext = React.createContext({});\nconst FormItem = React.forwardRef(({ className, ...props }, ref) => {\n    const id = React.useId();\n    return (_jsx(FormItemContext.Provider, { value: { id }, children: _jsx(\"div\", { ref: ref, className: cn(\"space-y-2\", className), ...props }) }));\n});\nFormItem.displayName = \"FormItem\";\nconst FormLabel = React.forwardRef(({ className, ...props }, ref) => {\n    const { error, formItemId } = useFormField();\n    return (_jsx(Label, { ref: ref, className: cn(error && \"text-destructive\", className), htmlFor: formItemId, ...props }));\n});\nFormLabel.displayName = \"FormLabel\";\nconst FormControl = React.forwardRef(({ ...props }, ref) => {\n    const { error, formItemId, formDescriptionId, formMessageId } = useFormField();\n    return (_jsx(Slot, { ref: ref, id: formItemId, \"aria-describedby\": !error\n            ? `${formDescriptionId}`\n            : `${formDescriptionId} ${formMessageId}`, \"aria-invalid\": !!error, ...props }));\n});\nFormControl.displayName = \"FormControl\";\nconst FormDescription = React.forwardRef(({ className, ...props }, ref) => {\n    const { formDescriptionId } = useFormField();\n    return (_jsx(\"p\", { ref: ref, id: formDescriptionId, className: cn(\"text-sm text-muted-foreground\", className), ...props }));\n});\nFormDescription.displayName = \"FormDescription\";\nconst FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {\n    const { error, formMessageId } = useFormField();\n    const body = error ? String(error?.message ?? \"\") : children;\n    if (!body) {\n        return null;\n    }\n    return (_jsx(\"p\", { ref: ref, id: formMessageId, className: cn(\"text-sm font-medium text-destructive\", className), ...props, children: body }));\n});\nFormMessage.displayName = \"FormMessage\";\nexport { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField, };\n","size_bytes":3072},"client/src/components/ui/hover-card.js":{"content":"\"use client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\";\nimport { cn } from \"@/lib/utils\";\nconst HoverCard = HoverCardPrimitive.Root;\nconst HoverCardTrigger = HoverCardPrimitive.Trigger;\nconst HoverCardContent = React.forwardRef(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (_jsx(HoverCardPrimitive.Content, { ref: ref, align: align, sideOffset: sideOffset, className: cn(\"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\", className), ...props })));\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName;\nexport { HoverCard, HoverCardTrigger, HoverCardContent };\n","size_bytes":1138},"client/src/components/ui/input-otp.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { OTPInput, OTPInputContext } from \"input-otp\";\nimport { Dot } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nconst InputOTP = React.forwardRef(({ className, containerClassName, ...props }, ref) => (_jsx(OTPInput, { ref: ref, containerClassName: cn(\"flex items-center gap-2 has-[:disabled]:opacity-50\", containerClassName), className: cn(\"disabled:cursor-not-allowed\", className), ...props })));\nInputOTP.displayName = \"InputOTP\";\nconst InputOTPGroup = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"div\", { ref: ref, className: cn(\"flex items-center\", className), ...props })));\nInputOTPGroup.displayName = \"InputOTPGroup\";\nconst InputOTPSlot = React.forwardRef(({ index, className, ...props }, ref) => {\n    const inputOTPContext = React.useContext(OTPInputContext);\n    const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];\n    return (_jsxs(\"div\", { ref: ref, className: cn(\"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\", isActive && \"z-10 ring-2 ring-ring ring-offset-background\", className), ...props, children: [char, hasFakeCaret && (_jsx(\"div\", { className: \"pointer-events-none absolute inset-0 flex items-center justify-center\", children: _jsx(\"div\", { className: \"h-4 w-px animate-caret-blink bg-foreground duration-1000\" }) }))] }));\n});\nInputOTPSlot.displayName = \"InputOTPSlot\";\nconst InputOTPSeparator = React.forwardRef(({ ...props }, ref) => (_jsx(\"div\", { ref: ref, role: \"separator\", ...props, children: _jsx(Dot, {}) })));\nInputOTPSeparator.displayName = \"InputOTPSeparator\";\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };\n","size_bytes":1818},"client/src/components/ui/input.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nconst Input = React.forwardRef(({ className, type, ...props }, ref) => {\n    return (_jsx(\"input\", { type: type, className: cn(\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\", className), ref: ref, ...props }));\n});\nInput.displayName = \"Input\";\nexport { Input };\n","size_bytes":715},"client/src/components/ui/label.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nconst labelVariants = cva(\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\");\nconst Label = React.forwardRef(({ className, ...props }, ref) => (_jsx(LabelPrimitive.Root, { ref: ref, className: cn(labelVariants(), className), ...props })));\nLabel.displayName = LabelPrimitive.Root.displayName;\nexport { Label };\n","size_bytes":574},"client/src/components/ui/menubar.js":{"content":"\"use client\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nfunction MenubarMenu({ ...props }) {\n    return _jsx(MenubarPrimitive.Menu, { ...props });\n}\nfunction MenubarGroup({ ...props }) {\n    return _jsx(MenubarPrimitive.Group, { ...props });\n}\nfunction MenubarPortal({ ...props }) {\n    return _jsx(MenubarPrimitive.Portal, { ...props });\n}\nfunction MenubarRadioGroup({ ...props }) {\n    return _jsx(MenubarPrimitive.RadioGroup, { ...props });\n}\nfunction MenubarSub({ ...props }) {\n    return _jsx(MenubarPrimitive.Sub, { \"data-slot\": \"menubar-sub\", ...props });\n}\nconst Menubar = React.forwardRef(({ className, ...props }, ref) => (_jsx(MenubarPrimitive.Root, { ref: ref, className: cn(\"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\", className), ...props })));\nMenubar.displayName = MenubarPrimitive.Root.displayName;\nconst MenubarTrigger = React.forwardRef(({ className, ...props }, ref) => (_jsx(MenubarPrimitive.Trigger, { ref: ref, className: cn(\"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\", className), ...props })));\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;\nconst MenubarSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (_jsxs(MenubarPrimitive.SubTrigger, { ref: ref, className: cn(\"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\", inset && \"pl-8\", className), ...props, children: [children, _jsx(ChevronRight, { className: \"ml-auto h-4 w-4\" })] })));\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;\nconst MenubarSubContent = React.forwardRef(({ className, ...props }, ref) => (_jsx(MenubarPrimitive.SubContent, { ref: ref, className: cn(\"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\", className), ...props })));\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;\nconst MenubarContent = React.forwardRef(({ className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props }, ref) => (_jsx(MenubarPrimitive.Portal, { children: _jsx(MenubarPrimitive.Content, { ref: ref, align: align, alignOffset: alignOffset, sideOffset: sideOffset, className: cn(\"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\", className), ...props }) })));\nMenubarContent.displayName = MenubarPrimitive.Content.displayName;\nconst MenubarItem = React.forwardRef(({ className, inset, ...props }, ref) => (_jsx(MenubarPrimitive.Item, { ref: ref, className: cn(\"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", inset && \"pl-8\", className), ...props })));\nMenubarItem.displayName = MenubarPrimitive.Item.displayName;\nconst MenubarCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (_jsxs(MenubarPrimitive.CheckboxItem, { ref: ref, className: cn(\"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", className), checked: checked, ...props, children: [_jsx(\"span\", { className: \"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\", children: _jsx(MenubarPrimitive.ItemIndicator, { children: _jsx(Check, { className: \"h-4 w-4\" }) }) }), children] })));\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;\nconst MenubarRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (_jsxs(MenubarPrimitive.RadioItem, { ref: ref, className: cn(\"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", className), ...props, children: [_jsx(\"span\", { className: \"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\", children: _jsx(MenubarPrimitive.ItemIndicator, { children: _jsx(Circle, { className: \"h-2 w-2 fill-current\" }) }) }), children] })));\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;\nconst MenubarLabel = React.forwardRef(({ className, inset, ...props }, ref) => (_jsx(MenubarPrimitive.Label, { ref: ref, className: cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className), ...props })));\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName;\nconst MenubarSeparator = React.forwardRef(({ className, ...props }, ref) => (_jsx(MenubarPrimitive.Separator, { ref: ref, className: cn(\"-mx-1 my-1 h-px bg-muted\", className), ...props })));\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;\nconst MenubarShortcut = ({ className, ...props }) => {\n    return (_jsx(\"span\", { className: cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className), ...props }));\n};\nMenubarShortcut.displayname = \"MenubarShortcut\";\nexport { Menubar, MenubarMenu, MenubarTrigger, MenubarContent, MenubarItem, MenubarSeparator, MenubarLabel, MenubarCheckboxItem, MenubarRadioGroup, MenubarRadioItem, MenubarPortal, MenubarSubContent, MenubarSubTrigger, MenubarGroup, MenubarSub, MenubarShortcut, };\n","size_bytes":6503},"client/src/components/ui/navigation-menu.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\";\nimport { cva } from \"class-variance-authority\";\nimport { ChevronDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nconst NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => (_jsxs(NavigationMenuPrimitive.Root, { ref: ref, className: cn(\"relative z-10 flex max-w-max flex-1 items-center justify-center\", className), ...props, children: [children, _jsx(NavigationMenuViewport, {})] })));\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;\nconst NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => (_jsx(NavigationMenuPrimitive.List, { ref: ref, className: cn(\"group flex flex-1 list-none items-center justify-center space-x-1\", className), ...props })));\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;\nconst NavigationMenuItem = NavigationMenuPrimitive.Item;\nconst navigationMenuTriggerStyle = cva(\"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\");\nconst NavigationMenuTrigger = React.forwardRef(({ className, children, ...props }, ref) => (_jsxs(NavigationMenuPrimitive.Trigger, { ref: ref, className: cn(navigationMenuTriggerStyle(), \"group\", className), ...props, children: [children, \" \", _jsx(ChevronDown, { className: \"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\", \"aria-hidden\": \"true\" })] })));\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;\nconst NavigationMenuContent = React.forwardRef(({ className, ...props }, ref) => (_jsx(NavigationMenuPrimitive.Content, { ref: ref, className: cn(\"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \", className), ...props })));\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;\nconst NavigationMenuLink = NavigationMenuPrimitive.Link;\nconst NavigationMenuViewport = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"div\", { className: cn(\"absolute left-0 top-full flex justify-center\"), children: _jsx(NavigationMenuPrimitive.Viewport, { className: cn(\"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\", className), ref: ref, ...props }) })));\nNavigationMenuViewport.displayName =\n    NavigationMenuPrimitive.Viewport.displayName;\nconst NavigationMenuIndicator = React.forwardRef(({ className, ...props }, ref) => (_jsx(NavigationMenuPrimitive.Indicator, { ref: ref, className: cn(\"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\", className), ...props, children: _jsx(\"div\", { className: \"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" }) })));\nNavigationMenuIndicator.displayName =\n    NavigationMenuPrimitive.Indicator.displayName;\nexport { navigationMenuTriggerStyle, NavigationMenu, NavigationMenuList, NavigationMenuItem, NavigationMenuContent, NavigationMenuTrigger, NavigationMenuLink, NavigationMenuIndicator, NavigationMenuViewport, };\n","size_bytes":4122},"client/src/components/ui/pagination.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\nconst Pagination = ({ className, ...props }) => (_jsx(\"nav\", { role: \"navigation\", \"aria-label\": \"pagination\", className: cn(\"mx-auto flex w-full justify-center\", className), ...props }));\nPagination.displayName = \"Pagination\";\nconst PaginationContent = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"ul\", { ref: ref, className: cn(\"flex flex-row items-center gap-1\", className), ...props })));\nPaginationContent.displayName = \"PaginationContent\";\nconst PaginationItem = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"li\", { ref: ref, className: cn(\"\", className), ...props })));\nPaginationItem.displayName = \"PaginationItem\";\nconst PaginationLink = ({ className, isActive, size = \"icon\", ...props }) => (_jsx(\"a\", { \"aria-current\": isActive ? \"page\" : undefined, className: cn(buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n    }), className), ...props }));\nPaginationLink.displayName = \"PaginationLink\";\nconst PaginationPrevious = ({ className, ...props }) => (_jsxs(PaginationLink, { \"aria-label\": \"Go to previous page\", size: \"default\", className: cn(\"gap-1 pl-2.5\", className), ...props, children: [_jsx(ChevronLeft, { className: \"h-4 w-4\" }), _jsx(\"span\", { children: \"Previous\" })] }));\nPaginationPrevious.displayName = \"PaginationPrevious\";\nconst PaginationNext = ({ className, ...props }) => (_jsxs(PaginationLink, { \"aria-label\": \"Go to next page\", size: \"default\", className: cn(\"gap-1 pr-2.5\", className), ...props, children: [_jsx(\"span\", { children: \"Next\" }), _jsx(ChevronRight, { className: \"h-4 w-4\" })] }));\nPaginationNext.displayName = \"PaginationNext\";\nconst PaginationEllipsis = ({ className, ...props }) => (_jsxs(\"span\", { \"aria-hidden\": true, className: cn(\"flex h-9 w-9 items-center justify-center\", className), ...props, children: [_jsx(MoreHorizontal, { className: \"h-4 w-4\" }), _jsx(\"span\", { className: \"sr-only\", children: \"More pages\" })] }));\nPaginationEllipsis.displayName = \"PaginationEllipsis\";\nexport { Pagination, PaginationContent, PaginationEllipsis, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious, };\n","size_bytes":2377},"client/src/components/ui/popover.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\";\nimport { cn } from \"@/lib/utils\";\nconst Popover = PopoverPrimitive.Root;\nconst PopoverTrigger = PopoverPrimitive.Trigger;\nconst PopoverContent = React.forwardRef(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (_jsx(PopoverPrimitive.Portal, { children: _jsx(PopoverPrimitive.Content, { ref: ref, align: align, sideOffset: sideOffset, className: cn(\"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\", className), ...props }) })));\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\nexport { Popover, PopoverTrigger, PopoverContent };\n","size_bytes":1139},"client/src/components/ui/progress.js":{"content":"\"use client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\";\nimport { cn } from \"@/lib/utils\";\nconst Progress = React.forwardRef(({ className, value, ...props }, ref) => (_jsx(ProgressPrimitive.Root, { ref: ref, className: cn(\"relative h-4 w-full overflow-hidden rounded-full bg-secondary\", className), ...props, children: _jsx(ProgressPrimitive.Indicator, { className: \"h-full w-full flex-1 bg-primary transition-all\", style: { transform: `translateX(-${100 - (value || 0)}%)` } }) })));\nProgress.displayName = ProgressPrimitive.Root.displayName;\nexport { Progress };\n","size_bytes":666},"client/src/components/ui/radio-group.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\";\nimport { Circle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nconst RadioGroup = React.forwardRef(({ className, ...props }, ref) => {\n    return (_jsx(RadioGroupPrimitive.Root, { className: cn(\"grid gap-2\", className), ...props, ref: ref }));\n});\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName;\nconst RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {\n    return (_jsx(RadioGroupPrimitive.Item, { ref: ref, className: cn(\"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\", className), ...props, children: _jsx(RadioGroupPrimitive.Indicator, { className: \"flex items-center justify-center\", children: _jsx(Circle, { className: \"h-2.5 w-2.5 fill-current text-current\" }) }) }));\n});\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;\nexport { RadioGroup, RadioGroupItem };\n","size_bytes":1165},"client/src/components/ui/resizable.js":{"content":"\"use client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { GripVertical } from \"lucide-react\";\nimport * as ResizablePrimitive from \"react-resizable-panels\";\nimport { cn } from \"@/lib/utils\";\nconst ResizablePanelGroup = ({ className, ...props }) => (_jsx(ResizablePrimitive.PanelGroup, { className: cn(\"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\", className), ...props }));\nconst ResizablePanel = ResizablePrimitive.Panel;\nconst ResizableHandle = ({ withHandle, className, ...props }) => (_jsx(ResizablePrimitive.PanelResizeHandle, { className: cn(\"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\", className), ...props, children: withHandle && (_jsx(\"div\", { className: \"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\", children: _jsx(GripVertical, { className: \"h-2.5 w-2.5\" }) })) }));\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle };\n","size_bytes":1516},"client/src/components/ui/scroll-area.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\nimport { cn } from \"@/lib/utils\";\nconst ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (_jsxs(ScrollAreaPrimitive.Root, { ref: ref, className: cn(\"relative overflow-hidden\", className), ...props, children: [_jsx(ScrollAreaPrimitive.Viewport, { className: \"h-full w-full rounded-[inherit]\", children: children }), _jsx(ScrollBar, {}), _jsx(ScrollAreaPrimitive.Corner, {})] })));\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\nconst ScrollBar = React.forwardRef(({ className, orientation = \"vertical\", ...props }, ref) => (_jsx(ScrollAreaPrimitive.ScrollAreaScrollbar, { ref: ref, orientation: orientation, className: cn(\"flex touch-none select-none transition-colors\", orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\", orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\", className), ...props, children: _jsx(ScrollAreaPrimitive.ScrollAreaThumb, { className: \"relative flex-1 rounded-full bg-border\" }) })));\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\nexport { ScrollArea, ScrollBar };\n","size_bytes":1311},"client/src/components/ui/select.js":{"content":"\"use client\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nconst Select = SelectPrimitive.Root;\nconst SelectGroup = SelectPrimitive.Group;\nconst SelectValue = SelectPrimitive.Value;\nconst SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (_jsxs(SelectPrimitive.Trigger, { ref: ref, className: cn(\"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\", className), ...props, children: [children, _jsx(SelectPrimitive.Icon, { asChild: true, children: _jsx(ChevronDown, { className: \"h-4 w-4 opacity-50\" }) })] })));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\nconst SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (_jsx(SelectPrimitive.ScrollUpButton, { ref: ref, className: cn(\"flex cursor-default items-center justify-center py-1\", className), ...props, children: _jsx(ChevronUp, { className: \"h-4 w-4\" }) })));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\nconst SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (_jsx(SelectPrimitive.ScrollDownButton, { ref: ref, className: cn(\"flex cursor-default items-center justify-center py-1\", className), ...props, children: _jsx(ChevronDown, { className: \"h-4 w-4\" }) })));\nSelectScrollDownButton.displayName =\n    SelectPrimitive.ScrollDownButton.displayName;\nconst SelectContent = React.forwardRef(({ className, children, position = \"popper\", ...props }, ref) => (_jsx(SelectPrimitive.Portal, { children: _jsxs(SelectPrimitive.Content, { ref: ref, className: cn(\"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\", position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\", className), position: position, ...props, children: [_jsx(SelectScrollUpButton, {}), _jsx(SelectPrimitive.Viewport, { className: cn(\"p-1\", position === \"popper\" &&\n                    \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"), children: children }), _jsx(SelectScrollDownButton, {})] }) })));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\nconst SelectLabel = React.forwardRef(({ className, ...props }, ref) => (_jsx(SelectPrimitive.Label, { ref: ref, className: cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className), ...props })));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\nconst SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (_jsxs(SelectPrimitive.Item, { ref: ref, className: cn(\"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\", className), ...props, children: [_jsx(\"span\", { className: \"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\", children: _jsx(SelectPrimitive.ItemIndicator, { children: _jsx(Check, { className: \"h-4 w-4\" }) }) }), _jsx(SelectPrimitive.ItemText, { children: children })] })));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\nconst SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (_jsx(SelectPrimitive.Separator, { ref: ref, className: cn(\"-mx-1 my-1 h-px bg-muted\", className), ...props })));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\nexport { Select, SelectGroup, SelectValue, SelectTrigger, SelectContent, SelectLabel, SelectItem, SelectSeparator, SelectScrollUpButton, SelectScrollDownButton, };\n","size_bytes":4522},"client/src/components/ui/separator.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\nimport { cn } from \"@/lib/utils\";\nconst Separator = React.forwardRef(({ className, orientation = \"horizontal\", decorative = true, ...props }, ref) => (_jsx(SeparatorPrimitive.Root, { ref: ref, decorative: decorative, orientation: orientation, className: cn(\"shrink-0 bg-border\", orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\", className), ...props })));\nSeparator.displayName = SeparatorPrimitive.Root.displayName;\nexport { Separator };\n","size_bytes":603},"client/src/components/ui/sheet.js":{"content":"\"use client\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\";\nimport { cva } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nconst Sheet = SheetPrimitive.Root;\nconst SheetTrigger = SheetPrimitive.Trigger;\nconst SheetClose = SheetPrimitive.Close;\nconst SheetPortal = SheetPrimitive.Portal;\nconst SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (_jsx(SheetPrimitive.Overlay, { className: cn(\"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\", className), ...props, ref: ref })));\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName;\nconst sheetVariants = cva(\"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\", {\n    variants: {\n        side: {\n            top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n            bottom: \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n            left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n            right: \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n        },\n    },\n    defaultVariants: {\n        side: \"right\",\n    },\n});\nconst SheetContent = React.forwardRef(({ side = \"right\", className, children, ...props }, ref) => (_jsxs(SheetPortal, { children: [_jsx(SheetOverlay, {}), _jsxs(SheetPrimitive.Content, { ref: ref, className: cn(sheetVariants({ side }), className), ...props, children: [children, _jsxs(SheetPrimitive.Close, { className: \"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\", children: [_jsx(X, { className: \"h-4 w-4\" }), _jsx(\"span\", { className: \"sr-only\", children: \"Close\" })] })] })] })));\nSheetContent.displayName = SheetPrimitive.Content.displayName;\nconst SheetHeader = ({ className, ...props }) => (_jsx(\"div\", { className: cn(\"flex flex-col space-y-2 text-center sm:text-left\", className), ...props }));\nSheetHeader.displayName = \"SheetHeader\";\nconst SheetFooter = ({ className, ...props }) => (_jsx(\"div\", { className: cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className), ...props }));\nSheetFooter.displayName = \"SheetFooter\";\nconst SheetTitle = React.forwardRef(({ className, ...props }, ref) => (_jsx(SheetPrimitive.Title, { ref: ref, className: cn(\"text-lg font-semibold text-foreground\", className), ...props })));\nSheetTitle.displayName = SheetPrimitive.Title.displayName;\nconst SheetDescription = React.forwardRef(({ className, ...props }, ref) => (_jsx(SheetPrimitive.Description, { ref: ref, className: cn(\"text-sm text-muted-foreground\", className), ...props })));\nSheetDescription.displayName = SheetPrimitive.Description.displayName;\nexport { Sheet, SheetPortal, SheetOverlay, SheetTrigger, SheetClose, SheetContent, SheetHeader, SheetFooter, SheetTitle, SheetDescription, };\n","size_bytes":3504},"client/src/components/ui/sidebar.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, } from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger, } from \"@/components/ui/tooltip\";\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\nconst SidebarContext = React.createContext(null);\nfunction useSidebar() {\n    const context = React.useContext(SidebarContext);\n    if (!context) {\n        throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n    }\n    return context;\n}\nconst SidebarProvider = React.forwardRef(({ defaultOpen = true, open: openProp, onOpenChange: setOpenProp, className, style, children, ...props }, ref) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback((value) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n            setOpenProp(openState);\n        }\n        else {\n            _setOpen(openState);\n        }\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n    }, [setOpenProp, open]);\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n        return isMobile\n            ? setOpenMobile((open) => !open)\n            : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n        const handleKeyDown = (event) => {\n            if (event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n                (event.metaKey || event.ctrlKey)) {\n                event.preventDefault();\n                toggleSidebar();\n            }\n        };\n        window.addEventListener(\"keydown\", handleKeyDown);\n        return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n    const contextValue = React.useMemo(() => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n    }), [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]);\n    return (_jsx(SidebarContext.Provider, { value: contextValue, children: _jsx(TooltipProvider, { delayDuration: 0, children: _jsx(\"div\", { style: {\n                    \"--sidebar-width\": SIDEBAR_WIDTH,\n                    \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                    ...style,\n                }, className: cn(\"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\", className), ref: ref, ...props, children: children }) }) }));\n});\nSidebarProvider.displayName = \"SidebarProvider\";\nconst Sidebar = React.forwardRef(({ side = \"left\", variant = \"sidebar\", collapsible = \"offcanvas\", className, children, ...props }, ref) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n    if (collapsible === \"none\") {\n        return (_jsx(\"div\", { className: cn(\"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\", className), ref: ref, ...props, children: children }));\n    }\n    if (isMobile) {\n        return (_jsx(Sheet, { open: openMobile, onOpenChange: setOpenMobile, ...props, children: _jsxs(SheetContent, { \"data-sidebar\": \"sidebar\", \"data-mobile\": \"true\", className: \"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\", style: {\n                    \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n                }, side: side, children: [_jsxs(SheetHeader, { className: \"sr-only\", children: [_jsx(SheetTitle, { children: \"Sidebar\" }), _jsx(SheetDescription, { children: \"Displays the mobile sidebar.\" })] }), _jsx(\"div\", { className: \"flex h-full w-full flex-col\", children: children })] }) }));\n    }\n    return (_jsxs(\"div\", { ref: ref, className: \"group peer hidden text-sidebar-foreground md:block\", \"data-state\": state, \"data-collapsible\": state === \"collapsed\" ? collapsible : \"\", \"data-variant\": variant, \"data-side\": side, children: [_jsx(\"div\", { className: cn(\"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\", \"group-data-[collapsible=offcanvas]:w-0\", \"group-data-[side=right]:rotate-180\", variant === \"floating\" || variant === \"inset\"\n                    ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n                    : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\") }), _jsx(\"div\", { className: cn(\"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\", side === \"left\"\n                    ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n                    : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\", \n                // Adjust the padding for floating and inset variants.\n                variant === \"floating\" || variant === \"inset\"\n                    ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n                    : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\", className), ...props, children: _jsx(\"div\", { \"data-sidebar\": \"sidebar\", className: \"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\", children: children }) })] }));\n});\nSidebar.displayName = \"Sidebar\";\nconst SidebarTrigger = React.forwardRef(({ className, onClick, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n    return (_jsxs(Button, { ref: ref, \"data-sidebar\": \"trigger\", variant: \"ghost\", size: \"icon\", className: cn(\"h-7 w-7\", className), onClick: (event) => {\n            onClick?.(event);\n            toggleSidebar();\n        }, ...props, children: [_jsx(PanelLeft, {}), _jsx(\"span\", { className: \"sr-only\", children: \"Toggle Sidebar\" })] }));\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\nconst SidebarRail = React.forwardRef(({ className, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n    return (_jsx(\"button\", { ref: ref, \"data-sidebar\": \"rail\", \"aria-label\": \"Toggle Sidebar\", tabIndex: -1, onClick: toggleSidebar, title: \"Toggle Sidebar\", className: cn(\"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\", \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\", \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\", \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\", \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\", \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\", className), ...props }));\n});\nSidebarRail.displayName = \"SidebarRail\";\nconst SidebarInset = React.forwardRef(({ className, ...props }, ref) => {\n    return (_jsx(\"main\", { ref: ref, className: cn(\"relative flex w-full flex-1 flex-col bg-background\", \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\", className), ...props }));\n});\nSidebarInset.displayName = \"SidebarInset\";\nconst SidebarInput = React.forwardRef(({ className, ...props }, ref) => {\n    return (_jsx(Input, { ref: ref, \"data-sidebar\": \"input\", className: cn(\"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\", className), ...props }));\n});\nSidebarInput.displayName = \"SidebarInput\";\nconst SidebarHeader = React.forwardRef(({ className, ...props }, ref) => {\n    return (_jsx(\"div\", { ref: ref, \"data-sidebar\": \"header\", className: cn(\"flex flex-col gap-2 p-2\", className), ...props }));\n});\nSidebarHeader.displayName = \"SidebarHeader\";\nconst SidebarFooter = React.forwardRef(({ className, ...props }, ref) => {\n    return (_jsx(\"div\", { ref: ref, \"data-sidebar\": \"footer\", className: cn(\"flex flex-col gap-2 p-2\", className), ...props }));\n});\nSidebarFooter.displayName = \"SidebarFooter\";\nconst SidebarSeparator = React.forwardRef(({ className, ...props }, ref) => {\n    return (_jsx(Separator, { ref: ref, \"data-sidebar\": \"separator\", className: cn(\"mx-2 w-auto bg-sidebar-border\", className), ...props }));\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\nconst SidebarContent = React.forwardRef(({ className, ...props }, ref) => {\n    return (_jsx(\"div\", { ref: ref, \"data-sidebar\": \"content\", className: cn(\"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\", className), ...props }));\n});\nSidebarContent.displayName = \"SidebarContent\";\nconst SidebarGroup = React.forwardRef(({ className, ...props }, ref) => {\n    return (_jsx(\"div\", { ref: ref, \"data-sidebar\": \"group\", className: cn(\"relative flex w-full min-w-0 flex-col p-2\", className), ...props }));\n});\nSidebarGroup.displayName = \"SidebarGroup\";\nconst SidebarGroupLabel = React.forwardRef(({ className, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"div\";\n    return (_jsx(Comp, { ref: ref, \"data-sidebar\": \"group-label\", className: cn(\"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\", \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\", className), ...props }));\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\nconst SidebarGroupAction = React.forwardRef(({ className, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (_jsx(Comp, { ref: ref, \"data-sidebar\": \"group-action\", className: cn(\"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\", \n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\", \"group-data-[collapsible=icon]:hidden\", className), ...props }));\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\nconst SidebarGroupContent = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"div\", { ref: ref, \"data-sidebar\": \"group-content\", className: cn(\"w-full text-sm\", className), ...props })));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\nconst SidebarMenu = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"ul\", { ref: ref, \"data-sidebar\": \"menu\", className: cn(\"flex w-full min-w-0 flex-col gap-1\", className), ...props })));\nSidebarMenu.displayName = \"SidebarMenu\";\nconst SidebarMenuItem = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"li\", { ref: ref, \"data-sidebar\": \"menu-item\", className: cn(\"group/menu-item relative\", className), ...props })));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\nconst sidebarMenuButtonVariants = cva(\"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\", {\n    variants: {\n        variant: {\n            default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n            outline: \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n        },\n        size: {\n            default: \"h-8 text-sm\",\n            sm: \"h-7 text-xs\",\n            lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\",\n    },\n});\nconst SidebarMenuButton = React.forwardRef(({ asChild = false, isActive = false, variant = \"default\", size = \"default\", tooltip, className, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n    const button = (_jsx(Comp, { ref: ref, \"data-sidebar\": \"menu-button\", \"data-size\": size, \"data-active\": isActive, className: cn(sidebarMenuButtonVariants({ variant, size }), className), ...props }));\n    if (!tooltip) {\n        return button;\n    }\n    if (typeof tooltip === \"string\") {\n        tooltip = {\n            children: tooltip,\n        };\n    }\n    return (_jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: button }), _jsx(TooltipContent, { side: \"right\", align: \"center\", hidden: state !== \"collapsed\" || isMobile, ...tooltip })] }));\n});\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\nconst SidebarMenuAction = React.forwardRef(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (_jsx(Comp, { ref: ref, \"data-sidebar\": \"menu-action\", className: cn(\"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\", \n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\", \"peer-data-[size=sm]/menu-button:top-1\", \"peer-data-[size=default]/menu-button:top-1.5\", \"peer-data-[size=lg]/menu-button:top-2.5\", \"group-data-[collapsible=icon]:hidden\", showOnHover &&\n            \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\", className), ...props }));\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\nconst SidebarMenuBadge = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"div\", { ref: ref, \"data-sidebar\": \"menu-badge\", className: cn(\"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\", \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\", \"peer-data-[size=sm]/menu-button:top-1\", \"peer-data-[size=default]/menu-button:top-1.5\", \"peer-data-[size=lg]/menu-button:top-2.5\", \"group-data-[collapsible=icon]:hidden\", className), ...props })));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\nconst SidebarMenuSkeleton = React.forwardRef(({ className, showIcon = false, ...props }, ref) => {\n    // Random width between 50 to 90%.\n    const width = React.useMemo(() => {\n        return `${Math.floor(Math.random() * 40) + 50}%`;\n    }, []);\n    return (_jsxs(\"div\", { ref: ref, \"data-sidebar\": \"menu-skeleton\", className: cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className), ...props, children: [showIcon && (_jsx(Skeleton, { className: \"size-4 rounded-md\", \"data-sidebar\": \"menu-skeleton-icon\" })), _jsx(Skeleton, { className: \"h-4 max-w-[--skeleton-width] flex-1\", \"data-sidebar\": \"menu-skeleton-text\", style: {\n                    \"--skeleton-width\": width,\n                } })] }));\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\nconst SidebarMenuSub = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"ul\", { ref: ref, \"data-sidebar\": \"menu-sub\", className: cn(\"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\", \"group-data-[collapsible=icon]:hidden\", className), ...props })));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\nconst SidebarMenuSubItem = React.forwardRef(({ ...props }, ref) => _jsx(\"li\", { ref: ref, ...props }));\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\nconst SidebarMenuSubButton = React.forwardRef(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"a\";\n    return (_jsx(Comp, { ref: ref, \"data-sidebar\": \"menu-sub-button\", \"data-size\": size, \"data-active\": isActive, className: cn(\"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\", \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\", size === \"sm\" && \"text-xs\", size === \"md\" && \"text-sm\", \"group-data-[collapsible=icon]:hidden\", className), ...props }));\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\nexport { Sidebar, SidebarContent, SidebarFooter, SidebarGroup, SidebarGroupAction, SidebarGroupContent, SidebarGroupLabel, SidebarHeader, SidebarInput, SidebarInset, SidebarMenu, SidebarMenuAction, SidebarMenuBadge, SidebarMenuButton, SidebarMenuItem, SidebarMenuSkeleton, SidebarMenuSub, SidebarMenuSubButton, SidebarMenuSubItem, SidebarProvider, SidebarRail, SidebarSeparator, SidebarTrigger, useSidebar, };\n","size_bytes":19562},"client/src/components/ui/skeleton.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { cn } from \"@/lib/utils\";\nfunction Skeleton({ className, ...props }) {\n    return (_jsx(\"div\", { className: cn(\"animate-pulse rounded-md bg-muted\", className), ...props }));\n}\nexport { Skeleton };\n","size_bytes":254},"client/src/components/ui/slider.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as SliderPrimitive from \"@radix-ui/react-slider\";\nimport { cn } from \"@/lib/utils\";\nconst Slider = React.forwardRef(({ className, ...props }, ref) => (_jsxs(SliderPrimitive.Root, { ref: ref, className: cn(\"relative flex w-full touch-none select-none items-center\", className), ...props, children: [_jsx(SliderPrimitive.Track, { className: \"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\", children: _jsx(SliderPrimitive.Range, { className: \"absolute h-full bg-primary\" }) }), _jsx(SliderPrimitive.Thumb, { className: \"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" })] })));\nSlider.displayName = SliderPrimitive.Root.displayName;\nexport { Slider };\n","size_bytes":983},"client/src/components/ui/switch.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\nimport { cn } from \"@/lib/utils\";\nconst Switch = React.forwardRef(({ className, ...props }, ref) => (_jsx(SwitchPrimitives.Root, { className: cn(\"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\", className), ...props, ref: ref, children: _jsx(SwitchPrimitives.Thumb, { className: cn(\"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\") }) })));\nSwitch.displayName = SwitchPrimitives.Root.displayName;\nexport { Switch };\n","size_bytes":1005},"client/src/components/ui/table.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nconst Table = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"div\", { className: \"relative w-full overflow-auto\", children: _jsx(\"table\", { ref: ref, className: cn(\"w-full caption-bottom text-sm\", className), ...props }) })));\nTable.displayName = \"Table\";\nconst TableHeader = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"thead\", { ref: ref, className: cn(\"[&_tr]:border-b\", className), ...props })));\nTableHeader.displayName = \"TableHeader\";\nconst TableBody = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"tbody\", { ref: ref, className: cn(\"[&_tr:last-child]:border-0\", className), ...props })));\nTableBody.displayName = \"TableBody\";\nconst TableFooter = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"tfoot\", { ref: ref, className: cn(\"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\", className), ...props })));\nTableFooter.displayName = \"TableFooter\";\nconst TableRow = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"tr\", { ref: ref, className: cn(\"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\", className), ...props })));\nTableRow.displayName = \"TableRow\";\nconst TableHead = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"th\", { ref: ref, className: cn(\"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\", className), ...props })));\nTableHead.displayName = \"TableHead\";\nconst TableCell = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"td\", { ref: ref, className: cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className), ...props })));\nTableCell.displayName = \"TableCell\";\nconst TableCaption = React.forwardRef(({ className, ...props }, ref) => (_jsx(\"caption\", { ref: ref, className: cn(\"mt-4 text-sm text-muted-foreground\", className), ...props })));\nTableCaption.displayName = \"TableCaption\";\nexport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption, };\n","size_bytes":2087},"client/src/components/ui/tabs.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\";\nimport { cn } from \"@/lib/utils\";\nconst Tabs = TabsPrimitive.Root;\nconst TabsList = React.forwardRef(({ className, ...props }, ref) => (_jsx(TabsPrimitive.List, { ref: ref, className: cn(\"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\", className), ...props })));\nTabsList.displayName = TabsPrimitive.List.displayName;\nconst TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (_jsx(TabsPrimitive.Trigger, { ref: ref, className: cn(\"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\", className), ...props })));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\nconst TabsContent = React.forwardRef(({ className, ...props }, ref) => (_jsx(TabsPrimitive.Content, { ref: ref, className: cn(\"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\", className), ...props })));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n","size_bytes":1502},"client/src/components/ui/textarea.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nconst Textarea = React.forwardRef(({ className, ...props }, ref) => {\n    return (_jsx(\"textarea\", { className: cn(\"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\", className), ref: ref, ...props }));\n});\nTextarea.displayName = \"Textarea\";\nexport { Textarea };\n","size_bytes":635},"client/src/components/ui/toast.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as ToastPrimitives from \"@radix-ui/react-toast\";\nimport { cva } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nconst ToastProvider = ToastPrimitives.Provider;\nconst ToastViewport = React.forwardRef(({ className, ...props }, ref) => (_jsx(ToastPrimitives.Viewport, { ref: ref, className: cn(\"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\", className), ...props })));\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\nconst toastVariants = cva(\"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\", {\n    variants: {\n        variant: {\n            default: \"border bg-background text-foreground\",\n            destructive: \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n    },\n});\nconst Toast = React.forwardRef(({ className, variant, ...props }, ref) => {\n    return (_jsx(ToastPrimitives.Root, { ref: ref, className: cn(toastVariants({ variant }), className), ...props }));\n});\nToast.displayName = ToastPrimitives.Root.displayName;\nconst ToastAction = React.forwardRef(({ className, ...props }, ref) => (_jsx(ToastPrimitives.Action, { ref: ref, className: cn(\"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\", className), ...props })));\nToastAction.displayName = ToastPrimitives.Action.displayName;\nconst ToastClose = React.forwardRef(({ className, ...props }, ref) => (_jsx(ToastPrimitives.Close, { ref: ref, className: cn(\"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\", className), \"toast-close\": \"\", ...props, children: _jsx(X, { className: \"h-4 w-4\" }) })));\nToastClose.displayName = ToastPrimitives.Close.displayName;\nconst ToastTitle = React.forwardRef(({ className, ...props }, ref) => (_jsx(ToastPrimitives.Title, { ref: ref, className: cn(\"text-sm font-semibold\", className), ...props })));\nToastTitle.displayName = ToastPrimitives.Title.displayName;\nconst ToastDescription = React.forwardRef(({ className, ...props }, ref) => (_jsx(ToastPrimitives.Description, { ref: ref, className: cn(\"text-sm opacity-90\", className), ...props })));\nToastDescription.displayName = ToastPrimitives.Description.displayName;\nexport { ToastProvider, ToastViewport, Toast, ToastTitle, ToastDescription, ToastClose, ToastAction, };\n","size_bytes":3784},"client/src/components/ui/toaster.js":{"content":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport, } from \"@/components/ui/toast\";\nexport function Toaster() {\n    const { toasts } = useToast();\n    return (_jsxs(ToastProvider, { children: [toasts.map(function ({ id, title, description, action, ...props }) {\n                return (_jsxs(Toast, { ...props, children: [_jsxs(\"div\", { className: \"grid gap-1\", children: [title && _jsx(ToastTitle, { children: title }), description && (_jsx(ToastDescription, { children: description }))] }), action, _jsx(ToastClose, {})] }, id));\n            }), _jsx(ToastViewport, {})] }));\n}\n","size_bytes":726},"client/src/components/ui/toggle-group.js":{"content":"\"use client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\";\nimport { cn } from \"@/lib/utils\";\nimport { toggleVariants } from \"@/components/ui/toggle\";\nconst ToggleGroupContext = React.createContext({\n    size: \"default\",\n    variant: \"default\",\n});\nconst ToggleGroup = React.forwardRef(({ className, variant, size, children, ...props }, ref) => (_jsx(ToggleGroupPrimitive.Root, { ref: ref, className: cn(\"flex items-center justify-center gap-1\", className), ...props, children: _jsx(ToggleGroupContext.Provider, { value: { variant, size }, children: children }) })));\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;\nconst ToggleGroupItem = React.forwardRef(({ className, children, variant, size, ...props }, ref) => {\n    const context = React.useContext(ToggleGroupContext);\n    return (_jsx(ToggleGroupPrimitive.Item, { ref: ref, className: cn(toggleVariants({\n            variant: context.variant || variant,\n            size: context.size || size,\n        }), className), ...props, children: children }));\n});\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;\nexport { ToggleGroup, ToggleGroupItem };\n","size_bytes":1246},"client/src/components/ui/toggle.js":{"content":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nconst toggleVariants = cva(\"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\", {\n    variants: {\n        variant: {\n            default: \"bg-transparent\",\n            outline: \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n        },\n        size: {\n            default: \"h-10 px-3 min-w-10\",\n            sm: \"h-9 px-2.5 min-w-9\",\n            lg: \"h-11 px-5 min-w-11\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\",\n    },\n});\nconst Toggle = React.forwardRef(({ className, variant, size, ...props }, ref) => (_jsx(TogglePrimitive.Root, { ref: ref, className: cn(toggleVariants({ variant, size, className })), ...props })));\nToggle.displayName = TogglePrimitive.Root.displayName;\nexport { Toggle, toggleVariants };\n","size_bytes":1405},"client/src/components/ui/tooltip.js":{"content":"\"use client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from \"react\";\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\";\nimport { cn } from \"@/lib/utils\";\nconst TooltipProvider = TooltipPrimitive.Provider;\nconst Tooltip = TooltipPrimitive.Root;\nconst TooltipTrigger = TooltipPrimitive.Trigger;\nconst TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (_jsx(TooltipPrimitive.Content, { ref: ref, sideOffset: sideOffset, className: cn(\"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\", className), ...props })));\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n","size_bytes":1104},"server/vite-backup.js":{"content":"import express from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\nimport { fileURLToPath } from \"url\";\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst viteLogger = createLogger();\nexport function log(message, source = \"express\") {\n    const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n        hour: \"numeric\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        hour12: true,\n    });\n    console.log(`${formattedTime} [${source}] ${message}`);\n}\nexport async function setupVite(app, server) {\n    const serverOptions = {\n        middlewareMode: true,\n        hmr: {\n            port: undefined,\n            clientPort: undefined,\n        },\n        allowedHosts: true,\n    };\n    const vite = await createViteServer({\n        ...viteConfig,\n        configFile: false,\n        customLogger: {\n            ...viteLogger,\n            error: (msg, options) => {\n                viteLogger.error(msg, options);\n                process.exit(1);\n            },\n        },\n        server: serverOptions,\n        appType: \"custom\",\n    });\n    app.use(vite.middlewares);\n    app.use(\"*\", async (req, res, next) => {\n        const url = req.originalUrl;\n        try {\n            const clientTemplate = path.resolve(__dirname, \"..\", \"client\", \"index.html\");\n            // always reload the index.html file from disk incase it changes\n            let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n            template = template.replace(`src=\"/src/main.tsx\"`, `src=\"/src/main.tsx?v=${nanoid()}\"`);\n            const page = await vite.transformIndexHtml(url, template);\n            res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n        }\n        catch (e) {\n            vite.ssrFixStacktrace(e);\n            next(e);\n        }\n    });\n}\nexport function serveStatic(app) {\n    const distPath = path.resolve(__dirname, \"public\");\n    if (!fs.existsSync(distPath)) {\n        throw new Error(`Could not find the build directory: ${distPath}, make sure to build the client first`);\n    }\n    app.use(express.static(distPath));\n    // fall through to index.html if the file doesn't exist\n    app.use(\"*\", (_req, res) => {\n        res.sendFile(path.resolve(distPath, \"index.html\"));\n    });\n}\n","size_bytes":2412},"server/vite-prod.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { type Server } from \"http\";\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\n// For production, we don't need setupVite, just export a stub\nexport async function setupVite(app: Express, server: Server) {\n  // In production, this function should not be called\n  throw new Error(\"setupVite should not be called in production\");\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(process.cwd(), \"dist\", \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}","size_bytes":1124}},"version":1}